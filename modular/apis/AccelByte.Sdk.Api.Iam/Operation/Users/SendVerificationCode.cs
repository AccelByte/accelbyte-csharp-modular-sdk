// Copyright (c) 2022-2023 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Iam.Model;

namespace AccelByte.Sdk.Api.Iam.Operation
{
    /// <summary>
    /// SendVerificationCode
    ///
    /// 
    /// 
    /// ## The endpoint is going to be deprecated
    /// 
    /// 
    /// Endpoint migration guide
    /// 
    /// 
    ///           * Substitute endpoint: /iam/v3/public/namespaces/{namespace}/users/me/code/request [POST]
    /// 
    /// 
    /// 
    /// 
    /// Required permission 'NAMESPACE:{namespace}:USER:{userId} [UPDATE]'
    /// 
    /// 
    /// The verification code is sent to either the phone number or email address. It depends on the LoginID's value.
    /// 
    /// 
    /// 
    /// 
    /// Available contexts for use :
    /// 
    /// 
    /// 
    /// 
    ///           1. UserAccountRegistration
    /// 
    /// a context type used for verifying email address in user account registration. It returns 409 if the email address already verified. It is the default context if the Context field is empty
    /// 
    /// 
    /// 
    ///           2. UpdateEmailAddress
    /// 
    /// a context type used for verify user before updating email address.(Without email address verified checking)
    /// 
    /// 
    /// 
    ///           3. upgradeHeadlessAccount
    /// 
    /// The context is intended to be used whenever the email address wanted to be automatically verified on upgrading a headless account. If this context used, IAM rejects the request if the loginId field's value is already used by others by returning HTTP Status Code 409.
    /// </summary>
    [Obsolete(DiagnosticId ="ab_deprecated_operation")]
    public class SendVerificationCode : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static SendVerificationCodeBuilder Builder { get => new SendVerificationCodeBuilder(); }

        public class SendVerificationCodeBuilder
            : OperationBuilder<SendVerificationCodeBuilder>
        {





            internal SendVerificationCodeBuilder() { }

            internal SendVerificationCodeBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }






            public SendVerificationCode Build(
                ModelSendVerificationCodeRequest body,
                string namespace_,
                string userId
            )
            {
                SendVerificationCode op = new SendVerificationCode(this,
                    body,                    
                    namespace_,                    
                    userId                    
                );
                op.PreferredSecurityMethod = PreferredSecurityMethod;

                return op;
            }

            [Obsolete(DiagnosticId ="ab_deprecated_operation_wrapper")]
            public void Execute(
                ModelSendVerificationCodeRequest body,
                string namespace_,
                string userId
            )
            {
                SendVerificationCode op = Build(
                    body,
                    namespace_,
                    userId
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
        }

        private SendVerificationCode(SendVerificationCodeBuilder builder,
            ModelSendVerificationCodeRequest body,
            string namespace_,
            string userId
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["userId"] = userId;
            
            

            
            
            BodyParams = body;
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public SendVerificationCode(
            string namespace_,            
            string userId,            
            Model.ModelSendVerificationCodeRequest body            
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["userId"] = userId;
            
            

            
            
            BodyParams = body;
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/iam/namespaces/{namespace}/users/{userId}/verificationcode";

        public override HttpMethod Method => HttpMethod.Post;

        public override List<string> Consumes => new() { "application/json" };

        public override List<string> Produces => new() { "application/json" };        
        
        public void ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return;
            }
            
            var payloadString = payload.ReadToString();
            
            throw new HttpResponseException(code, payloadString);
        }
    }

}