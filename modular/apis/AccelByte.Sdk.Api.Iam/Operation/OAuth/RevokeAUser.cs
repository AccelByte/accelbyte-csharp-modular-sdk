// Copyright (c) 2022-2023 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Iam.Model;

namespace AccelByte.Sdk.Api.Iam.Operation
{
    /// <summary>
    /// RevokeAUser
    ///
    /// 
    /// 
    /// ## The endpoint is going to be deprecated
    /// 
    /// 
    /// 
    /// 
    /// This endpoint revokes a user.
    /// 
    /// 
    /// 
    /// 
    /// This endpoint requires all requests to have Authorization header set with Bearer access authentication with valid access token.
    /// 
    /// 
    /// 
    /// 
    /// Required permission 'NAMESPACE:{namespace}:USER:{userID}:ADMIN [UPDATE]'
    /// 
    /// 
    /// 
    /// 
    /// When other clients know that the userID has been revoked and the token is issued before the revocation, forcing a new token will contain banned permissions.
    /// 
    /// 
    /// Endpoint migration guide
    /// 
    /// 
    ///           * Substitute endpoint: /iam/v3/oauth/admin/namespaces/{namespace}/users/{userId}/revoke [POST]
    /// </summary>
    [Obsolete(DiagnosticId ="ab_deprecated_operation")]
    public class RevokeAUser : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static RevokeAUserBuilder Builder { get => new RevokeAUserBuilder(); }

        public class RevokeAUserBuilder
            : OperationBuilder<RevokeAUserBuilder>
        {





            internal RevokeAUserBuilder() { }

            internal RevokeAUserBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }






            public RevokeAUser Build(
                string userID
            )
            {
                RevokeAUser op = new RevokeAUser(this,
                    userID                    
                );
                op.PreferredSecurityMethod = PreferredSecurityMethod;

                return op;
            }

            [Obsolete(DiagnosticId ="ab_deprecated_operation_wrapper")]
            public void Execute(
                string userID
            )
            {
                RevokeAUser op = Build(
                    userID
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
        }

        private RevokeAUser(RevokeAUserBuilder builder,
            string userID
        )
        {
            
            
            if (userID is not null) FormParams["userID"] = userID;

            
            
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public RevokeAUser(
            string userID            
        )
        {
            
            
            if (userID is not null) FormParams["userID"] = userID;

            
            
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/iam/oauth/revoke/user";

        public override HttpMethod Method => HttpMethod.Post;

        public override List<string> Consumes => new() { "application/x-www-form-urlencoded" };

        public override List<string> Produces => new() { "application/json" };        
        
        public void ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)200)
            {
                return;
            }
            
            var payloadString = payload.ReadToString();
            
            throw new HttpResponseException(code, payloadString);
        }
    }

}