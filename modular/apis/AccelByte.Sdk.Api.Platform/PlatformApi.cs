// Copyright (c) 2023 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using System;

using AccelByte.Sdk.Core;

using AccelByte.Sdk.Api.Platform;

namespace AccelByte.Sdk.Api.Platform
{
    public class PlatformApi : ISdkApi
    {
        private IAccelByteSdk _Sdk;

        public Wrapper.FulfillmentScript FulfillmentScript
        {
            get
            {
                if (_FulfillmentScript == null)
                    _FulfillmentScript = new Wrapper.FulfillmentScript(_Sdk);
                return _FulfillmentScript;
            }
        }
        private Wrapper.FulfillmentScript? _FulfillmentScript = null;

        public Wrapper.Item Item
        {
            get
            {
                if (_Item == null)
                    _Item = new Wrapper.Item(_Sdk);
                return _Item;
            }
        }
        private Wrapper.Item? _Item = null;

        public Wrapper.Campaign Campaign
        {
            get
            {
                if (_Campaign == null)
                    _Campaign = new Wrapper.Campaign(_Sdk);
                return _Campaign;
            }
        }
        private Wrapper.Campaign? _Campaign = null;

        public Wrapper.Category Category
        {
            get
            {
                if (_Category == null)
                    _Category = new Wrapper.Category(_Sdk);
                return _Category;
            }
        }
        private Wrapper.Category? _Category = null;

        public Wrapper.ServicePluginConfig ServicePluginConfig
        {
            get
            {
                if (_ServicePluginConfig == null)
                    _ServicePluginConfig = new Wrapper.ServicePluginConfig(_Sdk);
                return _ServicePluginConfig;
            }
        }
        private Wrapper.ServicePluginConfig? _ServicePluginConfig = null;

        public Wrapper.Currency Currency
        {
            get
            {
                if (_Currency == null)
                    _Currency = new Wrapper.Currency(_Sdk);
                return _Currency;
            }
        }
        private Wrapper.Currency? _Currency = null;

        public Wrapper.DLC DLC
        {
            get
            {
                if (_DLC == null)
                    _DLC = new Wrapper.DLC(_Sdk);
                return _DLC;
            }
        }
        private Wrapper.DLC? _DLC = null;

        public Wrapper.Entitlement Entitlement
        {
            get
            {
                if (_Entitlement == null)
                    _Entitlement = new Wrapper.Entitlement(_Sdk);
                return _Entitlement;
            }
        }
        private Wrapper.Entitlement? _Entitlement = null;

        public Wrapper.Fulfillment Fulfillment
        {
            get
            {
                if (_Fulfillment == null)
                    _Fulfillment = new Wrapper.Fulfillment(_Sdk);
                return _Fulfillment;
            }
        }
        private Wrapper.Fulfillment? _Fulfillment = null;

        public Wrapper.IAP IAP
        {
            get
            {
                if (_IAP == null)
                    _IAP = new Wrapper.IAP(_Sdk);
                return _IAP;
            }
        }
        private Wrapper.IAP? _IAP = null;

        public Wrapper.Invoice Invoice
        {
            get
            {
                if (_Invoice == null)
                    _Invoice = new Wrapper.Invoice(_Sdk);
                return _Invoice;
            }
        }
        private Wrapper.Invoice? _Invoice = null;

        public Wrapper.KeyGroup KeyGroup
        {
            get
            {
                if (_KeyGroup == null)
                    _KeyGroup = new Wrapper.KeyGroup(_Sdk);
                return _KeyGroup;
            }
        }
        private Wrapper.KeyGroup? _KeyGroup = null;

        public Wrapper.Order Order
        {
            get
            {
                if (_Order == null)
                    _Order = new Wrapper.Order(_Sdk);
                return _Order;
            }
        }
        private Wrapper.Order? _Order = null;

        public Wrapper.PaymentCallbackConfig PaymentCallbackConfig
        {
            get
            {
                if (_PaymentCallbackConfig == null)
                    _PaymentCallbackConfig = new Wrapper.PaymentCallbackConfig(_Sdk);
                return _PaymentCallbackConfig;
            }
        }
        private Wrapper.PaymentCallbackConfig? _PaymentCallbackConfig = null;

        public Wrapper.Payment Payment
        {
            get
            {
                if (_Payment == null)
                    _Payment = new Wrapper.Payment(_Sdk);
                return _Payment;
            }
        }
        private Wrapper.Payment? _Payment = null;

        public Wrapper.PaymentDedicated PaymentDedicated
        {
            get
            {
                if (_PaymentDedicated == null)
                    _PaymentDedicated = new Wrapper.PaymentDedicated(_Sdk);
                return _PaymentDedicated;
            }
        }
        private Wrapper.PaymentDedicated? _PaymentDedicated = null;

        public Wrapper.Wallet Wallet
        {
            get
            {
                if (_Wallet == null)
                    _Wallet = new Wrapper.Wallet(_Sdk);
                return _Wallet;
            }
        }
        private Wrapper.Wallet? _Wallet = null;

        public Wrapper.Revocation Revocation
        {
            get
            {
                if (_Revocation == null)
                    _Revocation = new Wrapper.Revocation(_Sdk);
                return _Revocation;
            }
        }
        private Wrapper.Revocation? _Revocation = null;

        public Wrapper.Reward Reward
        {
            get
            {
                if (_Reward == null)
                    _Reward = new Wrapper.Reward(_Sdk);
                return _Reward;
            }
        }
        private Wrapper.Reward? _Reward = null;

        public Wrapper.Section Section
        {
            get
            {
                if (_Section == null)
                    _Section = new Wrapper.Section(_Sdk);
                return _Section;
            }
        }
        private Wrapper.Section? _Section = null;

        public Wrapper.Store Store
        {
            get
            {
                if (_Store == null)
                    _Store = new Wrapper.Store(_Sdk);
                return _Store;
            }
        }
        private Wrapper.Store? _Store = null;

        public Wrapper.CatalogChanges CatalogChanges
        {
            get
            {
                if (_CatalogChanges == null)
                    _CatalogChanges = new Wrapper.CatalogChanges(_Sdk);
                return _CatalogChanges;
            }
        }
        private Wrapper.CatalogChanges? _CatalogChanges = null;

        public Wrapper.Subscription Subscription
        {
            get
            {
                if (_Subscription == null)
                    _Subscription = new Wrapper.Subscription(_Sdk);
                return _Subscription;
            }
        }
        private Wrapper.Subscription? _Subscription = null;

        public Wrapper.Ticket Ticket
        {
            get
            {
                if (_Ticket == null)
                    _Ticket = new Wrapper.Ticket(_Sdk);
                return _Ticket;
            }
        }
        private Wrapper.Ticket? _Ticket = null;

        public Wrapper.AchievementPlatform AchievementPlatform
        {
            get
            {
                if (_AchievementPlatform == null)
                    _AchievementPlatform = new Wrapper.AchievementPlatform(_Sdk);
                return _AchievementPlatform;
            }
        }
        private Wrapper.AchievementPlatform? _AchievementPlatform = null;

        public Wrapper.Anonymization Anonymization
        {
            get
            {
                if (_Anonymization == null)
                    _Anonymization = new Wrapper.Anonymization(_Sdk);
                return _Anonymization;
            }
        }
        private Wrapper.Anonymization? _Anonymization = null;

        public Wrapper.View View
        {
            get
            {
                if (_View == null)
                    _View = new Wrapper.View(_Sdk);
                return _View;
            }
        }
        private Wrapper.View? _View = null;

        public Wrapper.OrderDedicated OrderDedicated
        {
            get
            {
                if (_OrderDedicated == null)
                    _OrderDedicated = new Wrapper.OrderDedicated(_Sdk);
                return _OrderDedicated;
            }
        }
        private Wrapper.OrderDedicated? _OrderDedicated = null;

        public Wrapper.PaymentConfig PaymentConfig
        {
            get
            {
                if (_PaymentConfig == null)
                    _PaymentConfig = new Wrapper.PaymentConfig(_Sdk);
                return _PaymentConfig;
            }
        }
        private Wrapper.PaymentConfig? _PaymentConfig = null;

        public Wrapper.PaymentStation PaymentStation
        {
            get
            {
                if (_PaymentStation == null)
                    _PaymentStation = new Wrapper.PaymentStation(_Sdk);
                return _PaymentStation;
            }
        }
        private Wrapper.PaymentStation? _PaymentStation = null;

        public Wrapper.PaymentAccount PaymentAccount
        {
            get
            {
                if (_PaymentAccount == null)
                    _PaymentAccount = new Wrapper.PaymentAccount(_Sdk);
                return _PaymentAccount;
            }
        }
        private Wrapper.PaymentAccount? _PaymentAccount = null;

        internal PlatformApi(IAccelByteSdk sdk)
        {
            _Sdk = sdk;
        }
    }
}

namespace AccelByte.Sdk.Api
{
    public static class PlatformApi_SdkExts
    {
        public static PlatformApi GetPlatformApi(this IAccelByteSdk sdk)
        {
            return sdk.GetApi<PlatformApi>("platform", () =>
            {
                return new PlatformApi(sdk);
            });            
        }
    }
}