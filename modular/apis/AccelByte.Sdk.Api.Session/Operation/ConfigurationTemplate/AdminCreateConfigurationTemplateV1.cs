// Copyright (c) 2022-2023 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Session.Model;

namespace AccelByte.Sdk.Api.Session.Operation
{
    /// <summary>
    /// adminCreateConfigurationTemplateV1
    ///
    /// Create template configuration to be applied across party and session.
    /// Session configuration mandatory :
    /// - name
    /// - joinability (example value : OPEN, CLOSED, INVITE_ONLY)
    /// - Type (example value : P2P, DS, NONE) if type empty, type will be assign to NONE
    /// - MinPlayers (must greather or equal 0)
    /// - MaxPlayers (must greather than 0)
    /// - InviteTimeout (must greather or equal 0) if InviteTimeout equal 0 will be use default DefaultTimeoutSecond (60s)
    /// - InactiveTimeout (must greather or equal 0) if InactiveTimeout equal 0 will be use default DefaultTimeoutSecond (60s)
    /// - Persistent Flag only can use with type DS (example value true or false)
    /// </summary>
    public class AdminCreateConfigurationTemplateV1 : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static AdminCreateConfigurationTemplateV1Builder Builder { get => new AdminCreateConfigurationTemplateV1Builder(); }

        public class AdminCreateConfigurationTemplateV1Builder
            : OperationBuilder<AdminCreateConfigurationTemplateV1Builder>
        {





            internal AdminCreateConfigurationTemplateV1Builder() { }

            internal AdminCreateConfigurationTemplateV1Builder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }






            public AdminCreateConfigurationTemplateV1 Build(
                ApimodelsCreateConfigurationTemplateRequest body,
                string namespace_
            )
            {
                AdminCreateConfigurationTemplateV1 op = new AdminCreateConfigurationTemplateV1(this,
                    body,                    
                    namespace_                    
                );
                op.PreferredSecurityMethod = PreferredSecurityMethod;

                return op;
            }

            public Model.ApimodelsConfigurationTemplateResponse? Execute(
                ApimodelsCreateConfigurationTemplateRequest body,
                string namespace_
            )
            {
                AdminCreateConfigurationTemplateV1 op = Build(
                    body,
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
        }

        private AdminCreateConfigurationTemplateV1(AdminCreateConfigurationTemplateV1Builder builder,
            ApimodelsCreateConfigurationTemplateRequest body,
            string namespace_
        )
        {
            PathParams["namespace"] = namespace_;
            
            

            
            
            BodyParams = body;
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public AdminCreateConfigurationTemplateV1(
            string namespace_,            
            Model.ApimodelsCreateConfigurationTemplateRequest body            
        )
        {
            PathParams["namespace"] = namespace_;
            
            

            
            
            BodyParams = body;
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/session/v1/admin/namespaces/{namespace}/configuration";

        public override HttpMethod Method => HttpMethod.Post;

        public override List<string> Consumes => new() { "application/json" };

        public override List<string> Produces => new() { "application/json" };        
        
        public Model.ApimodelsConfigurationTemplateResponse? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {            
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                return JsonSerializer.Deserialize<Model.ApimodelsConfigurationTemplateResponse>(payload);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.ApimodelsConfigurationTemplateResponse>(payload);
            }
            
            var payloadString = payload.ReadToString();
            
            throw new HttpResponseException(code, payloadString);
        }
    }

}