// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Legal.Model;

namespace AccelByte.Sdk.Api.Legal.Operation
{
    /// <summary>
    /// retrieveLatestPoliciesByNamespaceAndCountryPublic_1
    ///
    /// This API is used to list all the related doc in register page, include optional & mandatory (when env config APP_LEGAL_AGREEMENT_ALWAYS_INCLUDE_DEFAULT=true).
    /// Other detail info: Here are the result of different cases
    ///       * Document 1, Region US (default, mandatory), UA (optional); clientID: [client_A]
    ///       * Document 2, Region US (default, optional), UA (mandatory); clientID: [client_A]
    ///       * Document 3, Region UA (default, mandatory); clientID: [client_A]
    ///       * Document 4, Region US (default, optional); clientID: [client_A]
    ///       * Document 5, Region US (default, optional); clientID: [client_B]
    ///       * Document 6, Region CA (mandatory, optional), UA (optional); clientID: [client_B]
    ///       * Query by: Region UA + client_A
    ///       * Response: Document 1 (UA, optional), Document 2 (UA, mandatory), Document 3 (UA, mandatory), Document 4 (US, optional)
    ///       * Query by: Region CA + client_A
    ///       * Response: Document 1 (US, mandatory), Document 2 (US, mandatory), Document 3 (UA, mandatory), Document 4 (US, optional)
    ///       * Query by: Region UA + client_B
    ///       * Response: Document 5 (US, optional), Document 6 (UA, optional)
    ///       * Query by: Region CN + client_B
    ///       * Response: Document 5 (US, optional), Document 6 (CA, mandatory)
    /// Note: If APP_LEGAL_AGREEMENT_ALWAYS_INCLUDE_DEFAULT=false the behavior will be same with `/agreement/public/policies/namespaces/{namespace}/countries/{country_code}?defaultOnEmpty=true&visibleOnly;=true`;Here are the result of different cases
    ///       * Query by: Region UA + client_A
    ///       * Response: Document 1 (UA, optional), Document 2 (UA, mandatory), Document 3 (UA, mandatory)
    ///       * Query by: Region UA + client_B
    ///       * Response: Document 5 (US, optional)
    /// </summary>
    public class RetrieveLatestPoliciesByNamespaceAndCountryPublic1 : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static RetrieveLatestPoliciesByNamespaceAndCountryPublic1Builder Builder { get => new RetrieveLatestPoliciesByNamespaceAndCountryPublic1Builder(); }

        public class RetrieveLatestPoliciesByNamespaceAndCountryPublic1Builder
            : OperationBuilder<RetrieveLatestPoliciesByNamespaceAndCountryPublic1Builder>
        {





            internal RetrieveLatestPoliciesByNamespaceAndCountryPublic1Builder() { }

            internal RetrieveLatestPoliciesByNamespaceAndCountryPublic1Builder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }






            public RetrieveLatestPoliciesByNamespaceAndCountryPublic1 Build(
                string countryCode,
                string namespace_,
                string clientId
            )
            {
                RetrieveLatestPoliciesByNamespaceAndCountryPublic1 op = new RetrieveLatestPoliciesByNamespaceAndCountryPublic1(this,
                    countryCode,                    
                    namespace_,                    
                    clientId                    
                );

                op.SetBaseFields<RetrieveLatestPoliciesByNamespaceAndCountryPublic1Builder>(this);
                return op;
            }

            public RetrieveLatestPoliciesByNamespaceAndCountryPublic1.Response Execute(
                string countryCode,
                string namespace_,
                string clientId
            )
            {
                RetrieveLatestPoliciesByNamespaceAndCountryPublic1 op = Build(
                    countryCode,
                    namespace_,
                    clientId
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
            public async Task<RetrieveLatestPoliciesByNamespaceAndCountryPublic1.Response> ExecuteAsync(
                string countryCode,
                string namespace_,
                string clientId
            )
            {
                RetrieveLatestPoliciesByNamespaceAndCountryPublic1 op = Build(
                    countryCode,
                    namespace_,
                    clientId
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
        }

        private RetrieveLatestPoliciesByNamespaceAndCountryPublic1(RetrieveLatestPoliciesByNamespaceAndCountryPublic1Builder builder,
            string countryCode,
            string namespace_,
            string clientId
        )
        {
            PathParams["countryCode"] = countryCode;
            PathParams["namespace"] = namespace_;
            
            if (clientId is not null) QueryParams["clientId"] = clientId;
            

            
            
            

        }
        #endregion

        #region Response Part        
        public class Response : ApiResponse<List<Model.RetrieveSimplePolicyPublicResponseV2>>
        {


            protected override string GetFullOperationId() => "Legal::PoliciesWithNamespaceV2::RetrieveLatestPoliciesByNamespaceAndCountryPublic1";
        }

        #endregion

        public RetrieveLatestPoliciesByNamespaceAndCountryPublic1(
            string countryCode,            
            string namespace_,            
            string clientId            
        )
        {
            PathParams["countryCode"] = countryCode;
            PathParams["namespace"] = namespace_;
            
            if (clientId is not null) QueryParams["clientId"] = clientId;
            

            
            
            

        }

        public override string Path => "/agreement/v2/public/policies/namespaces/{namespace}/countries/{countryCode}";

        public override HttpMethod Method => HttpMethod.Get;

        public override List<string> Consumes => new() {  };

        public override List<string> Produces => new() { "application/json" };
        
        public RetrieveLatestPoliciesByNamespaceAndCountryPublic1.Response ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            var response = new RetrieveLatestPoliciesByNamespaceAndCountryPublic1.Response()
            {
                StatusCode = code,
                ContentType = contentType
            };

            if (code == (HttpStatusCode)204)
            {
                response.IsSuccess = true;
            }
            else if ((code == (HttpStatusCode)201) || (code == (HttpStatusCode)202) || (code == (HttpStatusCode)200))
            {
                response.Data = JsonSerializer.Deserialize<List<Model.RetrieveSimplePolicyPublicResponseV2>>(payload, ResponseJsonOptions);
                response.IsSuccess = true;
            }

            return response;
        }
    }

}