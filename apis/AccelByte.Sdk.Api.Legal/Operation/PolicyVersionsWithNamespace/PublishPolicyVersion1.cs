// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Legal.Model;

namespace AccelByte.Sdk.Api.Legal.Operation
{
    /// <summary>
    /// publishPolicyVersion_1
    ///
    /// Manually publish a version of a particular country-specific policy.
    /// </summary>
    public class PublishPolicyVersion1 : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static PublishPolicyVersion1Builder Builder { get => new PublishPolicyVersion1Builder(); }

        public class PublishPolicyVersion1Builder
            : OperationBuilder<PublishPolicyVersion1Builder>
        {

            public bool? ShouldNotify { get; set; }





            internal PublishPolicyVersion1Builder() { }

            internal PublishPolicyVersion1Builder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }


            public PublishPolicyVersion1Builder SetShouldNotify(bool _shouldNotify)
            {
                ShouldNotify = _shouldNotify;
                return this;
            }





            public PublishPolicyVersion1 Build(
                string namespace_,
                string policyVersionId
            )
            {
                PublishPolicyVersion1 op = new PublishPolicyVersion1(this,
                    namespace_,                    
                    policyVersionId                    
                );

                op.SetBaseFields<PublishPolicyVersion1Builder>(this);
                return op;
            }

            public PublishPolicyVersion1.Response Execute(
                string namespace_,
                string policyVersionId
            )
            {
                PublishPolicyVersion1 op = Build(
                    namespace_,
                    policyVersionId
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
            public async Task<PublishPolicyVersion1.Response> ExecuteAsync(
                string namespace_,
                string policyVersionId
            )
            {
                PublishPolicyVersion1 op = Build(
                    namespace_,
                    policyVersionId
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
        }

        private PublishPolicyVersion1(PublishPolicyVersion1Builder builder,
            string namespace_,
            string policyVersionId
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["policyVersionId"] = policyVersionId;
            
            if (builder.ShouldNotify != null) QueryParams["shouldNotify"] = Convert.ToString(builder.ShouldNotify)!;
            

            
            
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        #region Response Part        
        public class Response : ApiResponse
        {

            public ErrorEntity? Error400 { get; set; } = null;

            public ErrorEntity? Error409 { get; set; } = null;


            protected override string GetFullOperationId() => "Legal::PolicyVersionsWithNamespace::PublishPolicyVersion1";
        }

        #endregion

        public PublishPolicyVersion1(
            string namespace_,            
            string policyVersionId,            
            bool? shouldNotify            
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["policyVersionId"] = policyVersionId;
            
            if (shouldNotify != null) QueryParams["shouldNotify"] = Convert.ToString(shouldNotify)!;
            

            
            
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/agreement/admin/namespaces/{namespace}/policies/versions/{policyVersionId}/latest";

        public override HttpMethod Method => HttpMethod.Patch;

        public override List<string> Consumes => new() {  };

        public override List<string> Produces => new() { "application/json" };
        
        public PublishPolicyVersion1.Response ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            var response = new PublishPolicyVersion1.Response()
            {
                StatusCode = code,
                ContentType = contentType,
                IsSuccess = true
            };

            if (code == (HttpStatusCode)400)
            
            {
                response.Error400 = JsonSerializer.Deserialize<ErrorEntity>(payload, ResponseJsonOptions);
                response.Error = response.Error400!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)409)
            
            {
                response.Error409 = JsonSerializer.Deserialize<ErrorEntity>(payload, ResponseJsonOptions);
                response.Error = response.Error409!.TranslateToApiError();
            }

            return response;
        }
    }

}