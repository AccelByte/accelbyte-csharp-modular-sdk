// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Legal.Model;

namespace AccelByte.Sdk.Api.Legal.Operation
{
    /// <summary>
    /// oldRetrieveAllPolicyTypes
    ///
    /// Retrieve all supported policy types.
    /// </summary>
    public class OldRetrieveAllPolicyTypes : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static OldRetrieveAllPolicyTypesBuilder Builder { get => new OldRetrieveAllPolicyTypesBuilder(); }

        public class OldRetrieveAllPolicyTypesBuilder
            : OperationBuilder<OldRetrieveAllPolicyTypesBuilder>
        {

            public int? Offset { get; set; }





            internal OldRetrieveAllPolicyTypesBuilder() { }

            internal OldRetrieveAllPolicyTypesBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }


            public OldRetrieveAllPolicyTypesBuilder SetOffset(int _offset)
            {
                Offset = _offset;
                return this;
            }





            public OldRetrieveAllPolicyTypes Build(
                int limit
            )
            {
                OldRetrieveAllPolicyTypes op = new OldRetrieveAllPolicyTypes(this,
                    limit                    
                );

                op.SetBaseFields<OldRetrieveAllPolicyTypesBuilder>(this);
                return op;
            }

            public OldRetrieveAllPolicyTypes.Response Execute(
                int limit
            )
            {
                OldRetrieveAllPolicyTypes op = Build(
                    limit
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
            public async Task<OldRetrieveAllPolicyTypes.Response> ExecuteAsync(
                int limit
            )
            {
                OldRetrieveAllPolicyTypes op = Build(
                    limit
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
        }

        private OldRetrieveAllPolicyTypes(OldRetrieveAllPolicyTypesBuilder builder,
            int limit
        )
        {
            
            if (builder.Offset != null) QueryParams["offset"] = Convert.ToString(builder.Offset)!;
            
            QueryParams["limit"] = Convert.ToString(limit)!;
            

            
            
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        #region Response Part        
        public class Response : ApiResponse<List<Model.RetrievePolicyTypeResponse>>
        {


            protected override string GetFullOperationId() => "Legal::BaseLegalPolicies::OldRetrieveAllPolicyTypes";
        }

        #endregion

        public OldRetrieveAllPolicyTypes(
            int? offset,            
            int limit            
        )
        {
            
            if (offset != null) QueryParams["offset"] = Convert.ToString(offset)!;
            
            QueryParams["limit"] = Convert.ToString(limit)!;
            

            
            
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/agreement/admin/policy-types";

        public override HttpMethod Method => HttpMethod.Get;

        public override List<string> Consumes => new() {  };

        public override List<string> Produces => new() { "application/json" };
        
        public OldRetrieveAllPolicyTypes.Response ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            var response = new OldRetrieveAllPolicyTypes.Response()
            {
                StatusCode = code,
                ContentType = contentType
            };

            if (code == (HttpStatusCode)204)
            {
                response.IsSuccess = true;
            }
            else if ((code == (HttpStatusCode)201) || (code == (HttpStatusCode)202) || (code == (HttpStatusCode)200))
            {
                response.Data = JsonSerializer.Deserialize<List<Model.RetrievePolicyTypeResponse>>(payload, ResponseJsonOptions);
                response.IsSuccess = true;
            }

            return response;
        }
    }

}