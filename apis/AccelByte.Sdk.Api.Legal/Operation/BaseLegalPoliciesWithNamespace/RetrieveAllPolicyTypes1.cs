// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Legal.Model;

namespace AccelByte.Sdk.Api.Legal.Operation
{
    /// <summary>
    /// retrieveAllPolicyTypes_1
    ///
    /// Retrieve all supported policy types.
    /// </summary>
    public class RetrieveAllPolicyTypes1 : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static RetrieveAllPolicyTypes1Builder Builder { get => new RetrieveAllPolicyTypes1Builder(); }

        public class RetrieveAllPolicyTypes1Builder
            : OperationBuilder<RetrieveAllPolicyTypes1Builder>
        {

            public int? Offset { get; set; }





            internal RetrieveAllPolicyTypes1Builder() { }

            internal RetrieveAllPolicyTypes1Builder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }


            public RetrieveAllPolicyTypes1Builder SetOffset(int _offset)
            {
                Offset = _offset;
                return this;
            }





            public RetrieveAllPolicyTypes1 Build(
                string namespace_,
                int limit
            )
            {
                RetrieveAllPolicyTypes1 op = new RetrieveAllPolicyTypes1(this,
                    namespace_,
                    limit
                );

                op.SetBaseFields<RetrieveAllPolicyTypes1Builder>(this);
                return op;
            }

            public RetrieveAllPolicyTypes1.Response Execute(
                string namespace_,
                int limit
            )
            {
                RetrieveAllPolicyTypes1 op = Build(
                    namespace_,
                    limit
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
            public async Task<RetrieveAllPolicyTypes1.Response> ExecuteAsync(
                string namespace_,
                int limit
            )
            {
                RetrieveAllPolicyTypes1 op = Build(
                    namespace_,
                    limit
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
        }

        private RetrieveAllPolicyTypes1(RetrieveAllPolicyTypes1Builder builder,
            string namespace_,
            int limit
        )
        {
            PathParams["namespace"] = namespace_;

            if (builder.Offset != null) QueryParams["offset"] = Convert.ToString(builder.Offset)!;

            QueryParams["limit"] = Convert.ToString(limit)!;






            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        #region Response Part        
        public class Response : ApiResponse<List<Model.RetrievePolicyTypeResponse>>
        {


            protected override string GetFullOperationId() => "Legal::BaseLegalPoliciesWithNamespace::RetrieveAllPolicyTypes1";
        }

        #endregion

        public RetrieveAllPolicyTypes1(
            string namespace_,
            int? offset,
            int limit
        )
        {
            PathParams["namespace"] = namespace_;

            if (offset != null) QueryParams["offset"] = Convert.ToString(offset)!;

            QueryParams["limit"] = Convert.ToString(limit)!;






            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/agreement/admin/namespaces/{namespace}/policy-types";

        public override HttpMethod Method => HttpMethod.Get;

        public override List<string> Consumes => new() { };

        public override List<string> Produces => new() { "application/json" };

        public RetrieveAllPolicyTypes1.Response ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            var response = new RetrieveAllPolicyTypes1.Response()
            {
                StatusCode = code,
                ContentType = contentType
            };

            if (code == (HttpStatusCode)204)
            {
                response.IsSuccess = true;
            }
            else if ((code == (HttpStatusCode)201) || (code == (HttpStatusCode)202) || (code == (HttpStatusCode)200))
            {
                response.Data = JsonSerializer.Deserialize<List<Model.RetrievePolicyTypeResponse>>(payload, ResponseJsonOptions);
                response.IsSuccess = true;
            }

            return response;
        }
    }

}