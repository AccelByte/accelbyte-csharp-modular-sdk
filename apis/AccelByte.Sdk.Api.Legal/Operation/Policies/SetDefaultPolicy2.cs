// Copyright (c) 2022-2023 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Legal.Model;

namespace AccelByte.Sdk.Api.Legal.Operation
{
    /// <summary>
    /// setDefaultPolicy_2
    ///
    /// Update a policy to be the default.
    /// Other detail info:
    /// 
    ///   * Required permission : resource="ADMIN:NAMESPACE:*:LEGAL", action=4 (UPDATE)
    /// </summary>
    public class SetDefaultPolicy2 : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static SetDefaultPolicy2Builder Builder { get => new SetDefaultPolicy2Builder(); }

        public class SetDefaultPolicy2Builder
            : OperationBuilder<SetDefaultPolicy2Builder>
        {





            internal SetDefaultPolicy2Builder() { }

            internal SetDefaultPolicy2Builder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }






            public SetDefaultPolicy2 Build(
                string policyId
            )
            {
                SetDefaultPolicy2 op = new SetDefaultPolicy2(this,
                    policyId
                );

                op.SetBaseFields<SetDefaultPolicy2Builder>(this);
                return op;
            }

            public void Execute(
                string policyId
            )
            {
                SetDefaultPolicy2 op = Build(
                    policyId
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
        }

        private SetDefaultPolicy2(SetDefaultPolicy2Builder builder,
            string policyId
        )
        {
            PathParams["policyId"] = policyId;







            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public SetDefaultPolicy2(
            string policyId
        )
        {
            PathParams["policyId"] = policyId;







            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/agreement/admin/policies/{policyId}/default";

        public override HttpMethod Method => HttpMethod.Patch;

        public override List<string> Consumes => new() { };

        public override List<string> Produces => new() { "application/json" };

        public void ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)200)
            {
                return;
            }

            var payloadString = payload.ReadToString();

            throw new HttpResponseException(code, payloadString);
        }
    }

}