// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Legal.Model;

namespace AccelByte.Sdk.Api.Legal.Operation
{
    /// <summary>
    /// indirectBulkAcceptVersionedPolicy_1
    ///
    /// Accepts many legal policy versions all at once. Supply with localized version policy id and userId to accept an agreement. This endpoint used by Authentication Service during new user registration.
    /// </summary>
    [Obsolete(DiagnosticId ="ab_deprecated_operation")]
    public class IndirectBulkAcceptVersionedPolicy1 : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static IndirectBulkAcceptVersionedPolicy1Builder Builder { get => new IndirectBulkAcceptVersionedPolicy1Builder(); }

        public class IndirectBulkAcceptVersionedPolicy1Builder
            : OperationBuilder<IndirectBulkAcceptVersionedPolicy1Builder>
        {


            public List<Model.AcceptAgreementRequest>? Body { get; set; }




            internal IndirectBulkAcceptVersionedPolicy1Builder() { }

            internal IndirectBulkAcceptVersionedPolicy1Builder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }



            public IndirectBulkAcceptVersionedPolicy1Builder SetBody(List<Model.AcceptAgreementRequest> _body)
            {
                Body = _body;
                return this;
            }




            public IndirectBulkAcceptVersionedPolicy1 Build(
                string userId
            )
            {
                IndirectBulkAcceptVersionedPolicy1 op = new IndirectBulkAcceptVersionedPolicy1(this,
                    userId                    
                );

                op.SetBaseFields<IndirectBulkAcceptVersionedPolicy1Builder>(this);
                return op;
            }

            [Obsolete(DiagnosticId ="ab_deprecated_operation_wrapper")]
            public IndirectBulkAcceptVersionedPolicy1.Response Execute(
                string userId
            )
            {
                IndirectBulkAcceptVersionedPolicy1 op = Build(
                    userId
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
            public async Task<IndirectBulkAcceptVersionedPolicy1.Response> ExecuteAsync(
                string userId
            )
            {
                IndirectBulkAcceptVersionedPolicy1 op = Build(
                    userId
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
        }

        private IndirectBulkAcceptVersionedPolicy1(IndirectBulkAcceptVersionedPolicy1Builder builder,
            string userId
        )
        {
            PathParams["userId"] = userId;
            
            

            
            
            BodyParams = builder.Body;
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        #region Response Part        
        public class Response : ApiResponse<Model.AcceptAgreementResponse>
        {

            public ErrorEntity? Error404 { get; set; } = null;


            protected override string GetFullOperationId() => "Legal::Agreement::IndirectBulkAcceptVersionedPolicy1";
        }

        #endregion

        public IndirectBulkAcceptVersionedPolicy1(
            string userId,            
            List<Model.AcceptAgreementRequest> body            
        )
        {
            PathParams["userId"] = userId;
            
            

            
            
            BodyParams = body;
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/agreement/public/agreements/policies/users/{userId}";

        public override HttpMethod Method => HttpMethod.Post;

        public override List<string> Consumes => new() { "application/json" };

        public override List<string> Produces => new() { "application/json" };
        
        public IndirectBulkAcceptVersionedPolicy1.Response ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            var response = new IndirectBulkAcceptVersionedPolicy1.Response()
            {
                StatusCode = code,
                ContentType = contentType
            };

            if (code == (HttpStatusCode)204)
            {
                response.IsSuccess = true;
            }
            else if ((code == (HttpStatusCode)201) || (code == (HttpStatusCode)202) || (code == (HttpStatusCode)200))
            {
                response.Data = JsonSerializer.Deserialize<Model.AcceptAgreementResponse>(payload, ResponseJsonOptions);
                response.IsSuccess = true;
            }
            else if (code == (HttpStatusCode)404)
            {
                response.Error404 = JsonSerializer.Deserialize<ErrorEntity>(payload, ResponseJsonOptions);
                response.Error = response.Error404!.TranslateToApiError();
            }

            return response;
        }
    }

}