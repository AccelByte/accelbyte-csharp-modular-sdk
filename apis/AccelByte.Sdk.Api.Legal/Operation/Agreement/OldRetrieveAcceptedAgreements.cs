// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Legal.Model;

namespace AccelByte.Sdk.Api.Legal.Operation
{
    /// <summary>
    /// oldRetrieveAcceptedAgreements
    ///
    /// This API will return all accepted Legal Agreements for specified user
    /// </summary>
    public class OldRetrieveAcceptedAgreements : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static OldRetrieveAcceptedAgreementsBuilder Builder { get => new OldRetrieveAcceptedAgreementsBuilder(); }

        public class OldRetrieveAcceptedAgreementsBuilder
            : OperationBuilder<OldRetrieveAcceptedAgreementsBuilder>
        {





            internal OldRetrieveAcceptedAgreementsBuilder() { }

            internal OldRetrieveAcceptedAgreementsBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }






            public OldRetrieveAcceptedAgreements Build(
                string userId
            )
            {
                OldRetrieveAcceptedAgreements op = new OldRetrieveAcceptedAgreements(this,
                    userId                    
                );

                op.SetBaseFields<OldRetrieveAcceptedAgreementsBuilder>(this);
                return op;
            }

            public OldRetrieveAcceptedAgreements.Response Execute(
                string userId
            )
            {
                OldRetrieveAcceptedAgreements op = Build(
                    userId
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
            public async Task<OldRetrieveAcceptedAgreements.Response> ExecuteAsync(
                string userId
            )
            {
                OldRetrieveAcceptedAgreements op = Build(
                    userId
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
        }

        private OldRetrieveAcceptedAgreements(OldRetrieveAcceptedAgreementsBuilder builder,
            string userId
        )
        {
            PathParams["userId"] = userId;
            
            

            
            
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        #region Response Part        
        public class Response : ApiResponse<List<Model.RetrieveAcceptedAgreementResponse>>
        {


            protected override string GetFullOperationId() => "Legal::Agreement::OldRetrieveAcceptedAgreements";
        }

        #endregion

        public OldRetrieveAcceptedAgreements(
            string userId            
        )
        {
            PathParams["userId"] = userId;
            
            

            
            
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/agreement/admin/agreements/policies/users/{userId}";

        public override HttpMethod Method => HttpMethod.Get;

        public override List<string> Consumes => new() {  };

        public override List<string> Produces => new() { "application/json" };
        
        public OldRetrieveAcceptedAgreements.Response ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            var response = new OldRetrieveAcceptedAgreements.Response()
            {
                StatusCode = code,
                ContentType = contentType
            };

            if (code == (HttpStatusCode)204)
            {
                response.IsSuccess = true;
            }
            else if ((code == (HttpStatusCode)201) || (code == (HttpStatusCode)202) || (code == (HttpStatusCode)200))
            {
                response.Data = JsonSerializer.Deserialize<List<Model.RetrieveAcceptedAgreementResponse>>(payload, ResponseJsonOptions);
                response.IsSuccess = true;
            }

            return response;
        }
    }

}