// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Legal.Model;

namespace AccelByte.Sdk.Api.Legal.Operation
{
    /// <summary>
    /// publicChangePreferenceConsent
    ///
    /// Change marketing preference consent.
    /// </summary>
    public class PublicChangePreferenceConsent : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static PublicChangePreferenceConsentBuilder Builder { get => new PublicChangePreferenceConsentBuilder(); }

        public class PublicChangePreferenceConsentBuilder
            : OperationBuilder<PublicChangePreferenceConsentBuilder>
        {


            public List<Model.AcceptAgreementRequest>? Body { get; set; }




            internal PublicChangePreferenceConsentBuilder() { }

            internal PublicChangePreferenceConsentBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }



            public PublicChangePreferenceConsentBuilder SetBody(List<Model.AcceptAgreementRequest> _body)
            {
                Body = _body;
                return this;
            }




            public PublicChangePreferenceConsent Build(
            )
            {
                PublicChangePreferenceConsent op = new PublicChangePreferenceConsent(this
                );

                op.SetBaseFields<PublicChangePreferenceConsentBuilder>(this);
                return op;
            }

            public PublicChangePreferenceConsent.Response Execute(
            )
            {
                PublicChangePreferenceConsent op = Build(
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
            public async Task<PublicChangePreferenceConsent.Response> ExecuteAsync(
            )
            {
                PublicChangePreferenceConsent op = Build(
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
        }

        private PublicChangePreferenceConsent(PublicChangePreferenceConsentBuilder builder
        )
        {
            
            

            
            
            BodyParams = builder.Body;
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        #region Response Part        
        public class Response : ApiResponse
        {

            public ErrorEntity? Error400 { get; set; } = null;


            protected override string GetFullOperationId() => "Legal::Agreement::PublicChangePreferenceConsent";
        }

        #endregion

        public PublicChangePreferenceConsent(
            List<Model.AcceptAgreementRequest> body            
        )
        {
            
            

            
            
            BodyParams = body;
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/agreement/public/agreements/localized-policy-versions/preferences";

        public override HttpMethod Method => HttpMethod.Patch;

        public override List<string> Consumes => new() { "application/json" };

        public override List<string> Produces => new() { "application/json" };
        
        public PublicChangePreferenceConsent.Response ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            var response = new PublicChangePreferenceConsent.Response()
            {
                StatusCode = code,
                ContentType = contentType
            };

            int statusCode = (int)code;
            if (statusCode >= 200 && statusCode < 300)
            {
                response.IsSuccess = true;
            }
            else if (code == (HttpStatusCode)400)
            {
                response.Error400 = JsonSerializer.Deserialize<ErrorEntity>(payload, ResponseJsonOptions);
                response.Error = response.Error400!.TranslateToApiError();
            }

            return response;
        }
    }

}