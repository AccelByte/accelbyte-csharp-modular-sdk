// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Legal.Model;

namespace AccelByte.Sdk.Api.Legal.Operation
{
    /// <summary>
    /// oldRetrieveAllUsersByPolicyVersion
    ///
    /// This API will return users who has accepted a specific policy version.
    /// </summary>
    public class OldRetrieveAllUsersByPolicyVersion : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static OldRetrieveAllUsersByPolicyVersionBuilder Builder { get => new OldRetrieveAllUsersByPolicyVersionBuilder(); }

        public class OldRetrieveAllUsersByPolicyVersionBuilder
            : OperationBuilder<OldRetrieveAllUsersByPolicyVersionBuilder>
        {

            public string? Keyword { get; set; }

            public int? Limit { get; set; }

            public int? Offset { get; set; }





            internal OldRetrieveAllUsersByPolicyVersionBuilder() { }

            internal OldRetrieveAllUsersByPolicyVersionBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }


            public OldRetrieveAllUsersByPolicyVersionBuilder SetKeyword(string _keyword)
            {
                Keyword = _keyword;
                return this;
            }

            public OldRetrieveAllUsersByPolicyVersionBuilder SetLimit(int _limit)
            {
                Limit = _limit;
                return this;
            }

            public OldRetrieveAllUsersByPolicyVersionBuilder SetOffset(int _offset)
            {
                Offset = _offset;
                return this;
            }





            public OldRetrieveAllUsersByPolicyVersion Build(
                string policyVersionId
            )
            {
                OldRetrieveAllUsersByPolicyVersion op = new OldRetrieveAllUsersByPolicyVersion(this,
                    policyVersionId                    
                );

                op.SetBaseFields<OldRetrieveAllUsersByPolicyVersionBuilder>(this);
                return op;
            }

            public OldRetrieveAllUsersByPolicyVersion.Response Execute(
                string policyVersionId
            )
            {
                OldRetrieveAllUsersByPolicyVersion op = Build(
                    policyVersionId
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
            public async Task<OldRetrieveAllUsersByPolicyVersion.Response> ExecuteAsync(
                string policyVersionId
            )
            {
                OldRetrieveAllUsersByPolicyVersion op = Build(
                    policyVersionId
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
        }

        private OldRetrieveAllUsersByPolicyVersion(OldRetrieveAllUsersByPolicyVersionBuilder builder,
            string policyVersionId
        )
        {
            
            if (builder.Keyword is not null) QueryParams["keyword"] = builder.Keyword;
            if (builder.Limit != null) QueryParams["limit"] = Convert.ToString(builder.Limit)!;
            if (builder.Offset != null) QueryParams["offset"] = Convert.ToString(builder.Offset)!;
            if (policyVersionId is not null) QueryParams["policyVersionId"] = policyVersionId;
            

            
            
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        #region Response Part        
        public class Response : ApiResponse<Model.PagedRetrieveUserAcceptedAgreementResponse>
        {

            public ErrorEntity? Error404 { get; set; } = null;


            protected override string GetFullOperationId() => "Legal::Agreement::OldRetrieveAllUsersByPolicyVersion";
        }

        #endregion

        public OldRetrieveAllUsersByPolicyVersion(
            string? keyword,            
            int? limit,            
            int? offset,            
            string policyVersionId            
        )
        {
            
            if (keyword is not null) QueryParams["keyword"] = keyword;
            if (limit != null) QueryParams["limit"] = Convert.ToString(limit)!;
            if (offset != null) QueryParams["offset"] = Convert.ToString(offset)!;
            if (policyVersionId is not null) QueryParams["policyVersionId"] = policyVersionId;
            

            
            
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/agreement/admin/agreements/policy-versions/users";

        public override HttpMethod Method => HttpMethod.Get;

        public override List<string> Consumes => new() {  };

        public override List<string> Produces => new() { "application/json" };
        
        public OldRetrieveAllUsersByPolicyVersion.Response ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            var response = new OldRetrieveAllUsersByPolicyVersion.Response()
            {
                StatusCode = code,
                ContentType = contentType
            };

            if (code == (HttpStatusCode)204)
            {
                response.IsSuccess = true;
            }
            else if ((code == (HttpStatusCode)201) || (code == (HttpStatusCode)202) || (code == (HttpStatusCode)200))
            {
                response.Data = JsonSerializer.Deserialize<Model.PagedRetrieveUserAcceptedAgreementResponse>(payload, ResponseJsonOptions);
                response.IsSuccess = true;
            }
            else if (code == (HttpStatusCode)404)
            {
                response.Error404 = JsonSerializer.Deserialize<ErrorEntity>(payload, ResponseJsonOptions);
                response.Error = response.Error404!.TranslateToApiError();
            }

            return response;
        }
    }

}