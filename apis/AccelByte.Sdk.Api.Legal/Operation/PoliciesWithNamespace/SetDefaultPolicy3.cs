// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Legal.Model;

namespace AccelByte.Sdk.Api.Legal.Operation
{
    /// <summary>
    /// setDefaultPolicy_3
    ///
    /// Update a policy to be the default.
    /// </summary>
    public class SetDefaultPolicy3 : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static SetDefaultPolicy3Builder Builder { get => new SetDefaultPolicy3Builder(); }

        public class SetDefaultPolicy3Builder
            : OperationBuilder<SetDefaultPolicy3Builder>
        {





            internal SetDefaultPolicy3Builder() { }

            internal SetDefaultPolicy3Builder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }






            public SetDefaultPolicy3 Build(
                string namespace_,
                string policyId
            )
            {
                SetDefaultPolicy3 op = new SetDefaultPolicy3(this,
                    namespace_,                    
                    policyId                    
                );

                op.SetBaseFields<SetDefaultPolicy3Builder>(this);
                return op;
            }

            public SetDefaultPolicy3.Response Execute(
                string namespace_,
                string policyId
            )
            {
                SetDefaultPolicy3 op = Build(
                    namespace_,
                    policyId
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
            public async Task<SetDefaultPolicy3.Response> ExecuteAsync(
                string namespace_,
                string policyId
            )
            {
                SetDefaultPolicy3 op = Build(
                    namespace_,
                    policyId
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
        }

        private SetDefaultPolicy3(SetDefaultPolicy3Builder builder,
            string namespace_,
            string policyId
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["policyId"] = policyId;
            
            

            
            
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        #region Response Part        
        public class Response : ApiResponse
        {

            public ErrorEntity? Error400 { get; set; } = null;


            protected override string GetFullOperationId() => "Legal::PoliciesWithNamespace::SetDefaultPolicy3";
        }

        #endregion

        public SetDefaultPolicy3(
            string namespace_,            
            string policyId            
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["policyId"] = policyId;
            
            

            
            
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/agreement/admin/namespaces/{namespace}/policies/{policyId}/default";

        public override HttpMethod Method => HttpMethod.Patch;

        public override List<string> Consumes => new() {  };

        public override List<string> Produces => new() { "application/json" };
        
        public SetDefaultPolicy3.Response ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            var response = new SetDefaultPolicy3.Response()
            {
                StatusCode = code,
                ContentType = contentType
            };

            int statusCode = (int)code;
            if (statusCode >= 200 && statusCode < 300)
            {
                response.IsSuccess = true;
            }
            else if (code == (HttpStatusCode)400)
            {
                response.Error400 = JsonSerializer.Deserialize<ErrorEntity>(payload, ResponseJsonOptions);
                response.Error = response.Error400!.TranslateToApiError();
            }

            return response;
        }
    }

}