// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;

using AccelByte.Sdk.Api.Legal.Model;
using AccelByte.Sdk.Api.Legal.Operation;

namespace AccelByte.Sdk.Api.Legal.Wrapper
{
    public class LocalizedPolicyVersionsWithNamespace
    {
        private readonly IAccelByteSdk _sdk;

        private string _CustomBasePath = String.Empty;

        public LocalizedPolicyVersionsWithNamespace(IAccelByteSdk sdk)
        {
            _sdk = sdk;
        }

        public LocalizedPolicyVersionsWithNamespace(IAccelByteSdk sdk, string customBasePath)
        {
            _sdk = sdk;
            _CustomBasePath = customBasePath;
        }

        #region Operation Builders
        public DeleteLocalizedPolicy.DeleteLocalizedPolicyBuilder DeleteLocalizedPolicyOp
        {
            get
            {
                var opBuilder = new Operation.DeleteLocalizedPolicy.DeleteLocalizedPolicyBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public RetrieveLocalizedPolicyVersions.RetrieveLocalizedPolicyVersionsBuilder RetrieveLocalizedPolicyVersionsOp
        {
            get
            {
                var opBuilder = new Operation.RetrieveLocalizedPolicyVersions.RetrieveLocalizedPolicyVersionsBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public CreateLocalizedPolicyVersion.CreateLocalizedPolicyVersionBuilder CreateLocalizedPolicyVersionOp
        {
            get
            {
                var opBuilder = new Operation.CreateLocalizedPolicyVersion.CreateLocalizedPolicyVersionBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public RetrieveSingleLocalizedPolicyVersion.RetrieveSingleLocalizedPolicyVersionBuilder RetrieveSingleLocalizedPolicyVersionOp
        {
            get
            {
                var opBuilder = new Operation.RetrieveSingleLocalizedPolicyVersion.RetrieveSingleLocalizedPolicyVersionBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public UpdateLocalizedPolicyVersion.UpdateLocalizedPolicyVersionBuilder UpdateLocalizedPolicyVersionOp
        {
            get
            {
                var opBuilder = new Operation.UpdateLocalizedPolicyVersion.UpdateLocalizedPolicyVersionBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public RequestPresignedURL.RequestPresignedURLBuilder RequestPresignedURLOp
        {
            get
            {
                var opBuilder = new Operation.RequestPresignedURL.RequestPresignedURLBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public SetDefaultLocalizedPolicy.SetDefaultLocalizedPolicyBuilder SetDefaultLocalizedPolicyOp
        {
            get
            {
                var opBuilder = new Operation.SetDefaultLocalizedPolicy.SetDefaultLocalizedPolicyBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public PublicRetrieveSingleLocalizedPolicyVersion.PublicRetrieveSingleLocalizedPolicyVersionBuilder PublicRetrieveSingleLocalizedPolicyVersionOp
        {
            get
            {
                var opBuilder = new Operation.PublicRetrieveSingleLocalizedPolicyVersion.PublicRetrieveSingleLocalizedPolicyVersionBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        #endregion

        public DeleteLocalizedPolicy.Response DeleteLocalizedPolicy(DeleteLocalizedPolicy input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<DeleteLocalizedPolicy.Response> DeleteLocalizedPolicyAsync(DeleteLocalizedPolicy input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public RetrieveLocalizedPolicyVersions.Response RetrieveLocalizedPolicyVersions(RetrieveLocalizedPolicyVersions input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<RetrieveLocalizedPolicyVersions.Response> RetrieveLocalizedPolicyVersionsAsync(RetrieveLocalizedPolicyVersions input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public CreateLocalizedPolicyVersion.Response CreateLocalizedPolicyVersion(CreateLocalizedPolicyVersion input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<CreateLocalizedPolicyVersion.Response> CreateLocalizedPolicyVersionAsync(CreateLocalizedPolicyVersion input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public RetrieveSingleLocalizedPolicyVersion.Response RetrieveSingleLocalizedPolicyVersion(RetrieveSingleLocalizedPolicyVersion input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<RetrieveSingleLocalizedPolicyVersion.Response> RetrieveSingleLocalizedPolicyVersionAsync(RetrieveSingleLocalizedPolicyVersion input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public UpdateLocalizedPolicyVersion.Response UpdateLocalizedPolicyVersion(UpdateLocalizedPolicyVersion input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<UpdateLocalizedPolicyVersion.Response> UpdateLocalizedPolicyVersionAsync(UpdateLocalizedPolicyVersion input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public RequestPresignedURL.Response RequestPresignedURL(RequestPresignedURL input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<RequestPresignedURL.Response> RequestPresignedURLAsync(RequestPresignedURL input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public SetDefaultLocalizedPolicy.Response SetDefaultLocalizedPolicy(SetDefaultLocalizedPolicy input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<SetDefaultLocalizedPolicy.Response> SetDefaultLocalizedPolicyAsync(SetDefaultLocalizedPolicy input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public PublicRetrieveSingleLocalizedPolicyVersion.Response PublicRetrieveSingleLocalizedPolicyVersion(PublicRetrieveSingleLocalizedPolicyVersion input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<PublicRetrieveSingleLocalizedPolicyVersion.Response> PublicRetrieveSingleLocalizedPolicyVersionAsync(PublicRetrieveSingleLocalizedPolicyVersion input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
    }
}