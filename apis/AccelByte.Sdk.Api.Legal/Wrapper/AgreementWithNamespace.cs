// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;

using AccelByte.Sdk.Api.Legal.Model;
using AccelByte.Sdk.Api.Legal.Operation;

namespace AccelByte.Sdk.Api.Legal.Wrapper
{
    public class AgreementWithNamespace
    {
        private readonly IAccelByteSdk _sdk;

        private string _CustomBasePath = String.Empty;

        public AgreementWithNamespace(IAccelByteSdk sdk)
        {
            _sdk = sdk;
        }

        public AgreementWithNamespace(IAccelByteSdk sdk, string customBasePath)
        {
            _sdk = sdk;
            _CustomBasePath = customBasePath;
        }

        #region Operation Builders
        public RetrieveAcceptedAgreementsForMultiUsers.RetrieveAcceptedAgreementsForMultiUsersBuilder RetrieveAcceptedAgreementsForMultiUsersOp
        {
            get
            {
                var opBuilder = new Operation.RetrieveAcceptedAgreementsForMultiUsers.RetrieveAcceptedAgreementsForMultiUsersBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public RetrieveAcceptedAgreements.RetrieveAcceptedAgreementsBuilder RetrieveAcceptedAgreementsOp
        {
            get
            {
                var opBuilder = new Operation.RetrieveAcceptedAgreements.RetrieveAcceptedAgreementsBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public RetrieveAllUsersByPolicyVersion.RetrieveAllUsersByPolicyVersionBuilder RetrieveAllUsersByPolicyVersionOp
        {
            get
            {
                var opBuilder = new Operation.RetrieveAllUsersByPolicyVersion.RetrieveAllUsersByPolicyVersionBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public DownloadExportedAgreementsInCSV.DownloadExportedAgreementsInCSVBuilder DownloadExportedAgreementsInCSVOp
        {
            get
            {
                var opBuilder = new Operation.DownloadExportedAgreementsInCSV.DownloadExportedAgreementsInCSVBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public InitiateExportAgreementsToCSV.InitiateExportAgreementsToCSVBuilder InitiateExportAgreementsToCSVOp
        {
            get
            {
                var opBuilder = new Operation.InitiateExportAgreementsToCSV.InitiateExportAgreementsToCSVBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        #endregion

        public RetrieveAcceptedAgreementsForMultiUsers.Response RetrieveAcceptedAgreementsForMultiUsers(RetrieveAcceptedAgreementsForMultiUsers input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<RetrieveAcceptedAgreementsForMultiUsers.Response> RetrieveAcceptedAgreementsForMultiUsersAsync(RetrieveAcceptedAgreementsForMultiUsers input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public RetrieveAcceptedAgreements.Response RetrieveAcceptedAgreements(RetrieveAcceptedAgreements input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<RetrieveAcceptedAgreements.Response> RetrieveAcceptedAgreementsAsync(RetrieveAcceptedAgreements input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public RetrieveAllUsersByPolicyVersion.Response RetrieveAllUsersByPolicyVersion(RetrieveAllUsersByPolicyVersion input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<RetrieveAllUsersByPolicyVersion.Response> RetrieveAllUsersByPolicyVersionAsync(RetrieveAllUsersByPolicyVersion input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public DownloadExportedAgreementsInCSV.Response DownloadExportedAgreementsInCSV(DownloadExportedAgreementsInCSV input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<DownloadExportedAgreementsInCSV.Response> DownloadExportedAgreementsInCSVAsync(DownloadExportedAgreementsInCSV input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public InitiateExportAgreementsToCSV.Response InitiateExportAgreementsToCSV(InitiateExportAgreementsToCSV input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<InitiateExportAgreementsToCSV.Response> InitiateExportAgreementsToCSVAsync(InitiateExportAgreementsToCSV input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
    }
}