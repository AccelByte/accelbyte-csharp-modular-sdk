// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;

using AccelByte.Sdk.Api.Legal.Model;
using AccelByte.Sdk.Api.Legal.Operation;

namespace AccelByte.Sdk.Api.Legal.Wrapper
{
    public class BaseLegalPoliciesWithNamespace
    {
        private readonly IAccelByteSdk _sdk;

        private string _CustomBasePath = String.Empty;

        public BaseLegalPoliciesWithNamespace(IAccelByteSdk sdk)
        {
            _sdk = sdk;
        }

        public BaseLegalPoliciesWithNamespace(IAccelByteSdk sdk, string customBasePath)
        {
            _sdk = sdk;
            _CustomBasePath = customBasePath;
        }

        #region Operation Builders
        public RetrieveAllLegalPoliciesByNamespace.RetrieveAllLegalPoliciesByNamespaceBuilder RetrieveAllLegalPoliciesByNamespaceOp
        {
            get
            {
                var opBuilder = new Operation.RetrieveAllLegalPoliciesByNamespace.RetrieveAllLegalPoliciesByNamespaceBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public CreatePolicy.CreatePolicyBuilder CreatePolicyOp
        {
            get
            {
                var opBuilder = new Operation.CreatePolicy.CreatePolicyBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public RetrieveSinglePolicy.RetrieveSinglePolicyBuilder RetrieveSinglePolicyOp
        {
            get
            {
                var opBuilder = new Operation.RetrieveSinglePolicy.RetrieveSinglePolicyBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public DeleteBasePolicy.DeleteBasePolicyBuilder DeleteBasePolicyOp
        {
            get
            {
                var opBuilder = new Operation.DeleteBasePolicy.DeleteBasePolicyBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public PartialUpdatePolicy.PartialUpdatePolicyBuilder PartialUpdatePolicyOp
        {
            get
            {
                var opBuilder = new Operation.PartialUpdatePolicy.PartialUpdatePolicyBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public RetrievePolicyCountry.RetrievePolicyCountryBuilder RetrievePolicyCountryOp
        {
            get
            {
                var opBuilder = new Operation.RetrievePolicyCountry.RetrievePolicyCountryBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public RetrieveAllPoliciesFromBasePolicy.RetrieveAllPoliciesFromBasePolicyBuilder RetrieveAllPoliciesFromBasePolicyOp
        {
            get
            {
                var opBuilder = new Operation.RetrieveAllPoliciesFromBasePolicy.RetrieveAllPoliciesFromBasePolicyBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public CreatePolicyUnderBasePolicy.CreatePolicyUnderBasePolicyBuilder CreatePolicyUnderBasePolicyOp
        {
            get
            {
                var opBuilder = new Operation.CreatePolicyUnderBasePolicy.CreatePolicyUnderBasePolicyBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public RetrieveAllPolicyTypes.RetrieveAllPolicyTypesBuilder RetrieveAllPolicyTypesOp
        {
            get
            {
                var opBuilder = new Operation.RetrieveAllPolicyTypes.RetrieveAllPolicyTypesBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        #endregion

        public RetrieveAllLegalPoliciesByNamespace.Response RetrieveAllLegalPoliciesByNamespace(RetrieveAllLegalPoliciesByNamespace input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<RetrieveAllLegalPoliciesByNamespace.Response> RetrieveAllLegalPoliciesByNamespaceAsync(RetrieveAllLegalPoliciesByNamespace input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public CreatePolicy.Response CreatePolicy(CreatePolicy input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<CreatePolicy.Response> CreatePolicyAsync(CreatePolicy input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public RetrieveSinglePolicy.Response RetrieveSinglePolicy(RetrieveSinglePolicy input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<RetrieveSinglePolicy.Response> RetrieveSinglePolicyAsync(RetrieveSinglePolicy input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public DeleteBasePolicy.Response DeleteBasePolicy(DeleteBasePolicy input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<DeleteBasePolicy.Response> DeleteBasePolicyAsync(DeleteBasePolicy input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public PartialUpdatePolicy.Response PartialUpdatePolicy(PartialUpdatePolicy input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<PartialUpdatePolicy.Response> PartialUpdatePolicyAsync(PartialUpdatePolicy input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public RetrievePolicyCountry.Response RetrievePolicyCountry(RetrievePolicyCountry input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<RetrievePolicyCountry.Response> RetrievePolicyCountryAsync(RetrievePolicyCountry input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public RetrieveAllPoliciesFromBasePolicy.Response RetrieveAllPoliciesFromBasePolicy(RetrieveAllPoliciesFromBasePolicy input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<RetrieveAllPoliciesFromBasePolicy.Response> RetrieveAllPoliciesFromBasePolicyAsync(RetrieveAllPoliciesFromBasePolicy input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public CreatePolicyUnderBasePolicy.Response CreatePolicyUnderBasePolicy(CreatePolicyUnderBasePolicy input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<CreatePolicyUnderBasePolicy.Response> CreatePolicyUnderBasePolicyAsync(CreatePolicyUnderBasePolicy input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public RetrieveAllPolicyTypes.Response RetrieveAllPolicyTypes(RetrieveAllPolicyTypes input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<RetrieveAllPolicyTypes.Response> RetrieveAllPolicyTypesAsync(RetrieveAllPolicyTypes input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
    }
}