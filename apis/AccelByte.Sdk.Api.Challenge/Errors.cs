// Copyright (c) 2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

/*
serviceName: Challenge

*/
using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json.Serialization;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Converters;

using AccelByte.Sdk.Api.Challenge.Model;
using AccelByte.Sdk.Api.Challenge.Operation;

namespace AccelByte.Sdk.Api.Challenge
{
    public static class ChallengeErrors
    {
        public static readonly ApiError Error20000 = new ApiError("20000", "internal server error: {{message}}");
        public static readonly ApiError Error20001 = new ApiError("20001", "unauthorized access");
        public static readonly ApiError Error20013 = new ApiError("20013", "insufficient permission");
        public static readonly ApiError Error20018 = new ApiError("20018", "bad request: {{message}}");
        public static readonly ApiError Error20029 = new ApiError("20029", "not found");
        public static readonly ApiError Error99002 = new ApiError("99002", "duplicate key error: {{message}}");
        public static readonly ApiError Error99003 = new ApiError("99003", "challenge validation error: {{message}}");
        public static readonly ApiError Error99004 = new ApiError("99004", "unprocessable entity: {{message}}");
    }

    public class IamErrorResponse : AccelByte.Sdk.Core.Model
    {
        [JsonPropertyName("errorCode")]
        public int? ErrorCode { get; set; }

        [JsonPropertyName("errorMessage")]
        public string? ErrorMessage { get; set; }

        [JsonPropertyName("requiredPermission")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public IamPermission? RequiredPermission { get; set; }


        public ApiError TranslateToApiError()
        {
            string errorCode =
                ErrorCode != null ? ErrorCode.Value.ToString() :
                "";

            string errorMessage =
                ErrorMessage != null ? ErrorMessage.ToString() :
                "";

            return new ApiError(errorCode, errorMessage);
        }
    }

    public class ResponseError : AccelByte.Sdk.Core.Model
    {
        [JsonPropertyName("attributes")]
        public Dictionary<string, string>? Attributes { get; set; }

        [JsonPropertyName("errorCode")]
        public int? ErrorCode { get; set; }

        [JsonPropertyName("errorMessage")]
        public string? ErrorMessage { get; set; }

        [JsonPropertyName("message")]
        public string? Message { get; set; }

        [JsonPropertyName("name")]
        public string? Name { get; set; }


        public ApiError TranslateToApiError()
        {
            string errorCode =
                ErrorCode != null ? ErrorCode.Value.ToString() :
                "";

            string errorMessage =
                ErrorMessage != null ? ErrorMessage.ToString() :
                Message != null ? Message.ToString() :
                "";

            return new ApiError(errorCode, errorMessage);
        }
    }

}