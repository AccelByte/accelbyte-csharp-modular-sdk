// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Challenge.Model;

namespace AccelByte.Sdk.Api.Challenge.Operation
{
    /// <summary>
    /// adminUpdateGoals
    ///
    /// 
    ///     * Required permission: ADMIN:NAMESPACE:{namespace}:CHALLENGE [UPDATE]
    /// 
    /// Request body:
    ///     * name: name of the goal
    ///     * description: text describing the goal (optional)
    ///     * schedule (optional): a time range that indicated the availability of a goal within a timeframe. used in fixed assignment rule
    ///     * requirementGroups: list of conditions that conform with the goal progressions.
    ///     * rewards: list of rewards that will be claimable once a goal is complete
    ///     * tag: goal's labels
    ///     * isActive (optional): when goal is in a schedule, isActive determine whether goal is active to progress or not
    /// Goal describe set of requirements that need to be fulfilled by players in order to complete it and describe what is the rewards given to player when they complete the goal.The requirement will have target value and a operator that will evaluate that against an observable playerâs attribute (e.g. statistic, entitlement). Goal belongs to a challenge.
    /// </summary>
    public class AdminUpdateGoals : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static AdminUpdateGoalsBuilder Builder { get => new AdminUpdateGoalsBuilder(); }

        public class AdminUpdateGoalsBuilder
            : OperationBuilder<AdminUpdateGoalsBuilder>
        {





            internal AdminUpdateGoalsBuilder() { }

            internal AdminUpdateGoalsBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }






            public AdminUpdateGoals Build(
                ModelUpdateGoalRequest body,
                string challengeCode,
                string code,
                string namespace_
            )
            {
                AdminUpdateGoals op = new AdminUpdateGoals(this,
                    body,
                    challengeCode,
                    code,
                    namespace_
                );

                op.SetBaseFields<AdminUpdateGoalsBuilder>(this);
                return op;
            }

            public Model.ModelGoalResponse? Execute(
                ModelUpdateGoalRequest body,
                string challengeCode,
                string code,
                string namespace_
            )
            {
                AdminUpdateGoals op = Build(
                    body,
                    challengeCode,
                    code,
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
            public async Task<Model.ModelGoalResponse?> ExecuteAsync(
                ModelUpdateGoalRequest body,
                string challengeCode,
                string code,
                string namespace_
            )
            {
                AdminUpdateGoals op = Build(
                    body,
                    challengeCode,
                    code,
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
        }

        private AdminUpdateGoals(AdminUpdateGoalsBuilder builder,
            ModelUpdateGoalRequest body,
            string challengeCode,
            string code,
            string namespace_
        )
        {
            PathParams["challengeCode"] = challengeCode;
            PathParams["code"] = code;
            PathParams["namespace"] = namespace_;





            BodyParams = body;


            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public AdminUpdateGoals(
            string challengeCode,
            string code,
            string namespace_,
            Model.ModelUpdateGoalRequest body
        )
        {
            PathParams["challengeCode"] = challengeCode;
            PathParams["code"] = code;
            PathParams["namespace"] = namespace_;





            BodyParams = body;


            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/challenge/v1/admin/namespaces/{namespace}/challenges/{challengeCode}/goals/{code}";

        public override HttpMethod Method => HttpMethod.Put;

        public override List<string> Consumes => new() { "application/json" };

        public override List<string> Produces => new() { "application/json" };

        public Model.ModelGoalResponse? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                return JsonSerializer.Deserialize<Model.ModelGoalResponse>(payload, ResponseJsonOptions);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.ModelGoalResponse>(payload, ResponseJsonOptions);
            }

            var payloadString = payload.ReadToString();

            throw new HttpResponseException(code, payloadString);
        }
    }

}