// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Challenge.Model;

namespace AccelByte.Sdk.Api.Challenge.Operation
{
    /// <summary>
    /// adminGetGoals
    ///
    /// - Required permission: ADMIN:NAMESPACE:{namespace}:CHALLENGE [READ]
    /// </summary>
    public class AdminGetGoals : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static AdminGetGoalsBuilder Builder { get => new AdminGetGoalsBuilder(); }

        public class AdminGetGoalsBuilder
            : OperationBuilder<AdminGetGoalsBuilder>
        {

            public long? Limit { get; set; }

            public long? Offset { get; set; }

            public AdminGetGoalsSortBy? SortBy { get; set; }

            public List<string>? Tags { get; set; }





            internal AdminGetGoalsBuilder() { }

            internal AdminGetGoalsBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }


            public AdminGetGoalsBuilder SetLimit(long _limit)
            {
                Limit = _limit;
                return this;
            }

            public AdminGetGoalsBuilder SetOffset(long _offset)
            {
                Offset = _offset;
                return this;
            }

            public AdminGetGoalsBuilder SetSortBy(AdminGetGoalsSortBy _sortBy)
            {
                SortBy = _sortBy;
                return this;
            }

            public AdminGetGoalsBuilder SetTags(List<string> _tags)
            {
                Tags = _tags;
                return this;
            }





            public AdminGetGoals Build(
                string challengeCode,
                string namespace_
            )
            {
                AdminGetGoals op = new AdminGetGoals(this,
                    challengeCode,                    
                    namespace_                    
                );

                op.SetBaseFields<AdminGetGoalsBuilder>(this);
                return op;
            }

            public AdminGetGoals.Response Execute(
                string challengeCode,
                string namespace_
            )
            {
                AdminGetGoals op = Build(
                    challengeCode,
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
            public async Task<AdminGetGoals.Response> ExecuteAsync(
                string challengeCode,
                string namespace_
            )
            {
                AdminGetGoals op = Build(
                    challengeCode,
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
        }

        private AdminGetGoals(AdminGetGoalsBuilder builder,
            string challengeCode,
            string namespace_
        )
        {
            PathParams["challengeCode"] = challengeCode;
            PathParams["namespace"] = namespace_;
            
            if (builder.Limit != null) QueryParams["limit"] = Convert.ToString(builder.Limit)!;
            if (builder.Offset != null) QueryParams["offset"] = Convert.ToString(builder.Offset)!;
            if (builder.SortBy is not null) QueryParams["sortBy"] = builder.SortBy.Value;
            if (builder.Tags is not null) QueryParams["tags"] = builder.Tags;
            

            
            CollectionFormatMap["tags"] = "csv";
            
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        #region Response Part        
        public class Response : ApiResponse<Model.ModelGetGoalsResponse>
        {

            public IamErrorResponse? Error401 { get; set; } = null;

            public IamErrorResponse? Error403 { get; set; } = null;

            public ResponseError? Error404 { get; set; } = null;

            public ResponseError? Error500 { get; set; } = null;


            protected override string GetFullOperationId() => "Challenge::GoalConfiguration::AdminGetGoals";
        }

        #endregion

        public AdminGetGoals(
            string challengeCode,            
            string namespace_,            
            long? limit,            
            long? offset,            
            AdminGetGoalsSortBy? sortBy,            
            List<string>? tags            
        )
        {
            PathParams["challengeCode"] = challengeCode;
            PathParams["namespace"] = namespace_;
            
            if (limit != null) QueryParams["limit"] = Convert.ToString(limit)!;
            if (offset != null) QueryParams["offset"] = Convert.ToString(offset)!;
            if (sortBy is not null) QueryParams["sortBy"] = sortBy.Value;
            if (tags is not null) QueryParams["tags"] = tags;
            

            
            CollectionFormatMap["tags"] = "csv";
            
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/challenge/v1/admin/namespaces/{namespace}/challenges/{challengeCode}/goals";

        public override HttpMethod Method => HttpMethod.Get;

        public override List<string> Consumes => new() {  };

        public override List<string> Produces => new() { "application/json" };
        
        public AdminGetGoals.Response ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            var response = new AdminGetGoals.Response()
            {
                StatusCode = code,
                ContentType = contentType
            };

            if (code == (HttpStatusCode)204)
            {
                response.IsSuccess = true;
            }
            else if ((code == (HttpStatusCode)201) || (code == (HttpStatusCode)202) || (code == (HttpStatusCode)200))
            {
                response.Data = JsonSerializer.Deserialize<Model.ModelGetGoalsResponse>(payload, ResponseJsonOptions);
                response.IsSuccess = true;
            }
            else if (code == (HttpStatusCode)401)
            {
                response.Error401 = JsonSerializer.Deserialize<IamErrorResponse>(payload, ResponseJsonOptions);
                response.Error = response.Error401!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)403)
            {
                response.Error403 = JsonSerializer.Deserialize<IamErrorResponse>(payload, ResponseJsonOptions);
                response.Error = response.Error403!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)404)
            {
                response.Error404 = JsonSerializer.Deserialize<ResponseError>(payload, ResponseJsonOptions);
                response.Error = response.Error404!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)500)
            {
                response.Error500 = JsonSerializer.Deserialize<ResponseError>(payload, ResponseJsonOptions);
                response.Error = response.Error500!.TranslateToApiError();
            }

            return response;
        }
    }

    public class AdminGetGoalsSortBy : StringEnum<AdminGetGoalsSortBy>
    {
        public static readonly AdminGetGoalsSortBy CreatedAt
            = new AdminGetGoalsSortBy("createdAt");

        public static readonly AdminGetGoalsSortBy CreatedAtasc
            = new AdminGetGoalsSortBy("createdAt:asc");

        public static readonly AdminGetGoalsSortBy CreatedAtdesc
            = new AdminGetGoalsSortBy("createdAt:desc");

        public static readonly AdminGetGoalsSortBy UpdatedAt
            = new AdminGetGoalsSortBy("updatedAt");

        public static readonly AdminGetGoalsSortBy UpdatedAtasc
            = new AdminGetGoalsSortBy("updatedAt:asc");

        public static readonly AdminGetGoalsSortBy UpdatedAtdesc
            = new AdminGetGoalsSortBy("updatedAt:desc");


        public static implicit operator AdminGetGoalsSortBy(string value)
        {
            return NewValue(value);
        }

        public AdminGetGoalsSortBy(string enumValue)
            : base(enumValue)
        {

        }
    }

}