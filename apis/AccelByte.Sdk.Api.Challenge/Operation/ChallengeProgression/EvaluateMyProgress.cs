// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Challenge.Model;

namespace AccelByte.Sdk.Api.Challenge.Operation
{
    /// <summary>
    /// EvaluateMyProgress
    ///
    /// - Required permission: NAMESPACE:{namespace}:CHALLENGE:PROGRESSION [UPDATE]
    /// </summary>
    public class EvaluateMyProgress : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static EvaluateMyProgressBuilder Builder { get => new EvaluateMyProgressBuilder(); }

        public class EvaluateMyProgressBuilder
            : OperationBuilder<EvaluateMyProgressBuilder>
        {





            internal EvaluateMyProgressBuilder() { }

            internal EvaluateMyProgressBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }






            public EvaluateMyProgress Build(
                string namespace_
            )
            {
                EvaluateMyProgress op = new EvaluateMyProgress(this,
                    namespace_
                );

                op.SetBaseFields<EvaluateMyProgressBuilder>(this);
                return op;
            }

            public EvaluateMyProgress.Response Execute(
                string namespace_
            )
            {
                EvaluateMyProgress op = Build(
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
            public async Task<EvaluateMyProgress.Response> ExecuteAsync(
                string namespace_
            )
            {
                EvaluateMyProgress op = Build(
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
        }

        private EvaluateMyProgress(EvaluateMyProgressBuilder builder,
            string namespace_
        )
        {
            PathParams["namespace"] = namespace_;







            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        #region Response Part        
        public class Response : ApiResponse
        {

            public IamErrorResponse? Error401 { get; set; } = null;

            public IamErrorResponse? Error403 { get; set; } = null;

            public ResponseError? Error500 { get; set; } = null;


            protected override string GetFullOperationId() => "Challenge::ChallengeProgression::EvaluateMyProgress";
        }

        #endregion

        public EvaluateMyProgress(
            string namespace_
        )
        {
            PathParams["namespace"] = namespace_;







            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/challenge/v1/public/namespaces/{namespace}/users/me/progress/evaluate";

        public override HttpMethod Method => HttpMethod.Post;

        public override List<string> Consumes => new() { };

        public override List<string> Produces => new() { "application/json" };

        public EvaluateMyProgress.Response ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            var response = new EvaluateMyProgress.Response()
            {
                StatusCode = code,
                ContentType = contentType,
                IsSuccess = true
            };

            if (code == (HttpStatusCode)401)

            {
                response.Error401 = JsonSerializer.Deserialize<IamErrorResponse>(payload, ResponseJsonOptions);
                response.Error = response.Error401!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)403)

            {
                response.Error403 = JsonSerializer.Deserialize<IamErrorResponse>(payload, ResponseJsonOptions);
                response.Error = response.Error403!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)500)

            {
                response.Error500 = JsonSerializer.Deserialize<ResponseError>(payload, ResponseJsonOptions);
                response.Error = response.Error500!.TranslateToApiError();
            }

            return response;
        }
    }

}