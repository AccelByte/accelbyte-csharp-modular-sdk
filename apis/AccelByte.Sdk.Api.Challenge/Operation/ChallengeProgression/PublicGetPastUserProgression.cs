// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Challenge.Model;

namespace AccelByte.Sdk.Api.Challenge.Operation
{
    /// <summary>
    /// publicGetPastUserProgression
    ///
    /// - Required permission: NAMESPACE:{namespace}:CHALLENGE:PROGRESSION [READ]
    /// </summary>
    public class PublicGetPastUserProgression : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static PublicGetPastUserProgressionBuilder Builder { get => new PublicGetPastUserProgressionBuilder(); }

        public class PublicGetPastUserProgressionBuilder
            : OperationBuilder<PublicGetPastUserProgressionBuilder>
        {

            public string? GoalCode { get; set; }

            public long? Limit { get; set; }

            public long? Offset { get; set; }

            public List<string>? Tags { get; set; }





            internal PublicGetPastUserProgressionBuilder() { }

            internal PublicGetPastUserProgressionBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }


            public PublicGetPastUserProgressionBuilder SetGoalCode(string _goalCode)
            {
                GoalCode = _goalCode;
                return this;
            }

            public PublicGetPastUserProgressionBuilder SetLimit(long _limit)
            {
                Limit = _limit;
                return this;
            }

            public PublicGetPastUserProgressionBuilder SetOffset(long _offset)
            {
                Offset = _offset;
                return this;
            }

            public PublicGetPastUserProgressionBuilder SetTags(List<string> _tags)
            {
                Tags = _tags;
                return this;
            }





            public PublicGetPastUserProgression Build(
                string challengeCode,
                long index,
                string namespace_
            )
            {
                PublicGetPastUserProgression op = new PublicGetPastUserProgression(this,
                    challengeCode,
                    index,
                    namespace_
                );

                op.SetBaseFields<PublicGetPastUserProgressionBuilder>(this);
                return op;
            }

            public PublicGetPastUserProgression.Response Execute(
                string challengeCode,
                long index,
                string namespace_
            )
            {
                PublicGetPastUserProgression op = Build(
                    challengeCode,
                    index,
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
            public async Task<PublicGetPastUserProgression.Response> ExecuteAsync(
                string challengeCode,
                long index,
                string namespace_
            )
            {
                PublicGetPastUserProgression op = Build(
                    challengeCode,
                    index,
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
        }

        private PublicGetPastUserProgression(PublicGetPastUserProgressionBuilder builder,
            string challengeCode,
            long index,
            string namespace_
        )
        {
            PathParams["challengeCode"] = challengeCode;
            PathParams["index"] = Convert.ToString(index);
            PathParams["namespace"] = namespace_;

            if (builder.GoalCode is not null) QueryParams["goalCode"] = builder.GoalCode;
            if (builder.Limit != null) QueryParams["limit"] = Convert.ToString(builder.Limit)!;
            if (builder.Offset != null) QueryParams["offset"] = Convert.ToString(builder.Offset)!;
            if (builder.Tags is not null) QueryParams["tags"] = builder.Tags;



            CollectionFormatMap["tags"] = "csv";



            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        #region Response Part        
        public class Response : ApiResponse<Model.ModelUserProgressionResponse>
        {

            public IamErrorResponse? Error400 { get; set; } = null;

            public IamErrorResponse? Error401 { get; set; } = null;

            public IamErrorResponse? Error403 { get; set; } = null;

            public IamErrorResponse? Error404 { get; set; } = null;

            public ResponseError? Error500 { get; set; } = null;


            protected override string GetFullOperationId() => "Challenge::ChallengeProgression::PublicGetPastUserProgression";
        }

        #endregion

        public PublicGetPastUserProgression(
            string challengeCode,
            long index,
            string namespace_,
            string? goalCode,
            long? limit,
            long? offset,
            List<string>? tags
        )
        {
            PathParams["challengeCode"] = challengeCode;
            PathParams["index"] = Convert.ToString(index);
            PathParams["namespace"] = namespace_;

            if (goalCode is not null) QueryParams["goalCode"] = goalCode;
            if (limit != null) QueryParams["limit"] = Convert.ToString(limit)!;
            if (offset != null) QueryParams["offset"] = Convert.ToString(offset)!;
            if (tags is not null) QueryParams["tags"] = tags;



            CollectionFormatMap["tags"] = "csv";



            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/challenge/v1/public/namespaces/{namespace}/users/me/progress/{challengeCode}/index/{index}";

        public override HttpMethod Method => HttpMethod.Get;

        public override List<string> Consumes => new() { };

        public override List<string> Produces => new() { "application/json" };

        public PublicGetPastUserProgression.Response ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            var response = new PublicGetPastUserProgression.Response()
            {
                StatusCode = code,
                ContentType = contentType
            };

            if (code == (HttpStatusCode)204)
            {
                response.IsSuccess = true;
            }
            else if ((code == (HttpStatusCode)201) || (code == (HttpStatusCode)202) || (code == (HttpStatusCode)200))
            {
                response.Data = JsonSerializer.Deserialize<Model.ModelUserProgressionResponse>(payload, ResponseJsonOptions);
                response.IsSuccess = true;
            }
            else if (code == (HttpStatusCode)400)
            {
                response.Error400 = JsonSerializer.Deserialize<IamErrorResponse>(payload, ResponseJsonOptions);
                response.Error = response.Error400!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)401)
            {
                response.Error401 = JsonSerializer.Deserialize<IamErrorResponse>(payload, ResponseJsonOptions);
                response.Error = response.Error401!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)403)
            {
                response.Error403 = JsonSerializer.Deserialize<IamErrorResponse>(payload, ResponseJsonOptions);
                response.Error = response.Error403!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)404)
            {
                response.Error404 = JsonSerializer.Deserialize<IamErrorResponse>(payload, ResponseJsonOptions);
                response.Error = response.Error404!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)500)
            {
                response.Error500 = JsonSerializer.Deserialize<ResponseError>(payload, ResponseJsonOptions);
                response.Error = response.Error500!.TranslateToApiError();
            }

            return response;
        }
    }

}