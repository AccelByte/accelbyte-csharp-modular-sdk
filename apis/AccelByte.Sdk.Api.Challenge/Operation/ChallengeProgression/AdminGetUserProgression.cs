// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Challenge.Model;

namespace AccelByte.Sdk.Api.Challenge.Operation
{
    /// <summary>
    /// adminGetUserProgression
    ///
    /// 
    ///     * Required permission: ADMIN:NAMESPACE:{namespace}:CHALLENGE:PROGRESSION [READ]
    /// </summary>
    public class AdminGetUserProgression : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static AdminGetUserProgressionBuilder Builder { get => new AdminGetUserProgressionBuilder(); }

        public class AdminGetUserProgressionBuilder
            : OperationBuilder<AdminGetUserProgressionBuilder>
        {

            public DateTime? DateTime { get; set; }

            public string? GoalCode { get; set; }

            public long? Limit { get; set; }

            public long? Offset { get; set; }

            public List<string>? Tags { get; set; }





            internal AdminGetUserProgressionBuilder() { }

            internal AdminGetUserProgressionBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }


            public AdminGetUserProgressionBuilder SetDateTime(DateTime _dateTime)
            {
                DateTime = _dateTime;
                return this;
            }

            public AdminGetUserProgressionBuilder SetGoalCode(string _goalCode)
            {
                GoalCode = _goalCode;
                return this;
            }

            public AdminGetUserProgressionBuilder SetLimit(long _limit)
            {
                Limit = _limit;
                return this;
            }

            public AdminGetUserProgressionBuilder SetOffset(long _offset)
            {
                Offset = _offset;
                return this;
            }

            public AdminGetUserProgressionBuilder SetTags(List<string> _tags)
            {
                Tags = _tags;
                return this;
            }





            public AdminGetUserProgression Build(
                string challengeCode,
                string namespace_,
                string userId
            )
            {
                AdminGetUserProgression op = new AdminGetUserProgression(this,
                    challengeCode,
                    namespace_,
                    userId
                );

                op.SetBaseFields<AdminGetUserProgressionBuilder>(this);
                return op;
            }

            public Model.ModelUserProgressionResponse? Execute(
                string challengeCode,
                string namespace_,
                string userId
            )
            {
                AdminGetUserProgression op = Build(
                    challengeCode,
                    namespace_,
                    userId
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
            public async Task<Model.ModelUserProgressionResponse?> ExecuteAsync(
                string challengeCode,
                string namespace_,
                string userId
            )
            {
                AdminGetUserProgression op = Build(
                    challengeCode,
                    namespace_,
                    userId
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
        }

        private AdminGetUserProgression(AdminGetUserProgressionBuilder builder,
            string challengeCode,
            string namespace_,
            string userId
        )
        {
            PathParams["challengeCode"] = challengeCode;
            PathParams["namespace"] = namespace_;
            PathParams["userId"] = userId;

            if (builder.DateTime != null)
                QueryParams["dateTime"] = builder.DateTime.Value.ToString("O", System.Globalization.CultureInfo.InvariantCulture);
            if (builder.GoalCode is not null) QueryParams["goalCode"] = builder.GoalCode;
            if (builder.Limit != null) QueryParams["limit"] = Convert.ToString(builder.Limit)!;
            if (builder.Offset != null) QueryParams["offset"] = Convert.ToString(builder.Offset)!;
            if (builder.Tags is not null) QueryParams["tags"] = builder.Tags;



            CollectionFormatMap["tags"] = "csv";



            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public AdminGetUserProgression(
            string challengeCode,
            string namespace_,
            string userId,
            DateTime? dateTime,
            string? goalCode,
            long? limit,
            long? offset,
            List<string>? tags
        )
        {
            PathParams["challengeCode"] = challengeCode;
            PathParams["namespace"] = namespace_;
            PathParams["userId"] = userId;

            if (dateTime != null)
                QueryParams["dateTime"] = dateTime.Value.ToString("O", System.Globalization.CultureInfo.InvariantCulture);
            if (goalCode is not null) QueryParams["goalCode"] = goalCode;
            if (limit != null) QueryParams["limit"] = Convert.ToString(limit)!;
            if (offset != null) QueryParams["offset"] = Convert.ToString(offset)!;
            if (tags is not null) QueryParams["tags"] = tags;



            CollectionFormatMap["tags"] = "csv";



            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/challenge/v1/admin/namespaces/{namespace}/users/{userId}/progress/{challengeCode}";

        public override HttpMethod Method => HttpMethod.Get;

        public override List<string> Consumes => new() { };

        public override List<string> Produces => new() { "application/json" };

        public Model.ModelUserProgressionResponse? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                return JsonSerializer.Deserialize<Model.ModelUserProgressionResponse>(payload, ResponseJsonOptions);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.ModelUserProgressionResponse>(payload, ResponseJsonOptions);
            }

            var payloadString = payload.ReadToString();

            throw new HttpResponseException(code, payloadString);
        }
    }

}