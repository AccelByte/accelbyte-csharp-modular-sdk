// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Challenge.Model;

namespace AccelByte.Sdk.Api.Challenge.Operation
{
    /// <summary>
    /// GetChallenges
    ///
    /// - Required permission: NAMESPACE:{namespace}:CHALLENGE [READ]
    /// </summary>
    public class GetChallenges : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static GetChallengesBuilder Builder { get => new GetChallengesBuilder(); }

        public class GetChallengesBuilder
            : OperationBuilder<GetChallengesBuilder>
        {

            public string? Keyword { get; set; }

            public long? Limit { get; set; }

            public long? Offset { get; set; }

            public GetChallengesSortBy? SortBy { get; set; }

            public GetChallengesStatus? Status { get; set; }

            public List<string>? Tags { get; set; }





            internal GetChallengesBuilder() { }

            internal GetChallengesBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }


            public GetChallengesBuilder SetKeyword(string _keyword)
            {
                Keyword = _keyword;
                return this;
            }

            public GetChallengesBuilder SetLimit(long _limit)
            {
                Limit = _limit;
                return this;
            }

            public GetChallengesBuilder SetOffset(long _offset)
            {
                Offset = _offset;
                return this;
            }

            public GetChallengesBuilder SetSortBy(GetChallengesSortBy _sortBy)
            {
                SortBy = _sortBy;
                return this;
            }

            public GetChallengesBuilder SetStatus(GetChallengesStatus _status)
            {
                Status = _status;
                return this;
            }

            public GetChallengesBuilder SetTags(List<string> _tags)
            {
                Tags = _tags;
                return this;
            }





            public GetChallenges Build(
                string namespace_
            )
            {
                GetChallenges op = new GetChallenges(this,
                    namespace_                    
                );

                op.SetBaseFields<GetChallengesBuilder>(this);
                return op;
            }

            public GetChallenges.Response Execute(
                string namespace_
            )
            {
                GetChallenges op = Build(
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
            public async Task<GetChallenges.Response> ExecuteAsync(
                string namespace_
            )
            {
                GetChallenges op = Build(
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
        }

        private GetChallenges(GetChallengesBuilder builder,
            string namespace_
        )
        {
            PathParams["namespace"] = namespace_;
            
            if (builder.Keyword is not null) QueryParams["keyword"] = builder.Keyword;
            if (builder.Limit != null) QueryParams["limit"] = Convert.ToString(builder.Limit)!;
            if (builder.Offset != null) QueryParams["offset"] = Convert.ToString(builder.Offset)!;
            if (builder.SortBy is not null) QueryParams["sortBy"] = builder.SortBy.Value;
            if (builder.Status is not null) QueryParams["status"] = builder.Status.Value;
            if (builder.Tags is not null) QueryParams["tags"] = builder.Tags;
            

            
            CollectionFormatMap["tags"] = "csv";
            
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        #region Response Part        
        public class Response : ApiResponse<Model.ModelListChallengeResponse>
        {

            public ResponseError? Error400 { get; set; } = null;

            public IamErrorResponse? Error401 { get; set; } = null;

            public IamErrorResponse? Error403 { get; set; } = null;

            public ResponseError? Error500 { get; set; } = null;


            protected override string GetFullOperationId() => "Challenge::ChallengeList::GetChallenges";
        }

        #endregion

        public GetChallenges(
            string namespace_,            
            string? keyword,            
            long? limit,            
            long? offset,            
            GetChallengesSortBy? sortBy,            
            GetChallengesStatus? status,            
            List<string>? tags            
        )
        {
            PathParams["namespace"] = namespace_;
            
            if (keyword is not null) QueryParams["keyword"] = keyword;
            if (limit != null) QueryParams["limit"] = Convert.ToString(limit)!;
            if (offset != null) QueryParams["offset"] = Convert.ToString(offset)!;
            if (sortBy is not null) QueryParams["sortBy"] = sortBy.Value;
            if (status is not null) QueryParams["status"] = status.Value;
            if (tags is not null) QueryParams["tags"] = tags;
            

            
            CollectionFormatMap["tags"] = "csv";
            
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/challenge/v1/public/namespaces/{namespace}/challenges";

        public override HttpMethod Method => HttpMethod.Get;

        public override List<string> Consumes => new() {  };

        public override List<string> Produces => new() { "application/json" };
        
        public GetChallenges.Response ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            var response = new GetChallenges.Response()
            {
                StatusCode = code,
                ContentType = contentType
            };

            if (code == (HttpStatusCode)204)
            {
                response.IsSuccess = true;
            }
            else if ((code == (HttpStatusCode)201) || (code == (HttpStatusCode)202) || (code == (HttpStatusCode)200))
            {
                response.Data = JsonSerializer.Deserialize<Model.ModelListChallengeResponse>(payload, ResponseJsonOptions);
                response.IsSuccess = true;
            }
            else if (code == (HttpStatusCode)400)
            {
                response.Error400 = JsonSerializer.Deserialize<ResponseError>(payload, ResponseJsonOptions);
                response.Error = response.Error400!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)401)
            {
                response.Error401 = JsonSerializer.Deserialize<IamErrorResponse>(payload, ResponseJsonOptions);
                response.Error = response.Error401!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)403)
            {
                response.Error403 = JsonSerializer.Deserialize<IamErrorResponse>(payload, ResponseJsonOptions);
                response.Error = response.Error403!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)500)
            {
                response.Error500 = JsonSerializer.Deserialize<ResponseError>(payload, ResponseJsonOptions);
                response.Error = response.Error500!.TranslateToApiError();
            }

            return response;
        }
    }

    public class GetChallengesSortBy : StringEnum<GetChallengesSortBy>
    {
        public static readonly GetChallengesSortBy CreatedAt
            = new GetChallengesSortBy("createdAt");

        public static readonly GetChallengesSortBy CreatedAtasc
            = new GetChallengesSortBy("createdAt:asc");

        public static readonly GetChallengesSortBy CreatedAtdesc
            = new GetChallengesSortBy("createdAt:desc");

        public static readonly GetChallengesSortBy UpdatedAt
            = new GetChallengesSortBy("updatedAt");

        public static readonly GetChallengesSortBy UpdatedAtasc
            = new GetChallengesSortBy("updatedAt:asc");

        public static readonly GetChallengesSortBy UpdatedAtdesc
            = new GetChallengesSortBy("updatedAt:desc");


        public static implicit operator GetChallengesSortBy(string value)
        {
            return NewValue(value);
        }

        public GetChallengesSortBy(string enumValue)
            : base(enumValue)
        {

        }
    }

    public class GetChallengesStatus : StringEnum<GetChallengesStatus>
    {
        public static readonly GetChallengesStatus INIT
            = new GetChallengesStatus("INIT");

        public static readonly GetChallengesStatus RETIRED
            = new GetChallengesStatus("RETIRED");

        public static readonly GetChallengesStatus TIED
            = new GetChallengesStatus("TIED");


        public static implicit operator GetChallengesStatus(string value)
        {
            return NewValue(value);
        }

        public GetChallengesStatus(string enumValue)
            : base(enumValue)
        {

        }
    }

}