// Copyright (c) 2023 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using System;

using AccelByte.Sdk.Core;

using AccelByte.Sdk.Api.Challenge;

namespace AccelByte.Sdk.Api.Challenge
{
    public class ChallengeApi : ISdkApi
    {
        private IAccelByteSdk _Sdk;

        private string _CustomBasePath = String.Empty;

        public Wrapper.ChallengeConfiguration ChallengeConfiguration
        {
            get
            {
                if (_ChallengeConfiguration == null)
                    _ChallengeConfiguration = new Wrapper.ChallengeConfiguration(_Sdk, _CustomBasePath);
                return _ChallengeConfiguration;
            }
        }
        private Wrapper.ChallengeConfiguration? _ChallengeConfiguration = null;

        public Wrapper.Utilities Utilities
        {
            get
            {
                if (_Utilities == null)
                    _Utilities = new Wrapper.Utilities(_Sdk, _CustomBasePath);
                return _Utilities;
            }
        }
        private Wrapper.Utilities? _Utilities = null;

        public Wrapper.GoalConfiguration GoalConfiguration
        {
            get
            {
                if (_GoalConfiguration == null)
                    _GoalConfiguration = new Wrapper.GoalConfiguration(_Sdk, _CustomBasePath);
                return _GoalConfiguration;
            }
        }
        private Wrapper.GoalConfiguration? _GoalConfiguration = null;

        public Wrapper.Schedules Schedules
        {
            get
            {
                if (_Schedules == null)
                    _Schedules = new Wrapper.Schedules(_Sdk, _CustomBasePath);
                return _Schedules;
            }
        }
        private Wrapper.Schedules? _Schedules = null;

        public Wrapper.Plugins Plugins
        {
            get
            {
                if (_Plugins == null)
                    _Plugins = new Wrapper.Plugins(_Sdk, _CustomBasePath);
                return _Plugins;
            }
        }
        private Wrapper.Plugins? _Plugins = null;

        public Wrapper.ChallengeProgression ChallengeProgression
        {
            get
            {
                if (_ChallengeProgression == null)
                    _ChallengeProgression = new Wrapper.ChallengeProgression(_Sdk, _CustomBasePath);
                return _ChallengeProgression;
            }
        }
        private Wrapper.ChallengeProgression? _ChallengeProgression = null;

        public Wrapper.PlayerReward PlayerReward
        {
            get
            {
                if (_PlayerReward == null)
                    _PlayerReward = new Wrapper.PlayerReward(_Sdk, _CustomBasePath);
                return _PlayerReward;
            }
        }
        private Wrapper.PlayerReward? _PlayerReward = null;

        public Wrapper.ChallengeList ChallengeList
        {
            get
            {
                if (_ChallengeList == null)
                    _ChallengeList = new Wrapper.ChallengeList(_Sdk, _CustomBasePath);
                return _ChallengeList;
            }
        }
        private Wrapper.ChallengeList? _ChallengeList = null;

        internal ChallengeApi(IAccelByteSdk sdk)
        {
            _Sdk = sdk;
        }

        public ChallengeApi WithCustomBasePath(string value)
        {
            _CustomBasePath = value;
            return this;
        }
    }
}

namespace AccelByte.Sdk.Api
{
    public static class ChallengeApi_SdkExts
    {
        public static ChallengeApi GetChallengeApi(this IAccelByteSdk sdk)
        {
            return sdk.GetApi<ChallengeApi>("challenge", () =>
            {
                string customPath = sdk.Configuration.ConfigRepository.GetCustomServiceBasePath("challenge");
                if (customPath != "")
                    return (new ChallengeApi(sdk)).WithCustomBasePath(customPath);
                else
                    return new ChallengeApi(sdk);
            });
        }
    }
}