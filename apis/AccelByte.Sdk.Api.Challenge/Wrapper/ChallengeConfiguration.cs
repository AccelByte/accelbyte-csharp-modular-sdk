// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;

using AccelByte.Sdk.Api.Challenge.Model;
using AccelByte.Sdk.Api.Challenge.Operation;

namespace AccelByte.Sdk.Api.Challenge.Wrapper
{
    public class ChallengeConfiguration
    {
        private readonly IAccelByteSdk _sdk;

        private string _CustomBasePath = String.Empty;

        public ChallengeConfiguration(IAccelByteSdk sdk)
        {
            _sdk = sdk;
        }

        public ChallengeConfiguration(IAccelByteSdk sdk, string customBasePath)
        {
            _sdk = sdk;
            _CustomBasePath = customBasePath;
        }

        #region Operation Builders
        public AdminGetChallenges.AdminGetChallengesBuilder AdminGetChallengesOp
        {
            get
            {
                var opBuilder = new Operation.AdminGetChallenges.AdminGetChallengesBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminCreateChallenge.AdminCreateChallengeBuilder AdminCreateChallengeOp
        {
            get
            {
                var opBuilder = new Operation.AdminCreateChallenge.AdminCreateChallengeBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminGetActiveChallenges.AdminGetActiveChallengesBuilder AdminGetActiveChallengesOp
        {
            get
            {
                var opBuilder = new Operation.AdminGetActiveChallenges.AdminGetActiveChallengesBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminGetChallenge.AdminGetChallengeBuilder AdminGetChallengeOp
        {
            get
            {
                var opBuilder = new Operation.AdminGetChallenge.AdminGetChallengeBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminUpdateChallenge.AdminUpdateChallengeBuilder AdminUpdateChallengeOp
        {
            get
            {
                var opBuilder = new Operation.AdminUpdateChallenge.AdminUpdateChallengeBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminDeleteChallenge.AdminDeleteChallengeBuilder AdminDeleteChallengeOp
        {
            get
            {
                var opBuilder = new Operation.AdminDeleteChallenge.AdminDeleteChallengeBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminGetPeriods.AdminGetPeriodsBuilder AdminGetPeriodsOp
        {
            get
            {
                var opBuilder = new Operation.AdminGetPeriods.AdminGetPeriodsBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminRandomizeChallenge.AdminRandomizeChallengeBuilder AdminRandomizeChallengeOp
        {
            get
            {
                var opBuilder = new Operation.AdminRandomizeChallenge.AdminRandomizeChallengeBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminDeleteTiedChallenge.AdminDeleteTiedChallengeBuilder AdminDeleteTiedChallengeOp
        {
            get
            {
                var opBuilder = new Operation.AdminDeleteTiedChallenge.AdminDeleteTiedChallengeBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminUpdateTiedChallengeSchedule.AdminUpdateTiedChallengeScheduleBuilder AdminUpdateTiedChallengeScheduleOp
        {
            get
            {
                var opBuilder = new Operation.AdminUpdateTiedChallengeSchedule.AdminUpdateTiedChallengeScheduleBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        #endregion

        public AdminGetChallenges.Response AdminGetChallenges(AdminGetChallenges input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminGetChallenges.Response> AdminGetChallengesAsync(AdminGetChallenges input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminCreateChallenge.Response AdminCreateChallenge(AdminCreateChallenge input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminCreateChallenge.Response> AdminCreateChallengeAsync(AdminCreateChallenge input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminGetActiveChallenges.Response AdminGetActiveChallenges(AdminGetActiveChallenges input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminGetActiveChallenges.Response> AdminGetActiveChallengesAsync(AdminGetActiveChallenges input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminGetChallenge.Response AdminGetChallenge(AdminGetChallenge input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminGetChallenge.Response> AdminGetChallengeAsync(AdminGetChallenge input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminUpdateChallenge.Response AdminUpdateChallenge(AdminUpdateChallenge input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminUpdateChallenge.Response> AdminUpdateChallengeAsync(AdminUpdateChallenge input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminDeleteChallenge.Response AdminDeleteChallenge(AdminDeleteChallenge input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminDeleteChallenge.Response> AdminDeleteChallengeAsync(AdminDeleteChallenge input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminGetPeriods.Response AdminGetPeriods(AdminGetPeriods input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminGetPeriods.Response> AdminGetPeriodsAsync(AdminGetPeriods input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminRandomizeChallenge.Response AdminRandomizeChallenge(AdminRandomizeChallenge input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminRandomizeChallenge.Response> AdminRandomizeChallengeAsync(AdminRandomizeChallenge input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminDeleteTiedChallenge.Response AdminDeleteTiedChallenge(AdminDeleteTiedChallenge input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminDeleteTiedChallenge.Response> AdminDeleteTiedChallengeAsync(AdminDeleteTiedChallenge input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminUpdateTiedChallengeSchedule.Response AdminUpdateTiedChallengeSchedule(AdminUpdateTiedChallengeSchedule input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminUpdateTiedChallengeSchedule.Response> AdminUpdateTiedChallengeScheduleAsync(AdminUpdateTiedChallengeSchedule input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
    }
}