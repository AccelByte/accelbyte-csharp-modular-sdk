// Copyright (c) 2022-2023 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Reporting.Model;

namespace AccelByte.Sdk.Api.Reporting.Operation
{
    /// <summary>
    /// updateModerationRule
    ///
    /// 
    /// 
    /// This endpoint update moderation rule.
    /// 
    /// 
    /// 
    /// 
    /// Required Permission: ADMIN:NAMESPACE:{namespace}:RULE [UPDATE]
    /// 
    /// 
    /// Supported Category:
    /// 
    ///   * UGC
    ///   * USER
    ///   * CHAT
    ///   * EXTENSION
    /// 
    /// 
    /// 
    /// 
    /// 
    /// 
    /// Supported Action (GOING TO DEPRECATE, for replacement please use "actions"):
    /// 
    /// 
    /// 
    /// 
    /// 
    /// 
    ///   * HideContent
    /// 
    /// 
    /// 
    /// 
    /// 
    /// Supported Actions:
    /// 
    /// 
    /// 
    /// 
    /// 
    /// 
    ///   * hideContent : Hide the content
    /// 
    /// 
    ///   * banAccount : Ban the user account
    /// 
    /// 
    ///   * deleteChat : Delete chat
    /// </summary>
    public class UpdateModerationRule : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static UpdateModerationRuleBuilder Builder { get => new UpdateModerationRuleBuilder(); }

        public class UpdateModerationRuleBuilder
            : OperationBuilder<UpdateModerationRuleBuilder>
        {





            internal UpdateModerationRuleBuilder() { }

            internal UpdateModerationRuleBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }






            public UpdateModerationRule Build(
                RestapiModerationRuleRequest body,
                string namespace_,
                string ruleId
            )
            {
                UpdateModerationRule op = new UpdateModerationRule(this,
                    body,
                    namespace_,
                    ruleId
                );
                op.PreferredSecurityMethod = PreferredSecurityMethod;
                op.RequestJsonOptions = RequestJsonOptions;
                op.ResponseJsonOptions = ResponseJsonOptions;

                return op;
            }

            public Model.RestapiModerationRuleResponse? Execute(
                RestapiModerationRuleRequest body,
                string namespace_,
                string ruleId
            )
            {
                UpdateModerationRule op = Build(
                    body,
                    namespace_,
                    ruleId
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
        }

        private UpdateModerationRule(UpdateModerationRuleBuilder builder,
            RestapiModerationRuleRequest body,
            string namespace_,
            string ruleId
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["ruleId"] = ruleId;





            BodyParams = body;


            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public UpdateModerationRule(
            string namespace_,
            string ruleId,
            Model.RestapiModerationRuleRequest body
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["ruleId"] = ruleId;





            BodyParams = body;


            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/reporting/v1/admin/namespaces/{namespace}/rule/{ruleId}";

        public override HttpMethod Method => HttpMethod.Put;

        public override List<string> Consumes => new() { "application/json" };

        public override List<string> Produces => new() { "application/json" };

        public Model.RestapiModerationRuleResponse? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                return JsonSerializer.Deserialize<Model.RestapiModerationRuleResponse>(payload, ResponseJsonOptions);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.RestapiModerationRuleResponse>(payload, ResponseJsonOptions);
            }

            var payloadString = payload.ReadToString();

            throw new HttpResponseException(code, payloadString);
        }
    }

}