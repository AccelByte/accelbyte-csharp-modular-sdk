// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;

using AccelByte.Sdk.Api.Reporting.Model;
using AccelByte.Sdk.Api.Reporting.Operation;

namespace AccelByte.Sdk.Api.Reporting.Wrapper
{
    public class AdminReasons
    {
        private readonly IAccelByteSdk _sdk;

        private string _CustomBasePath = String.Empty;

        public AdminReasons(IAccelByteSdk sdk)
        {
            _sdk = sdk;
        }

        public AdminReasons(IAccelByteSdk sdk, string customBasePath)
        {
            _sdk = sdk;
            _CustomBasePath = customBasePath;
        }

        #region Operation Builders
        public AdminListReasonGroups.AdminListReasonGroupsBuilder AdminListReasonGroupsOp
        {
            get
            {
                var opBuilder = new Operation.AdminListReasonGroups.AdminListReasonGroupsBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public CreateReasonGroup.CreateReasonGroupBuilder CreateReasonGroupOp
        {
            get
            {
                var opBuilder = new Operation.CreateReasonGroup.CreateReasonGroupBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public GetReasonGroup.GetReasonGroupBuilder GetReasonGroupOp
        {
            get
            {
                var opBuilder = new Operation.GetReasonGroup.GetReasonGroupBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public DeleteReasonGroup.DeleteReasonGroupBuilder DeleteReasonGroupOp
        {
            get
            {
                var opBuilder = new Operation.DeleteReasonGroup.DeleteReasonGroupBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public UpdateReasonGroup.UpdateReasonGroupBuilder UpdateReasonGroupOp
        {
            get
            {
                var opBuilder = new Operation.UpdateReasonGroup.UpdateReasonGroupBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminGetReasons.AdminGetReasonsBuilder AdminGetReasonsOp
        {
            get
            {
                var opBuilder = new Operation.AdminGetReasons.AdminGetReasonsBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public CreateReason.CreateReasonBuilder CreateReasonOp
        {
            get
            {
                var opBuilder = new Operation.CreateReason.CreateReasonBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminGetAllReasons.AdminGetAllReasonsBuilder AdminGetAllReasonsOp
        {
            get
            {
                var opBuilder = new Operation.AdminGetAllReasons.AdminGetAllReasonsBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminGetUnusedReasons.AdminGetUnusedReasonsBuilder AdminGetUnusedReasonsOp
        {
            get
            {
                var opBuilder = new Operation.AdminGetUnusedReasons.AdminGetUnusedReasonsBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminGetReason.AdminGetReasonBuilder AdminGetReasonOp
        {
            get
            {
                var opBuilder = new Operation.AdminGetReason.AdminGetReasonBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public DeleteReason.DeleteReasonBuilder DeleteReasonOp
        {
            get
            {
                var opBuilder = new Operation.DeleteReason.DeleteReasonBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public UpdateReason.UpdateReasonBuilder UpdateReasonOp
        {
            get
            {
                var opBuilder = new Operation.UpdateReason.UpdateReasonBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        #endregion

        public AdminListReasonGroups.Response AdminListReasonGroups(AdminListReasonGroups input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminListReasonGroups.Response> AdminListReasonGroupsAsync(AdminListReasonGroups input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public CreateReasonGroup.Response CreateReasonGroup(CreateReasonGroup input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<CreateReasonGroup.Response> CreateReasonGroupAsync(CreateReasonGroup input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public GetReasonGroup.Response GetReasonGroup(GetReasonGroup input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<GetReasonGroup.Response> GetReasonGroupAsync(GetReasonGroup input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public DeleteReasonGroup.Response DeleteReasonGroup(DeleteReasonGroup input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<DeleteReasonGroup.Response> DeleteReasonGroupAsync(DeleteReasonGroup input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public UpdateReasonGroup.Response UpdateReasonGroup(UpdateReasonGroup input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<UpdateReasonGroup.Response> UpdateReasonGroupAsync(UpdateReasonGroup input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminGetReasons.Response AdminGetReasons(AdminGetReasons input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminGetReasons.Response> AdminGetReasonsAsync(AdminGetReasons input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public CreateReason.Response CreateReason(CreateReason input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<CreateReason.Response> CreateReasonAsync(CreateReason input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminGetAllReasons.Response AdminGetAllReasons(AdminGetAllReasons input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminGetAllReasons.Response> AdminGetAllReasonsAsync(AdminGetAllReasons input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminGetUnusedReasons.Response AdminGetUnusedReasons(AdminGetUnusedReasons input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminGetUnusedReasons.Response> AdminGetUnusedReasonsAsync(AdminGetUnusedReasons input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminGetReason.Response AdminGetReason(AdminGetReason input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminGetReason.Response> AdminGetReasonAsync(AdminGetReason input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public DeleteReason.Response DeleteReason(DeleteReason input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<DeleteReason.Response> DeleteReasonAsync(DeleteReason input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public UpdateReason.Response UpdateReason(UpdateReason input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<UpdateReason.Response> UpdateReasonAsync(UpdateReason input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
    }
}