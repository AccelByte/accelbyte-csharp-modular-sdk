// Copyright (c) 2022-2023 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Sessionhistory.Model;

namespace AccelByte.Sdk.Api.Sessionhistory.Operation
{
    /// <summary>
    /// queryDetailTickMatchPoolMatches
    ///
    /// Query xray match pool tick matches by tick id.
    /// </summary>
    public class QueryDetailTickMatchPoolMatches : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static QueryDetailTickMatchPoolMatchesBuilder Builder { get => new QueryDetailTickMatchPoolMatchesBuilder(); }

        public class QueryDetailTickMatchPoolMatchesBuilder
            : OperationBuilder<QueryDetailTickMatchPoolMatchesBuilder>
        {





            internal QueryDetailTickMatchPoolMatchesBuilder() { }

            internal QueryDetailTickMatchPoolMatchesBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }






            public QueryDetailTickMatchPoolMatches Build(
                string namespace_,
                string podName,
                string poolName,
                string tickId
            )
            {
                QueryDetailTickMatchPoolMatches op = new QueryDetailTickMatchPoolMatches(this,
                    namespace_,
                    podName,
                    poolName,
                    tickId
                );

                op.SetBaseFields<QueryDetailTickMatchPoolMatchesBuilder>(this);
                return op;
            }

            public Model.ApimodelsXRayMatchPoolPodTickMatchResponse? Execute(
                string namespace_,
                string podName,
                string poolName,
                string tickId
            )
            {
                QueryDetailTickMatchPoolMatches op = Build(
                    namespace_,
                    podName,
                    poolName,
                    tickId
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
        }

        private QueryDetailTickMatchPoolMatches(QueryDetailTickMatchPoolMatchesBuilder builder,
            string namespace_,
            string podName,
            string poolName,
            string tickId
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["podName"] = podName;
            PathParams["poolName"] = poolName;
            PathParams["tickId"] = tickId;







            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public QueryDetailTickMatchPoolMatches(
            string namespace_,
            string podName,
            string poolName,
            string tickId
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["podName"] = podName;
            PathParams["poolName"] = poolName;
            PathParams["tickId"] = tickId;







            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/sessionhistory/v2/admin/namespaces/{namespace}/xray/match-pools/{poolName}/pods/{podName}/ticks/{tickId}/matches";

        public override HttpMethod Method => HttpMethod.Get;

        public override List<string> Consumes => new() { "application/json" };

        public override List<string> Produces => new() { "application/json" };

        public Model.ApimodelsXRayMatchPoolPodTickMatchResponse? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                return JsonSerializer.Deserialize<Model.ApimodelsXRayMatchPoolPodTickMatchResponse>(payload, ResponseJsonOptions);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.ApimodelsXRayMatchPoolPodTickMatchResponse>(payload, ResponseJsonOptions);
            }

            var payloadString = payload.ReadToString();

            throw new HttpResponseException(code, payloadString);
        }
    }

}