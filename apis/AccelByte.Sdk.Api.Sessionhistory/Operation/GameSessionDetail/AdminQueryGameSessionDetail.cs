// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Sessionhistory.Model;

namespace AccelByte.Sdk.Api.Sessionhistory.Operation
{
    /// <summary>
    /// adminQueryGameSessionDetail
    ///
    /// Get all game sessions.
    /// </summary>
    public class AdminQueryGameSessionDetail : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static AdminQueryGameSessionDetailBuilder Builder { get => new AdminQueryGameSessionDetailBuilder(); }

        public class AdminQueryGameSessionDetailBuilder
            : OperationBuilder<AdminQueryGameSessionDetailBuilder>
        {

            public string? EndDate { get; set; }

            public string? GameSessionID { get; set; }

            public long? Limit { get; set; }

            public long? Offset { get; set; }

            public string? Order { get; set; }

            public string? OrderBy { get; set; }

            public string? StartDate { get; set; }

            public string? UserID { get; set; }





            internal AdminQueryGameSessionDetailBuilder() { }

            internal AdminQueryGameSessionDetailBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }


            public AdminQueryGameSessionDetailBuilder SetEndDate(string _endDate)
            {
                EndDate = _endDate;
                return this;
            }

            public AdminQueryGameSessionDetailBuilder SetGameSessionID(string _gameSessionID)
            {
                GameSessionID = _gameSessionID;
                return this;
            }

            public AdminQueryGameSessionDetailBuilder SetLimit(long _limit)
            {
                Limit = _limit;
                return this;
            }

            public AdminQueryGameSessionDetailBuilder SetOffset(long _offset)
            {
                Offset = _offset;
                return this;
            }

            public AdminQueryGameSessionDetailBuilder SetOrder(string _order)
            {
                Order = _order;
                return this;
            }

            public AdminQueryGameSessionDetailBuilder SetOrderBy(string _orderBy)
            {
                OrderBy = _orderBy;
                return this;
            }

            public AdminQueryGameSessionDetailBuilder SetStartDate(string _startDate)
            {
                StartDate = _startDate;
                return this;
            }

            public AdminQueryGameSessionDetailBuilder SetUserID(string _userID)
            {
                UserID = _userID;
                return this;
            }





            public AdminQueryGameSessionDetail Build(
                string namespace_
            )
            {
                AdminQueryGameSessionDetail op = new AdminQueryGameSessionDetail(this,
                    namespace_                    
                );

                op.SetBaseFields<AdminQueryGameSessionDetailBuilder>(this);
                return op;
            }

            public AdminQueryGameSessionDetail.Response Execute(
                string namespace_
            )
            {
                AdminQueryGameSessionDetail op = Build(
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
            public async Task<AdminQueryGameSessionDetail.Response> ExecuteAsync(
                string namespace_
            )
            {
                AdminQueryGameSessionDetail op = Build(
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
        }

        private AdminQueryGameSessionDetail(AdminQueryGameSessionDetailBuilder builder,
            string namespace_
        )
        {
            PathParams["namespace"] = namespace_;
            
            if (builder.EndDate is not null) QueryParams["endDate"] = builder.EndDate;
            if (builder.GameSessionID is not null) QueryParams["gameSessionID"] = builder.GameSessionID;
            if (builder.Limit != null) QueryParams["limit"] = Convert.ToString(builder.Limit)!;
            if (builder.Offset != null) QueryParams["offset"] = Convert.ToString(builder.Offset)!;
            if (builder.Order is not null) QueryParams["order"] = builder.Order;
            if (builder.OrderBy is not null) QueryParams["orderBy"] = builder.OrderBy;
            if (builder.StartDate is not null) QueryParams["startDate"] = builder.StartDate;
            if (builder.UserID is not null) QueryParams["userID"] = builder.UserID;
            

            
            
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        #region Response Part        
        public class Response : ApiResponse<Model.ApimodelsGameSessionDetailQueryResponse>
        {

            public ResponseError? Error400 { get; set; } = null;

            public ResponseError? Error401 { get; set; } = null;

            public ResponseError? Error403 { get; set; } = null;

            public ResponseError? Error500 { get; set; } = null;


            protected override string GetFullOperationId() => "Sessionhistory::GameSessionDetail::AdminQueryGameSessionDetail";
        }

        #endregion

        public AdminQueryGameSessionDetail(
            string namespace_,            
            string? endDate,            
            string? gameSessionID,            
            long? limit,            
            long? offset,            
            string? order,            
            string? orderBy,            
            string? startDate,            
            string? userID            
        )
        {
            PathParams["namespace"] = namespace_;
            
            if (endDate is not null) QueryParams["endDate"] = endDate;
            if (gameSessionID is not null) QueryParams["gameSessionID"] = gameSessionID;
            if (limit != null) QueryParams["limit"] = Convert.ToString(limit)!;
            if (offset != null) QueryParams["offset"] = Convert.ToString(offset)!;
            if (order is not null) QueryParams["order"] = order;
            if (orderBy is not null) QueryParams["orderBy"] = orderBy;
            if (startDate is not null) QueryParams["startDate"] = startDate;
            if (userID is not null) QueryParams["userID"] = userID;
            

            
            
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/sessionhistory/v1/admin/namespaces/{namespace}/gamesessions";

        public override HttpMethod Method => HttpMethod.Get;

        public override List<string> Consumes => new() { "application/json" };

        public override List<string> Produces => new() { "application/json" };
        
        public AdminQueryGameSessionDetail.Response ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            var response = new AdminQueryGameSessionDetail.Response()
            {
                StatusCode = code,
                ContentType = contentType
            };

            if (code == (HttpStatusCode)204)
            {
                response.IsSuccess = true;
            }
            else if ((code == (HttpStatusCode)201) || (code == (HttpStatusCode)202) || (code == (HttpStatusCode)200))
            {
                response.Data = JsonSerializer.Deserialize<Model.ApimodelsGameSessionDetailQueryResponse>(payload, ResponseJsonOptions);
                response.IsSuccess = true;
            }
            else if (code == (HttpStatusCode)400)
            {
                response.Error400 = JsonSerializer.Deserialize<ResponseError>(payload, ResponseJsonOptions);
                response.Error = response.Error400!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)401)
            {
                response.Error401 = JsonSerializer.Deserialize<ResponseError>(payload, ResponseJsonOptions);
                response.Error = response.Error401!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)403)
            {
                response.Error403 = JsonSerializer.Deserialize<ResponseError>(payload, ResponseJsonOptions);
                response.Error = response.Error403!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)500)
            {
                response.Error500 = JsonSerializer.Deserialize<ResponseError>(payload, ResponseJsonOptions);
                response.Error = response.Error500!.TranslateToApiError();
            }

            return response;
        }
    }

}