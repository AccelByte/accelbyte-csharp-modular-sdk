// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Gdpr.Model;

namespace AccelByte.Sdk.Api.Gdpr.Operation
{
    /// <summary>
    /// S2SGetListFinishedPersonalDataRequest
    ///
    /// Scope: account
    /// 
    /// Get list of finished personal data requests based on the finished time period.
    /// Unfinished personal data requests will not appear here, i.e. have Status **Pending**, **In-Progress** or **Canceled**.
    /// 
    /// **Anonymize userId for deleted account:**
    /// For user accounts that have been deleted, the **userId** field in this API will be anonymized automatically after **7 days** from the success deletion.
    /// This measure is implemented to ensure compliance with GDPR regulations. Please make sure to synchronize the data from this API before it undergoes anonymization.
    /// 
    /// ---
    /// ## This API for S2S integration purpose only
    /// </summary>
    public class S2SGetListFinishedPersonalDataRequest : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static S2SGetListFinishedPersonalDataRequestBuilder Builder { get => new S2SGetListFinishedPersonalDataRequestBuilder(); }

        public class S2SGetListFinishedPersonalDataRequestBuilder
            : OperationBuilder<S2SGetListFinishedPersonalDataRequestBuilder>
        {





            internal S2SGetListFinishedPersonalDataRequestBuilder() { }

            internal S2SGetListFinishedPersonalDataRequestBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }






            public S2SGetListFinishedPersonalDataRequest Build(
                string namespace_,
                string end,
                string start
            )
            {
                S2SGetListFinishedPersonalDataRequest op = new S2SGetListFinishedPersonalDataRequest(this,
                    namespace_,
                    end,
                    start
                );

                op.SetBaseFields<S2SGetListFinishedPersonalDataRequestBuilder>(this);
                return op;
            }

            public Model.DtoListFinishedDataRequests? Execute(
                string namespace_,
                string end,
                string start
            )
            {
                S2SGetListFinishedPersonalDataRequest op = Build(
                    namespace_,
                    end,
                    start
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
            public async Task<Model.DtoListFinishedDataRequests?> ExecuteAsync(
                string namespace_,
                string end,
                string start
            )
            {
                S2SGetListFinishedPersonalDataRequest op = Build(
                    namespace_,
                    end,
                    start
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
        }

        private S2SGetListFinishedPersonalDataRequest(S2SGetListFinishedPersonalDataRequestBuilder builder,
            string namespace_,
            string end,
            string start
        )
        {
            PathParams["namespace"] = namespace_;

            if (end is not null) QueryParams["end"] = end;
            if (start is not null) QueryParams["start"] = start;






            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public S2SGetListFinishedPersonalDataRequest(
            string namespace_,
            string end,
            string start
        )
        {
            PathParams["namespace"] = namespace_;

            if (end is not null) QueryParams["end"] = end;
            if (start is not null) QueryParams["start"] = start;






            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/gdpr/s2s/namespaces/{namespace}/requests/finished";

        public override HttpMethod Method => HttpMethod.Get;

        public override List<string> Consumes => new() { "application/json" };

        public override List<string> Produces => new() { "application/json" };

        public Model.DtoListFinishedDataRequests? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                return JsonSerializer.Deserialize<Model.DtoListFinishedDataRequests>(payload, ResponseJsonOptions);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.DtoListFinishedDataRequests>(payload, ResponseJsonOptions);
            }

            var payloadString = payload.ReadToString();

            throw new HttpResponseException(code, payloadString);
        }
    }

}