// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Gdpr.Model;

namespace AccelByte.Sdk.Api.Gdpr.Operation
{
    /// <summary>
    /// AdminCancelUserPersonalDataRequest
    ///
    /// Cancel user's personal data requests
    /// Scope: account
    /// </summary>
    public class AdminCancelUserPersonalDataRequest : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static AdminCancelUserPersonalDataRequestBuilder Builder { get => new AdminCancelUserPersonalDataRequestBuilder(); }

        public class AdminCancelUserPersonalDataRequestBuilder
            : OperationBuilder<AdminCancelUserPersonalDataRequestBuilder>
        {





            internal AdminCancelUserPersonalDataRequestBuilder() { }

            internal AdminCancelUserPersonalDataRequestBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }






            public AdminCancelUserPersonalDataRequest Build(
                string namespace_,
                string requestDate,
                string userId
            )
            {
                AdminCancelUserPersonalDataRequest op = new AdminCancelUserPersonalDataRequest(this,
                    namespace_,                    
                    requestDate,                    
                    userId                    
                );

                op.SetBaseFields<AdminCancelUserPersonalDataRequestBuilder>(this);
                return op;
            }

            public AdminCancelUserPersonalDataRequest.Response Execute(
                string namespace_,
                string requestDate,
                string userId
            )
            {
                AdminCancelUserPersonalDataRequest op = Build(
                    namespace_,
                    requestDate,
                    userId
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
            public async Task<AdminCancelUserPersonalDataRequest.Response> ExecuteAsync(
                string namespace_,
                string requestDate,
                string userId
            )
            {
                AdminCancelUserPersonalDataRequest op = Build(
                    namespace_,
                    requestDate,
                    userId
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
        }

        private AdminCancelUserPersonalDataRequest(AdminCancelUserPersonalDataRequestBuilder builder,
            string namespace_,
            string requestDate,
            string userId
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["requestDate"] = requestDate;
            PathParams["userId"] = userId;
            
            

            
            
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        #region Response Part        
        public class Response : ApiResponse
        {

            public ResponseError? Error401 { get; set; } = null;

            public ResponseError? Error404 { get; set; } = null;

            public ResponseError? Error409 { get; set; } = null;

            public ResponseError? Error500 { get; set; } = null;


            protected override string GetFullOperationId() => "Gdpr::DataRetrieval::AdminCancelUserPersonalDataRequest";
        }

        #endregion

        public AdminCancelUserPersonalDataRequest(
            string namespace_,            
            string requestDate,            
            string userId            
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["requestDate"] = requestDate;
            PathParams["userId"] = userId;
            
            

            
            
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/gdpr/admin/namespaces/{namespace}/users/{userId}/requests/{requestDate}";

        public override HttpMethod Method => HttpMethod.Delete;

        public override List<string> Consumes => new() { "application/json" };

        public override List<string> Produces => new() { "application/json" };
        
        public AdminCancelUserPersonalDataRequest.Response ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            var response = new AdminCancelUserPersonalDataRequest.Response()
            {
                StatusCode = code,
                ContentType = contentType
            };

            int statusCode = (int)code;
            if (statusCode >= 200 && statusCode < 300)
            {
                response.IsSuccess = true;
            }
            else if (code == (HttpStatusCode)401)
            {
                response.Error401 = JsonSerializer.Deserialize<ResponseError>(payload, ResponseJsonOptions);
                response.Error = response.Error401!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)404)
            {
                response.Error404 = JsonSerializer.Deserialize<ResponseError>(payload, ResponseJsonOptions);
                response.Error = response.Error404!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)409)
            {
                response.Error409 = JsonSerializer.Deserialize<ResponseError>(payload, ResponseJsonOptions);
                response.Error = response.Error409!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)500)
            {
                response.Error500 = JsonSerializer.Deserialize<ResponseError>(payload, ResponseJsonOptions);
                response.Error = response.Error500!.TranslateToApiError();
            }

            return response;
        }
    }

}