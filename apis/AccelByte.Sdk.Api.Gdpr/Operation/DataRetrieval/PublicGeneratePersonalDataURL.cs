// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Gdpr.Model;

namespace AccelByte.Sdk.Api.Gdpr.Operation
{
    /// <summary>
    /// PublicGeneratePersonalDataURL
    ///
    /// Generate personal data download url
    /// Requires valid user access token
    /// Scope: account
    /// 
    /// ### Request Header:
    /// - **Content-Type: application/x-www-form-urlencoded**
    /// </summary>
    public class PublicGeneratePersonalDataURL : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static PublicGeneratePersonalDataURLBuilder Builder { get => new PublicGeneratePersonalDataURLBuilder(); }

        public class PublicGeneratePersonalDataURLBuilder
            : OperationBuilder<PublicGeneratePersonalDataURLBuilder>
        {





            internal PublicGeneratePersonalDataURLBuilder() { }

            internal PublicGeneratePersonalDataURLBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }






            public PublicGeneratePersonalDataURL Build(
                string password,
                string namespace_,
                string requestDate,
                string userId
            )
            {
                PublicGeneratePersonalDataURL op = new PublicGeneratePersonalDataURL(this,
                    password,
                    namespace_,
                    requestDate,
                    userId
                );

                op.SetBaseFields<PublicGeneratePersonalDataURLBuilder>(this);
                return op;
            }

            public PublicGeneratePersonalDataURL.Response Execute(
                string password,
                string namespace_,
                string requestDate,
                string userId
            )
            {
                PublicGeneratePersonalDataURL op = Build(
                    password,
                    namespace_,
                    requestDate,
                    userId
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
            public async Task<PublicGeneratePersonalDataURL.Response> ExecuteAsync(
                string password,
                string namespace_,
                string requestDate,
                string userId
            )
            {
                PublicGeneratePersonalDataURL op = Build(
                    password,
                    namespace_,
                    requestDate,
                    userId
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
        }

        private PublicGeneratePersonalDataURL(PublicGeneratePersonalDataURLBuilder builder,
            string password,
            string namespace_,
            string requestDate,
            string userId
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["requestDate"] = requestDate;
            PathParams["userId"] = userId;


            if (password is not null) FormParams["password"] = password;





            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        #region Response Part        
        public class Response : ApiResponse<Model.ModelsUserDataURL>
        {

            public ResponseError? Error400 { get; set; } = null;

            public ResponseError? Error401 { get; set; } = null;

            public ResponseError? Error404 { get; set; } = null;

            public ResponseError? Error500 { get; set; } = null;


            protected override string GetFullOperationId() => "Gdpr::DataRetrieval::PublicGeneratePersonalDataURL";
        }

        #endregion

        public PublicGeneratePersonalDataURL(
            string namespace_,
            string requestDate,
            string userId,
            string password
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["requestDate"] = requestDate;
            PathParams["userId"] = userId;


            if (password is not null) FormParams["password"] = password;





            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/gdpr/public/namespaces/{namespace}/users/{userId}/requests/{requestDate}/generate";

        public override HttpMethod Method => HttpMethod.Post;

        public override List<string> Consumes => new() { "application/x-www-form-urlencoded" };

        public override List<string> Produces => new() { "application/json" };

        public PublicGeneratePersonalDataURL.Response ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            var response = new PublicGeneratePersonalDataURL.Response()
            {
                StatusCode = code,
                ContentType = contentType
            };

            if (code == (HttpStatusCode)204)
            {
                response.IsSuccess = true;
            }
            else if ((code == (HttpStatusCode)201) || (code == (HttpStatusCode)202) || (code == (HttpStatusCode)200))
            {
                response.Data = JsonSerializer.Deserialize<Model.ModelsUserDataURL>(payload, ResponseJsonOptions);
                response.IsSuccess = true;
            }
            else if (code == (HttpStatusCode)400)
            {
                response.Error400 = JsonSerializer.Deserialize<ResponseError>(payload, ResponseJsonOptions);
                response.Error = response.Error400!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)401)
            {
                response.Error401 = JsonSerializer.Deserialize<ResponseError>(payload, ResponseJsonOptions);
                response.Error = response.Error401!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)404)
            {
                response.Error404 = JsonSerializer.Deserialize<ResponseError>(payload, ResponseJsonOptions);
                response.Error = response.Error404!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)500)
            {
                response.Error500 = JsonSerializer.Deserialize<ResponseError>(payload, ResponseJsonOptions);
                response.Error = response.Error500!.TranslateToApiError();
            }

            return response;
        }
    }

}