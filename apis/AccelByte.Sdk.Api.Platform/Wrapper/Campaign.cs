// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;

using AccelByte.Sdk.Api.Platform.Model;
using AccelByte.Sdk.Api.Platform.Operation;

namespace AccelByte.Sdk.Api.Platform.Wrapper
{
    public class Campaign
    {
        private readonly IAccelByteSdk _sdk;

        private string _CustomBasePath = String.Empty;

        public Campaign(IAccelByteSdk sdk)
        {
            _sdk = sdk;
        }

        public Campaign(IAccelByteSdk sdk, string customBasePath)
        {
            _sdk = sdk;
            _CustomBasePath = customBasePath;
        }

        #region Operation Builders
        public QueryCampaigns.QueryCampaignsBuilder QueryCampaignsOp
        {
            get
            {
                var opBuilder = new Operation.QueryCampaigns.QueryCampaignsBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public CreateCampaign.CreateCampaignBuilder CreateCampaignOp
        {
            get
            {
                var opBuilder = new Operation.CreateCampaign.CreateCampaignBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public GetCampaign.GetCampaignBuilder GetCampaignOp
        {
            get
            {
                var opBuilder = new Operation.GetCampaign.GetCampaignBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public UpdateCampaign.UpdateCampaignBuilder UpdateCampaignOp
        {
            get
            {
                var opBuilder = new Operation.UpdateCampaign.UpdateCampaignBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public GetCampaignDynamic.GetCampaignDynamicBuilder GetCampaignDynamicOp
        {
            get
            {
                var opBuilder = new Operation.GetCampaignDynamic.GetCampaignDynamicBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public QueryCodes.QueryCodesBuilder QueryCodesOp
        {
            get
            {
                var opBuilder = new Operation.QueryCodes.QueryCodesBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public CreateCodes.CreateCodesBuilder CreateCodesOp
        {
            get
            {
                var opBuilder = new Operation.CreateCodes.CreateCodesBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public Download.DownloadBuilder DownloadOp
        {
            get
            {
                var opBuilder = new Operation.Download.DownloadBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public BulkDisableCodes.BulkDisableCodesBuilder BulkDisableCodesOp
        {
            get
            {
                var opBuilder = new Operation.BulkDisableCodes.BulkDisableCodesBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public BulkEnableCodes.BulkEnableCodesBuilder BulkEnableCodesOp
        {
            get
            {
                var opBuilder = new Operation.BulkEnableCodes.BulkEnableCodesBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public QueryRedeemHistory.QueryRedeemHistoryBuilder QueryRedeemHistoryOp
        {
            get
            {
                var opBuilder = new Operation.QueryRedeemHistory.QueryRedeemHistoryBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public GetCode.GetCodeBuilder GetCodeOp
        {
            get
            {
                var opBuilder = new Operation.GetCode.GetCodeBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public DisableCode.DisableCodeBuilder DisableCodeOp
        {
            get
            {
                var opBuilder = new Operation.DisableCode.DisableCodeBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public EnableCode.EnableCodeBuilder EnableCodeOp
        {
            get
            {
                var opBuilder = new Operation.EnableCode.EnableCodeBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public ApplyUserRedemption.ApplyUserRedemptionBuilder ApplyUserRedemptionOp
        {
            get
            {
                var opBuilder = new Operation.ApplyUserRedemption.ApplyUserRedemptionBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        #endregion

        public Model.CampaignPagingSlicedResult? QueryCampaigns(QueryCampaigns input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.CampaignPagingSlicedResult?> QueryCampaignsAsync(QueryCampaigns input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.CampaignInfo? CreateCampaign(CreateCampaign input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.CampaignInfo?> CreateCampaignAsync(CreateCampaign input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.CampaignInfo? GetCampaign(GetCampaign input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.CampaignInfo?> GetCampaignAsync(GetCampaign input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.CampaignInfo? UpdateCampaign(UpdateCampaign input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.CampaignInfo?> UpdateCampaignAsync(UpdateCampaign input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.CampaignDynamicInfo? GetCampaignDynamic(GetCampaignDynamic input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.CampaignDynamicInfo?> GetCampaignDynamicAsync(GetCampaignDynamic input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.CodeInfoPagingSlicedResult? QueryCodes(QueryCodes input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.CodeInfoPagingSlicedResult?> QueryCodesAsync(QueryCodes input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.CodeCreateResult? CreateCodes(CreateCodes input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.CodeCreateResult?> CreateCodesAsync(CreateCodes input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Stream? Download(Download input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Stream?> DownloadAsync(Download input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.BulkOperationResult? BulkDisableCodes(BulkDisableCodes input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.BulkOperationResult?> BulkDisableCodesAsync(BulkDisableCodes input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.BulkOperationResult? BulkEnableCodes(BulkEnableCodes input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.BulkOperationResult?> BulkEnableCodesAsync(BulkEnableCodes input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.RedeemHistoryPagingSlicedResult? QueryRedeemHistory(QueryRedeemHistory input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.RedeemHistoryPagingSlicedResult?> QueryRedeemHistoryAsync(QueryRedeemHistory input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.CodeInfo? GetCode(GetCode input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.CodeInfo?> GetCodeAsync(GetCode input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.CodeInfo? DisableCode(DisableCode input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.CodeInfo?> DisableCodeAsync(DisableCode input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.CodeInfo? EnableCode(EnableCode input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.CodeInfo?> EnableCodeAsync(EnableCode input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.RedeemResult? ApplyUserRedemption(ApplyUserRedemption input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.RedeemResult?> ApplyUserRedemptionAsync(ApplyUserRedemption input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
    }
}