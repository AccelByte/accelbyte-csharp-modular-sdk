// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;

using AccelByte.Sdk.Api.Platform.Model;
using AccelByte.Sdk.Api.Platform.Operation;

namespace AccelByte.Sdk.Api.Platform.Wrapper
{
    public class Campaign
    {
        private readonly IAccelByteSdk _sdk;

        private string _CustomBasePath = String.Empty;

        public Campaign(IAccelByteSdk sdk)
        {
            _sdk = sdk;
        }

        public Campaign(IAccelByteSdk sdk, string customBasePath)
        {
            _sdk = sdk;
            _CustomBasePath = customBasePath;
        }

        #region Operation Builders
        public QueryCampaigns.QueryCampaignsBuilder QueryCampaignsOp
        {
            get
            {
                var opBuilder = new Operation.QueryCampaigns.QueryCampaignsBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public CreateCampaign.CreateCampaignBuilder CreateCampaignOp
        {
            get
            {
                var opBuilder = new Operation.CreateCampaign.CreateCampaignBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public GetCampaign.GetCampaignBuilder GetCampaignOp
        {
            get
            {
                var opBuilder = new Operation.GetCampaign.GetCampaignBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public UpdateCampaign.UpdateCampaignBuilder UpdateCampaignOp
        {
            get
            {
                var opBuilder = new Operation.UpdateCampaign.UpdateCampaignBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public RenameBatch.RenameBatchBuilder RenameBatchOp
        {
            get
            {
                var opBuilder = new Operation.RenameBatch.RenameBatchBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public QueryCampaignBatchNames.QueryCampaignBatchNamesBuilder QueryCampaignBatchNamesOp
        {
            get
            {
                var opBuilder = new Operation.QueryCampaignBatchNames.QueryCampaignBatchNamesBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public GetCampaignDynamic.GetCampaignDynamicBuilder GetCampaignDynamicOp
        {
            get
            {
                var opBuilder = new Operation.GetCampaignDynamic.GetCampaignDynamicBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public QueryCodes.QueryCodesBuilder QueryCodesOp
        {
            get
            {
                var opBuilder = new Operation.QueryCodes.QueryCodesBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public CreateCodes.CreateCodesBuilder CreateCodesOp
        {
            get
            {
                var opBuilder = new Operation.CreateCodes.CreateCodesBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public Download.DownloadBuilder DownloadOp
        {
            get
            {
                var opBuilder = new Operation.Download.DownloadBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public BulkDisableCodes.BulkDisableCodesBuilder BulkDisableCodesOp
        {
            get
            {
                var opBuilder = new Operation.BulkDisableCodes.BulkDisableCodesBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public BulkEnableCodes.BulkEnableCodesBuilder BulkEnableCodesOp
        {
            get
            {
                var opBuilder = new Operation.BulkEnableCodes.BulkEnableCodesBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public QueryRedeemHistory.QueryRedeemHistoryBuilder QueryRedeemHistoryOp
        {
            get
            {
                var opBuilder = new Operation.QueryRedeemHistory.QueryRedeemHistoryBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public GetCode.GetCodeBuilder GetCodeOp
        {
            get
            {
                var opBuilder = new Operation.GetCode.GetCodeBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public DisableCode.DisableCodeBuilder DisableCodeOp
        {
            get
            {
                var opBuilder = new Operation.DisableCode.DisableCodeBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public EnableCode.EnableCodeBuilder EnableCodeOp
        {
            get
            {
                var opBuilder = new Operation.EnableCode.EnableCodeBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public ApplyUserRedemption.ApplyUserRedemptionBuilder ApplyUserRedemptionOp
        {
            get
            {
                var opBuilder = new Operation.ApplyUserRedemption.ApplyUserRedemptionBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        #endregion

        public QueryCampaigns.Response QueryCampaigns(QueryCampaigns input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<QueryCampaigns.Response> QueryCampaignsAsync(QueryCampaigns input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public CreateCampaign.Response CreateCampaign(CreateCampaign input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<CreateCampaign.Response> CreateCampaignAsync(CreateCampaign input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public GetCampaign.Response GetCampaign(GetCampaign input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<GetCampaign.Response> GetCampaignAsync(GetCampaign input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public UpdateCampaign.Response UpdateCampaign(UpdateCampaign input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<UpdateCampaign.Response> UpdateCampaignAsync(UpdateCampaign input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public RenameBatch.Response RenameBatch(RenameBatch input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<RenameBatch.Response> RenameBatchAsync(RenameBatch input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public QueryCampaignBatchNames.Response QueryCampaignBatchNames(QueryCampaignBatchNames input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<QueryCampaignBatchNames.Response> QueryCampaignBatchNamesAsync(QueryCampaignBatchNames input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public GetCampaignDynamic.Response GetCampaignDynamic(GetCampaignDynamic input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<GetCampaignDynamic.Response> GetCampaignDynamicAsync(GetCampaignDynamic input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public QueryCodes.Response QueryCodes(QueryCodes input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<QueryCodes.Response> QueryCodesAsync(QueryCodes input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public CreateCodes.Response CreateCodes(CreateCodes input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<CreateCodes.Response> CreateCodesAsync(CreateCodes input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Download.Response Download(Download input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Download.Response> DownloadAsync(Download input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public BulkDisableCodes.Response BulkDisableCodes(BulkDisableCodes input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<BulkDisableCodes.Response> BulkDisableCodesAsync(BulkDisableCodes input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public BulkEnableCodes.Response BulkEnableCodes(BulkEnableCodes input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<BulkEnableCodes.Response> BulkEnableCodesAsync(BulkEnableCodes input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public QueryRedeemHistory.Response QueryRedeemHistory(QueryRedeemHistory input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<QueryRedeemHistory.Response> QueryRedeemHistoryAsync(QueryRedeemHistory input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public GetCode.Response GetCode(GetCode input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<GetCode.Response> GetCodeAsync(GetCode input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public DisableCode.Response DisableCode(DisableCode input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<DisableCode.Response> DisableCodeAsync(DisableCode input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public EnableCode.Response EnableCode(EnableCode input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<EnableCode.Response> EnableCodeAsync(EnableCode input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public ApplyUserRedemption.Response ApplyUserRedemption(ApplyUserRedemption input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<ApplyUserRedemption.Response> ApplyUserRedemptionAsync(ApplyUserRedemption input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
    }
}