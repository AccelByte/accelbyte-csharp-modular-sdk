// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;

using AccelByte.Sdk.Api.Platform.Model;
using AccelByte.Sdk.Api.Platform.Operation;

namespace AccelByte.Sdk.Api.Platform.Wrapper
{
    public class Item
    {
        private readonly IAccelByteSdk _sdk;

        private string _CustomBasePath = String.Empty;

        public Item(IAccelByteSdk sdk)
        {
            _sdk = sdk;
        }

        public Item(IAccelByteSdk sdk, string customBasePath)
        {
            _sdk = sdk;
            _CustomBasePath = customBasePath;
        }

        #region Operation Builders
        public ListItemTypeConfigs.ListItemTypeConfigsBuilder ListItemTypeConfigsOp
        {
            get
            {
                var opBuilder = new Operation.ListItemTypeConfigs.ListItemTypeConfigsBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public CreateItemTypeConfig.CreateItemTypeConfigBuilder CreateItemTypeConfigOp
        {
            get
            {
                var opBuilder = new Operation.CreateItemTypeConfig.CreateItemTypeConfigBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public SearchItemTypeConfig.SearchItemTypeConfigBuilder SearchItemTypeConfigOp
        {
            get
            {
                var opBuilder = new Operation.SearchItemTypeConfig.SearchItemTypeConfigBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public GetItemTypeConfig.GetItemTypeConfigBuilder GetItemTypeConfigOp
        {
            get
            {
                var opBuilder = new Operation.GetItemTypeConfig.GetItemTypeConfigBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public UpdateItemTypeConfig.UpdateItemTypeConfigBuilder UpdateItemTypeConfigOp
        {
            get
            {
                var opBuilder = new Operation.UpdateItemTypeConfig.UpdateItemTypeConfigBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public DeleteItemTypeConfig.DeleteItemTypeConfigBuilder DeleteItemTypeConfigOp
        {
            get
            {
                var opBuilder = new Operation.DeleteItemTypeConfig.DeleteItemTypeConfigBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public SyncInGameItem.SyncInGameItemBuilder SyncInGameItemOp
        {
            get
            {
                var opBuilder = new Operation.SyncInGameItem.SyncInGameItemBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public CreateItem.CreateItemBuilder CreateItemOp
        {
            get
            {
                var opBuilder = new Operation.CreateItem.CreateItemBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public GetItemByAppId.GetItemByAppIdBuilder GetItemByAppIdOp
        {
            get
            {
                var opBuilder = new Operation.GetItemByAppId.GetItemByAppIdBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public QueryItems.QueryItemsBuilder QueryItemsOp
        {
            get
            {
                var opBuilder = new Operation.QueryItems.QueryItemsBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public ListBasicItemsByFeatures.ListBasicItemsByFeaturesBuilder ListBasicItemsByFeaturesOp
        {
            get
            {
                var opBuilder = new Operation.ListBasicItemsByFeatures.ListBasicItemsByFeaturesBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public GetItems.GetItemsBuilder GetItemsOp
        {
            get
            {
                var opBuilder = new Operation.GetItems.GetItemsBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public GetItemBySku.GetItemBySkuBuilder GetItemBySkuOp
        {
            get
            {
                var opBuilder = new Operation.GetItemBySku.GetItemBySkuBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public GetLocaleItemBySku.GetLocaleItemBySkuBuilder GetLocaleItemBySkuOp
        {
            get
            {
                var opBuilder = new Operation.GetLocaleItemBySku.GetLocaleItemBySkuBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public GetEstimatedPrice.GetEstimatedPriceBuilder GetEstimatedPriceOp
        {
            get
            {
                var opBuilder = new Operation.GetEstimatedPrice.GetEstimatedPriceBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public GetItemIdBySku.GetItemIdBySkuBuilder GetItemIdBySkuOp
        {
            get
            {
                var opBuilder = new Operation.GetItemIdBySku.GetItemIdBySkuBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public GetBulkItemIdBySkus.GetBulkItemIdBySkusBuilder GetBulkItemIdBySkusOp
        {
            get
            {
                var opBuilder = new Operation.GetBulkItemIdBySkus.GetBulkItemIdBySkusBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public BulkGetLocaleItems.BulkGetLocaleItemsBuilder BulkGetLocaleItemsOp
        {
            get
            {
                var opBuilder = new Operation.BulkGetLocaleItems.BulkGetLocaleItemsBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public GetAvailablePredicateTypes.GetAvailablePredicateTypesBuilder GetAvailablePredicateTypesOp
        {
            get
            {
                var opBuilder = new Operation.GetAvailablePredicateTypes.GetAvailablePredicateTypesBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public ValidateItemPurchaseCondition.ValidateItemPurchaseConditionBuilder ValidateItemPurchaseConditionOp
        {
            get
            {
                var opBuilder = new Operation.ValidateItemPurchaseCondition.ValidateItemPurchaseConditionBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public BulkUpdateRegionData.BulkUpdateRegionDataBuilder BulkUpdateRegionDataOp
        {
            get
            {
                var opBuilder = new Operation.BulkUpdateRegionData.BulkUpdateRegionDataBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public SearchItems.SearchItemsBuilder SearchItemsOp
        {
            get
            {
                var opBuilder = new Operation.SearchItems.SearchItemsBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public QueryUncategorizedItems.QueryUncategorizedItemsBuilder QueryUncategorizedItemsOp
        {
            get
            {
                var opBuilder = new Operation.QueryUncategorizedItems.QueryUncategorizedItemsBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public GetItem.GetItemBuilder GetItemOp
        {
            get
            {
                var opBuilder = new Operation.GetItem.GetItemBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public UpdateItem.UpdateItemBuilder UpdateItemOp
        {
            get
            {
                var opBuilder = new Operation.UpdateItem.UpdateItemBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public DeleteItem.DeleteItemBuilder DeleteItemOp
        {
            get
            {
                var opBuilder = new Operation.DeleteItem.DeleteItemBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AcquireItem.AcquireItemBuilder AcquireItemOp
        {
            get
            {
                var opBuilder = new Operation.AcquireItem.AcquireItemBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public GetApp.GetAppBuilder GetAppOp
        {
            get
            {
                var opBuilder = new Operation.GetApp.GetAppBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public UpdateApp.UpdateAppBuilder UpdateAppOp
        {
            get
            {
                var opBuilder = new Operation.UpdateApp.UpdateAppBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public DisableItem.DisableItemBuilder DisableItemOp
        {
            get
            {
                var opBuilder = new Operation.DisableItem.DisableItemBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public GetItemDynamicData.GetItemDynamicDataBuilder GetItemDynamicDataOp
        {
            get
            {
                var opBuilder = new Operation.GetItemDynamicData.GetItemDynamicDataBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public EnableItem.EnableItemBuilder EnableItemOp
        {
            get
            {
                var opBuilder = new Operation.EnableItem.EnableItemBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public FeatureItem.FeatureItemBuilder FeatureItemOp
        {
            get
            {
                var opBuilder = new Operation.FeatureItem.FeatureItemBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public DefeatureItem.DefeatureItemBuilder DefeatureItemOp
        {
            get
            {
                var opBuilder = new Operation.DefeatureItem.DefeatureItemBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public GetLocaleItem.GetLocaleItemBuilder GetLocaleItemOp
        {
            get
            {
                var opBuilder = new Operation.GetLocaleItem.GetLocaleItemBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public UpdateItemPurchaseCondition.UpdateItemPurchaseConditionBuilder UpdateItemPurchaseConditionOp
        {
            get
            {
                var opBuilder = new Operation.UpdateItemPurchaseCondition.UpdateItemPurchaseConditionBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public QueryItemReferences.QueryItemReferencesBuilder QueryItemReferencesOp
        {
            get
            {
                var opBuilder = new Operation.QueryItemReferences.QueryItemReferencesBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public ReturnItem.ReturnItemBuilder ReturnItemOp
        {
            get
            {
                var opBuilder = new Operation.ReturnItem.ReturnItemBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public PublicGetItemByAppId.PublicGetItemByAppIdBuilder PublicGetItemByAppIdOp
        {
            get
            {
                var opBuilder = new Operation.PublicGetItemByAppId.PublicGetItemByAppIdBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public PublicQueryItems.PublicQueryItemsBuilder PublicQueryItemsOp
        {
            get
            {
                var opBuilder = new Operation.PublicQueryItems.PublicQueryItemsBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public PublicGetItemBySku.PublicGetItemBySkuBuilder PublicGetItemBySkuOp
        {
            get
            {
                var opBuilder = new Operation.PublicGetItemBySku.PublicGetItemBySkuBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public PublicGetEstimatedPrice.PublicGetEstimatedPriceBuilder PublicGetEstimatedPriceOp
        {
            get
            {
                var opBuilder = new Operation.PublicGetEstimatedPrice.PublicGetEstimatedPriceBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public PublicBulkGetItems.PublicBulkGetItemsBuilder PublicBulkGetItemsOp
        {
            get
            {
                var opBuilder = new Operation.PublicBulkGetItems.PublicBulkGetItemsBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public PublicValidateItemPurchaseCondition.PublicValidateItemPurchaseConditionBuilder PublicValidateItemPurchaseConditionOp
        {
            get
            {
                var opBuilder = new Operation.PublicValidateItemPurchaseCondition.PublicValidateItemPurchaseConditionBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public PublicSearchItems.PublicSearchItemsBuilder PublicSearchItemsOp
        {
            get
            {
                var opBuilder = new Operation.PublicSearchItems.PublicSearchItemsBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public PublicGetApp.PublicGetAppBuilder PublicGetAppOp
        {
            get
            {
                var opBuilder = new Operation.PublicGetApp.PublicGetAppBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public PublicGetItemDynamicData.PublicGetItemDynamicDataBuilder PublicGetItemDynamicDataOp
        {
            get
            {
                var opBuilder = new Operation.PublicGetItemDynamicData.PublicGetItemDynamicDataBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public PublicGetItem.PublicGetItemBuilder PublicGetItemOp
        {
            get
            {
                var opBuilder = new Operation.PublicGetItem.PublicGetItemBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public QueryItemsV2.QueryItemsV2Builder QueryItemsV2Op
        {
            get
            {
                var opBuilder = new Operation.QueryItemsV2.QueryItemsV2Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        #endregion

        public ListItemTypeConfigs.Response ListItemTypeConfigs(ListItemTypeConfigs input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<ListItemTypeConfigs.Response> ListItemTypeConfigsAsync(ListItemTypeConfigs input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public CreateItemTypeConfig.Response CreateItemTypeConfig(CreateItemTypeConfig input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<CreateItemTypeConfig.Response> CreateItemTypeConfigAsync(CreateItemTypeConfig input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public SearchItemTypeConfig.Response SearchItemTypeConfig(SearchItemTypeConfig input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<SearchItemTypeConfig.Response> SearchItemTypeConfigAsync(SearchItemTypeConfig input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public GetItemTypeConfig.Response GetItemTypeConfig(GetItemTypeConfig input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<GetItemTypeConfig.Response> GetItemTypeConfigAsync(GetItemTypeConfig input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public UpdateItemTypeConfig.Response UpdateItemTypeConfig(UpdateItemTypeConfig input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<UpdateItemTypeConfig.Response> UpdateItemTypeConfigAsync(UpdateItemTypeConfig input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public DeleteItemTypeConfig.Response DeleteItemTypeConfig(DeleteItemTypeConfig input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<DeleteItemTypeConfig.Response> DeleteItemTypeConfigAsync(DeleteItemTypeConfig input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public SyncInGameItem.Response SyncInGameItem(SyncInGameItem input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<SyncInGameItem.Response> SyncInGameItemAsync(SyncInGameItem input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public SyncInGameItem.Response<T1> SyncInGameItem<T1>(SyncInGameItem input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<SyncInGameItem.Response<T1>> SyncInGameItemAsync<T1>(SyncInGameItem input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public CreateItem.Response CreateItem(CreateItem input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<CreateItem.Response> CreateItemAsync(CreateItem input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public CreateItem.Response<T1> CreateItem<T1>(CreateItem input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<CreateItem.Response<T1>> CreateItemAsync<T1>(CreateItem input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public GetItemByAppId.Response GetItemByAppId(GetItemByAppId input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<GetItemByAppId.Response> GetItemByAppIdAsync(GetItemByAppId input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public GetItemByAppId.Response<T1> GetItemByAppId<T1>(GetItemByAppId input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<GetItemByAppId.Response<T1>> GetItemByAppIdAsync<T1>(GetItemByAppId input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public QueryItems.Response QueryItems(QueryItems input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<QueryItems.Response> QueryItemsAsync(QueryItems input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public ListBasicItemsByFeatures.Response ListBasicItemsByFeatures(ListBasicItemsByFeatures input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<ListBasicItemsByFeatures.Response> ListBasicItemsByFeaturesAsync(ListBasicItemsByFeatures input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public GetItems.Response GetItems(GetItems input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<GetItems.Response> GetItemsAsync(GetItems input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public GetItems.Response<T1> GetItems<T1>(GetItems input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<GetItems.Response<T1>> GetItemsAsync<T1>(GetItems input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public GetItemBySku.Response GetItemBySku(GetItemBySku input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<GetItemBySku.Response> GetItemBySkuAsync(GetItemBySku input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public GetItemBySku.Response<T1> GetItemBySku<T1>(GetItemBySku input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<GetItemBySku.Response<T1>> GetItemBySkuAsync<T1>(GetItemBySku input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public GetLocaleItemBySku.Response GetLocaleItemBySku(GetLocaleItemBySku input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<GetLocaleItemBySku.Response> GetLocaleItemBySkuAsync(GetLocaleItemBySku input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public GetLocaleItemBySku.Response<T1, T2> GetLocaleItemBySku<T1, T2>(GetLocaleItemBySku input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1, T2>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<GetLocaleItemBySku.Response<T1, T2>> GetLocaleItemBySkuAsync<T1, T2>(GetLocaleItemBySku input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1, T2>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public GetEstimatedPrice.Response GetEstimatedPrice(GetEstimatedPrice input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<GetEstimatedPrice.Response> GetEstimatedPriceAsync(GetEstimatedPrice input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public GetItemIdBySku.Response GetItemIdBySku(GetItemIdBySku input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<GetItemIdBySku.Response> GetItemIdBySkuAsync(GetItemIdBySku input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public GetBulkItemIdBySkus.Response GetBulkItemIdBySkus(GetBulkItemIdBySkus input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<GetBulkItemIdBySkus.Response> GetBulkItemIdBySkusAsync(GetBulkItemIdBySkus input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public BulkGetLocaleItems.Response BulkGetLocaleItems(BulkGetLocaleItems input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<BulkGetLocaleItems.Response> BulkGetLocaleItemsAsync(BulkGetLocaleItems input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public BulkGetLocaleItems.Response<T1, T2> BulkGetLocaleItems<T1, T2>(BulkGetLocaleItems input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1, T2>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<BulkGetLocaleItems.Response<T1, T2>> BulkGetLocaleItemsAsync<T1, T2>(BulkGetLocaleItems input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1, T2>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public GetAvailablePredicateTypes.Response GetAvailablePredicateTypes(GetAvailablePredicateTypes input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<GetAvailablePredicateTypes.Response> GetAvailablePredicateTypesAsync(GetAvailablePredicateTypes input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public ValidateItemPurchaseCondition.Response ValidateItemPurchaseCondition(ValidateItemPurchaseCondition input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<ValidateItemPurchaseCondition.Response> ValidateItemPurchaseConditionAsync(ValidateItemPurchaseCondition input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public BulkUpdateRegionData.Response BulkUpdateRegionData(BulkUpdateRegionData input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<BulkUpdateRegionData.Response> BulkUpdateRegionDataAsync(BulkUpdateRegionData input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public SearchItems.Response SearchItems(SearchItems input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<SearchItems.Response> SearchItemsAsync(SearchItems input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public QueryUncategorizedItems.Response QueryUncategorizedItems(QueryUncategorizedItems input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<QueryUncategorizedItems.Response> QueryUncategorizedItemsAsync(QueryUncategorizedItems input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public GetItem.Response GetItem(GetItem input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<GetItem.Response> GetItemAsync(GetItem input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public GetItem.Response<T1> GetItem<T1>(GetItem input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<GetItem.Response<T1>> GetItemAsync<T1>(GetItem input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public UpdateItem.Response UpdateItem(UpdateItem input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<UpdateItem.Response> UpdateItemAsync(UpdateItem input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public UpdateItem.Response<T1> UpdateItem<T1>(UpdateItem input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<UpdateItem.Response<T1>> UpdateItemAsync<T1>(UpdateItem input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public DeleteItem.Response DeleteItem(DeleteItem input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<DeleteItem.Response> DeleteItemAsync(DeleteItem input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AcquireItem.Response AcquireItem(AcquireItem input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AcquireItem.Response> AcquireItemAsync(AcquireItem input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public GetApp.Response GetApp(GetApp input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<GetApp.Response> GetAppAsync(GetApp input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public UpdateApp.Response UpdateApp(UpdateApp input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<UpdateApp.Response> UpdateAppAsync(UpdateApp input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public DisableItem.Response DisableItem(DisableItem input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<DisableItem.Response> DisableItemAsync(DisableItem input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public DisableItem.Response<T1> DisableItem<T1>(DisableItem input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<DisableItem.Response<T1>> DisableItemAsync<T1>(DisableItem input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public GetItemDynamicData.Response GetItemDynamicData(GetItemDynamicData input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<GetItemDynamicData.Response> GetItemDynamicDataAsync(GetItemDynamicData input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public EnableItem.Response EnableItem(EnableItem input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<EnableItem.Response> EnableItemAsync(EnableItem input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public EnableItem.Response<T1> EnableItem<T1>(EnableItem input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<EnableItem.Response<T1>> EnableItemAsync<T1>(EnableItem input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public FeatureItem.Response FeatureItem(FeatureItem input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<FeatureItem.Response> FeatureItemAsync(FeatureItem input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public FeatureItem.Response<T1> FeatureItem<T1>(FeatureItem input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<FeatureItem.Response<T1>> FeatureItemAsync<T1>(FeatureItem input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public DefeatureItem.Response DefeatureItem(DefeatureItem input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<DefeatureItem.Response> DefeatureItemAsync(DefeatureItem input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public DefeatureItem.Response<T1> DefeatureItem<T1>(DefeatureItem input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<DefeatureItem.Response<T1>> DefeatureItemAsync<T1>(DefeatureItem input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public GetLocaleItem.Response GetLocaleItem(GetLocaleItem input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<GetLocaleItem.Response> GetLocaleItemAsync(GetLocaleItem input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public GetLocaleItem.Response<T1, T2> GetLocaleItem<T1, T2>(GetLocaleItem input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1, T2>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<GetLocaleItem.Response<T1, T2>> GetLocaleItemAsync<T1, T2>(GetLocaleItem input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1, T2>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public UpdateItemPurchaseCondition.Response UpdateItemPurchaseCondition(UpdateItemPurchaseCondition input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<UpdateItemPurchaseCondition.Response> UpdateItemPurchaseConditionAsync(UpdateItemPurchaseCondition input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public UpdateItemPurchaseCondition.Response<T1> UpdateItemPurchaseCondition<T1>(UpdateItemPurchaseCondition input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<UpdateItemPurchaseCondition.Response<T1>> UpdateItemPurchaseConditionAsync<T1>(UpdateItemPurchaseCondition input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public QueryItemReferences.Response QueryItemReferences(QueryItemReferences input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<QueryItemReferences.Response> QueryItemReferencesAsync(QueryItemReferences input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public ReturnItem.Response ReturnItem(ReturnItem input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<ReturnItem.Response> ReturnItemAsync(ReturnItem input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public PublicGetItemByAppId.Response PublicGetItemByAppId(PublicGetItemByAppId input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<PublicGetItemByAppId.Response> PublicGetItemByAppIdAsync(PublicGetItemByAppId input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public PublicGetItemByAppId.Response<T1, T2> PublicGetItemByAppId<T1, T2>(PublicGetItemByAppId input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1, T2>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<PublicGetItemByAppId.Response<T1, T2>> PublicGetItemByAppIdAsync<T1, T2>(PublicGetItemByAppId input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1, T2>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public PublicQueryItems.Response PublicQueryItems(PublicQueryItems input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<PublicQueryItems.Response> PublicQueryItemsAsync(PublicQueryItems input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public PublicGetItemBySku.Response PublicGetItemBySku(PublicGetItemBySku input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<PublicGetItemBySku.Response> PublicGetItemBySkuAsync(PublicGetItemBySku input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public PublicGetItemBySku.Response<T1, T2> PublicGetItemBySku<T1, T2>(PublicGetItemBySku input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1, T2>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<PublicGetItemBySku.Response<T1, T2>> PublicGetItemBySkuAsync<T1, T2>(PublicGetItemBySku input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1, T2>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public PublicGetEstimatedPrice.Response PublicGetEstimatedPrice(PublicGetEstimatedPrice input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<PublicGetEstimatedPrice.Response> PublicGetEstimatedPriceAsync(PublicGetEstimatedPrice input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public PublicBulkGetItems.Response PublicBulkGetItems(PublicBulkGetItems input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<PublicBulkGetItems.Response> PublicBulkGetItemsAsync(PublicBulkGetItems input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public PublicBulkGetItems.Response<T1, T2> PublicBulkGetItems<T1, T2>(PublicBulkGetItems input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1, T2>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<PublicBulkGetItems.Response<T1, T2>> PublicBulkGetItemsAsync<T1, T2>(PublicBulkGetItems input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1, T2>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public PublicValidateItemPurchaseCondition.Response PublicValidateItemPurchaseCondition(PublicValidateItemPurchaseCondition input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<PublicValidateItemPurchaseCondition.Response> PublicValidateItemPurchaseConditionAsync(PublicValidateItemPurchaseCondition input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public PublicSearchItems.Response PublicSearchItems(PublicSearchItems input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<PublicSearchItems.Response> PublicSearchItemsAsync(PublicSearchItems input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public PublicGetApp.Response PublicGetApp(PublicGetApp input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<PublicGetApp.Response> PublicGetAppAsync(PublicGetApp input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public PublicGetItemDynamicData.Response PublicGetItemDynamicData(PublicGetItemDynamicData input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<PublicGetItemDynamicData.Response> PublicGetItemDynamicDataAsync(PublicGetItemDynamicData input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public PublicGetItem.Response PublicGetItem(PublicGetItem input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<PublicGetItem.Response> PublicGetItemAsync(PublicGetItem input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public PublicGetItem.Response<T1, T2> PublicGetItem<T1, T2>(PublicGetItem input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1, T2>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<PublicGetItem.Response<T1, T2>> PublicGetItemAsync<T1, T2>(PublicGetItem input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1, T2>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public QueryItemsV2.Response QueryItemsV2(QueryItemsV2 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<QueryItemsV2.Response> QueryItemsV2Async(QueryItemsV2 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
    }
}