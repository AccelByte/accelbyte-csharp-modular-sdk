// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;

using AccelByte.Sdk.Api.Platform.Model;
using AccelByte.Sdk.Api.Platform.Operation;

namespace AccelByte.Sdk.Api.Platform.Wrapper
{
    public class IAP
    {
        private readonly IAccelByteSdk _sdk;

        private string _CustomBasePath = String.Empty;

        public IAP(IAccelByteSdk sdk)
        {
            _sdk = sdk;
        }

        public IAP(IAccelByteSdk sdk, string customBasePath)
        {
            _sdk = sdk;
            _CustomBasePath = customBasePath;
        }

        #region Operation Builders
        public GetAppleIAPConfig.GetAppleIAPConfigBuilder GetAppleIAPConfigOp
        {
            get
            {
                var opBuilder = new Operation.GetAppleIAPConfig.GetAppleIAPConfigBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public UpdateAppleIAPConfig.UpdateAppleIAPConfigBuilder UpdateAppleIAPConfigOp
        {
            get
            {
                var opBuilder = new Operation.UpdateAppleIAPConfig.UpdateAppleIAPConfigBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public DeleteAppleIAPConfig.DeleteAppleIAPConfigBuilder DeleteAppleIAPConfigOp
        {
            get
            {
                var opBuilder = new Operation.DeleteAppleIAPConfig.DeleteAppleIAPConfigBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public UpdateAppleP8File.UpdateAppleP8FileBuilder UpdateAppleP8FileOp
        {
            get
            {
                var opBuilder = new Operation.UpdateAppleP8File.UpdateAppleP8FileBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public GetEpicGamesIAPConfig.GetEpicGamesIAPConfigBuilder GetEpicGamesIAPConfigOp
        {
            get
            {
                var opBuilder = new Operation.GetEpicGamesIAPConfig.GetEpicGamesIAPConfigBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public UpdateEpicGamesIAPConfig.UpdateEpicGamesIAPConfigBuilder UpdateEpicGamesIAPConfigOp
        {
            get
            {
                var opBuilder = new Operation.UpdateEpicGamesIAPConfig.UpdateEpicGamesIAPConfigBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public DeleteEpicGamesIAPConfig.DeleteEpicGamesIAPConfigBuilder DeleteEpicGamesIAPConfigOp
        {
            get
            {
                var opBuilder = new Operation.DeleteEpicGamesIAPConfig.DeleteEpicGamesIAPConfigBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public GetGoogleIAPConfig.GetGoogleIAPConfigBuilder GetGoogleIAPConfigOp
        {
            get
            {
                var opBuilder = new Operation.GetGoogleIAPConfig.GetGoogleIAPConfigBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public UpdateGoogleIAPConfig.UpdateGoogleIAPConfigBuilder UpdateGoogleIAPConfigOp
        {
            get
            {
                var opBuilder = new Operation.UpdateGoogleIAPConfig.UpdateGoogleIAPConfigBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public DeleteGoogleIAPConfig.DeleteGoogleIAPConfigBuilder DeleteGoogleIAPConfigOp
        {
            get
            {
                var opBuilder = new Operation.DeleteGoogleIAPConfig.DeleteGoogleIAPConfigBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public UpdateGoogleP12File.UpdateGoogleP12FileBuilder UpdateGoogleP12FileOp
        {
            get
            {
                var opBuilder = new Operation.UpdateGoogleP12File.UpdateGoogleP12FileBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public GetIAPItemConfig.GetIAPItemConfigBuilder GetIAPItemConfigOp
        {
            get
            {
                var opBuilder = new Operation.GetIAPItemConfig.GetIAPItemConfigBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public UpdateIAPItemConfig.UpdateIAPItemConfigBuilder UpdateIAPItemConfigOp
        {
            get
            {
                var opBuilder = new Operation.UpdateIAPItemConfig.UpdateIAPItemConfigBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public DeleteIAPItemConfig.DeleteIAPItemConfigBuilder DeleteIAPItemConfigOp
        {
            get
            {
                var opBuilder = new Operation.DeleteIAPItemConfig.DeleteIAPItemConfigBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public GetOculusIAPConfig.GetOculusIAPConfigBuilder GetOculusIAPConfigOp
        {
            get
            {
                var opBuilder = new Operation.GetOculusIAPConfig.GetOculusIAPConfigBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public UpdateOculusIAPConfig.UpdateOculusIAPConfigBuilder UpdateOculusIAPConfigOp
        {
            get
            {
                var opBuilder = new Operation.UpdateOculusIAPConfig.UpdateOculusIAPConfigBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public DeleteOculusIAPConfig.DeleteOculusIAPConfigBuilder DeleteOculusIAPConfigOp
        {
            get
            {
                var opBuilder = new Operation.DeleteOculusIAPConfig.DeleteOculusIAPConfigBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public GetPlayStationIAPConfig.GetPlayStationIAPConfigBuilder GetPlayStationIAPConfigOp
        {
            get
            {
                var opBuilder = new Operation.GetPlayStationIAPConfig.GetPlayStationIAPConfigBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public UpdatePlaystationIAPConfig.UpdatePlaystationIAPConfigBuilder UpdatePlaystationIAPConfigOp
        {
            get
            {
                var opBuilder = new Operation.UpdatePlaystationIAPConfig.UpdatePlaystationIAPConfigBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public DeletePlaystationIAPConfig.DeletePlaystationIAPConfigBuilder DeletePlaystationIAPConfigOp
        {
            get
            {
                var opBuilder = new Operation.DeletePlaystationIAPConfig.DeletePlaystationIAPConfigBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public ValidateExistedPlaystationIAPConfig.ValidateExistedPlaystationIAPConfigBuilder ValidateExistedPlaystationIAPConfigOp
        {
            get
            {
                var opBuilder = new Operation.ValidateExistedPlaystationIAPConfig.ValidateExistedPlaystationIAPConfigBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public ValidatePlaystationIAPConfig.ValidatePlaystationIAPConfigBuilder ValidatePlaystationIAPConfigOp
        {
            get
            {
                var opBuilder = new Operation.ValidatePlaystationIAPConfig.ValidatePlaystationIAPConfigBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public GetSteamIAPConfig.GetSteamIAPConfigBuilder GetSteamIAPConfigOp
        {
            get
            {
                var opBuilder = new Operation.GetSteamIAPConfig.GetSteamIAPConfigBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public UpdateSteamIAPConfig.UpdateSteamIAPConfigBuilder UpdateSteamIAPConfigOp
        {
            get
            {
                var opBuilder = new Operation.UpdateSteamIAPConfig.UpdateSteamIAPConfigBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public DeleteSteamIAPConfig.DeleteSteamIAPConfigBuilder DeleteSteamIAPConfigOp
        {
            get
            {
                var opBuilder = new Operation.DeleteSteamIAPConfig.DeleteSteamIAPConfigBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public GetTwitchIAPConfig.GetTwitchIAPConfigBuilder GetTwitchIAPConfigOp
        {
            get
            {
                var opBuilder = new Operation.GetTwitchIAPConfig.GetTwitchIAPConfigBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public UpdateTwitchIAPConfig.UpdateTwitchIAPConfigBuilder UpdateTwitchIAPConfigOp
        {
            get
            {
                var opBuilder = new Operation.UpdateTwitchIAPConfig.UpdateTwitchIAPConfigBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public DeleteTwitchIAPConfig.DeleteTwitchIAPConfigBuilder DeleteTwitchIAPConfigOp
        {
            get
            {
                var opBuilder = new Operation.DeleteTwitchIAPConfig.DeleteTwitchIAPConfigBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public GetXblIAPConfig.GetXblIAPConfigBuilder GetXblIAPConfigOp
        {
            get
            {
                var opBuilder = new Operation.GetXblIAPConfig.GetXblIAPConfigBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public UpdateXblIAPConfig.UpdateXblIAPConfigBuilder UpdateXblIAPConfigOp
        {
            get
            {
                var opBuilder = new Operation.UpdateXblIAPConfig.UpdateXblIAPConfigBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public DeleteXblAPConfig.DeleteXblAPConfigBuilder DeleteXblAPConfigOp
        {
            get
            {
                var opBuilder = new Operation.DeleteXblAPConfig.DeleteXblAPConfigBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public UpdateXblBPCertFile.UpdateXblBPCertFileBuilder UpdateXblBPCertFileOp
        {
            get
            {
                var opBuilder = new Operation.UpdateXblBPCertFile.UpdateXblBPCertFileBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public QueryAbnormalTransactions.QueryAbnormalTransactionsBuilder QueryAbnormalTransactionsOp
        {
            get
            {
                var opBuilder = new Operation.QueryAbnormalTransactions.QueryAbnormalTransactionsBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminGetSteamJobInfo.AdminGetSteamJobInfoBuilder AdminGetSteamJobInfoOp
        {
            get
            {
                var opBuilder = new Operation.AdminGetSteamJobInfo.AdminGetSteamJobInfoBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminResetSteamJobTime.AdminResetSteamJobTimeBuilder AdminResetSteamJobTimeOp
        {
            get
            {
                var opBuilder = new Operation.AdminResetSteamJobTime.AdminResetSteamJobTimeBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminRefundIAPOrder.AdminRefundIAPOrderBuilder AdminRefundIAPOrderOp
        {
            get
            {
                var opBuilder = new Operation.AdminRefundIAPOrder.AdminRefundIAPOrderBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public QuerySteamReportHistories.QuerySteamReportHistoriesBuilder QuerySteamReportHistoriesOp
        {
            get
            {
                var opBuilder = new Operation.QuerySteamReportHistories.QuerySteamReportHistoriesBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public GetIAPOrderConsumeDetails.GetIAPOrderConsumeDetailsBuilder GetIAPOrderConsumeDetailsOp
        {
            get
            {
                var opBuilder = new Operation.GetIAPOrderConsumeDetails.GetIAPOrderConsumeDetailsBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public QueryUserIAPOrders.QueryUserIAPOrdersBuilder QueryUserIAPOrdersOp
        {
            get
            {
                var opBuilder = new Operation.QueryUserIAPOrders.QueryUserIAPOrdersBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public QueryAllUserIAPOrders.QueryAllUserIAPOrdersBuilder QueryAllUserIAPOrdersOp
        {
            get
            {
                var opBuilder = new Operation.QueryAllUserIAPOrders.QueryAllUserIAPOrdersBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public QueryUserIAPConsumeHistory.QueryUserIAPConsumeHistoryBuilder QueryUserIAPConsumeHistoryOp
        {
            get
            {
                var opBuilder = new Operation.QueryUserIAPConsumeHistory.QueryUserIAPConsumeHistoryBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public MockFulfillIAPItem.MockFulfillIAPItemBuilder MockFulfillIAPItemOp
        {
            get
            {
                var opBuilder = new Operation.MockFulfillIAPItem.MockFulfillIAPItemBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminSyncOculusSubscriptions.AdminSyncOculusSubscriptionsBuilder AdminSyncOculusSubscriptionsOp
        {
            get
            {
                var opBuilder = new Operation.AdminSyncOculusSubscriptions.AdminSyncOculusSubscriptionsBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminGetIAPOrderLineItems.AdminGetIAPOrderLineItemsBuilder AdminGetIAPOrderLineItemsOp
        {
            get
            {
                var opBuilder = new Operation.AdminGetIAPOrderLineItems.AdminGetIAPOrderLineItemsBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminSyncSteamAbnormalTransaction.AdminSyncSteamAbnormalTransactionBuilder AdminSyncSteamAbnormalTransactionOp
        {
            get
            {
                var opBuilder = new Operation.AdminSyncSteamAbnormalTransaction.AdminSyncSteamAbnormalTransactionBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminSyncSteamIAPByTransaction.AdminSyncSteamIAPByTransactionBuilder AdminSyncSteamIAPByTransactionOp
        {
            get
            {
                var opBuilder = new Operation.AdminSyncSteamIAPByTransaction.AdminSyncSteamIAPByTransactionBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public GetAppleConfigVersion.GetAppleConfigVersionBuilder GetAppleConfigVersionOp
        {
            get
            {
                var opBuilder = new Operation.GetAppleConfigVersion.GetAppleConfigVersionBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public GetIAPItemMapping.GetIAPItemMappingBuilder GetIAPItemMappingOp
        {
            get
            {
                var opBuilder = new Operation.GetIAPItemMapping.GetIAPItemMappingBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public SyncTwitchDropsEntitlement.SyncTwitchDropsEntitlementBuilder SyncTwitchDropsEntitlementOp
        {
            get
            {
                var opBuilder = new Operation.SyncTwitchDropsEntitlement.SyncTwitchDropsEntitlementBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public PublicFulfillAppleIAPItem.PublicFulfillAppleIAPItemBuilder PublicFulfillAppleIAPItemOp
        {
            get
            {
                var opBuilder = new Operation.PublicFulfillAppleIAPItem.PublicFulfillAppleIAPItemBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public SyncEpicGamesInventory.SyncEpicGamesInventoryBuilder SyncEpicGamesInventoryOp
        {
            get
            {
                var opBuilder = new Operation.SyncEpicGamesInventory.SyncEpicGamesInventoryBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public PublicFulfillGoogleIAPItem.PublicFulfillGoogleIAPItemBuilder PublicFulfillGoogleIAPItemOp
        {
            get
            {
                var opBuilder = new Operation.PublicFulfillGoogleIAPItem.PublicFulfillGoogleIAPItemBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public SyncOculusSubscriptions.SyncOculusSubscriptionsBuilder SyncOculusSubscriptionsOp
        {
            get
            {
                var opBuilder = new Operation.SyncOculusSubscriptions.SyncOculusSubscriptionsBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public SyncOculusConsumableEntitlements.SyncOculusConsumableEntitlementsBuilder SyncOculusConsumableEntitlementsOp
        {
            get
            {
                var opBuilder = new Operation.SyncOculusConsumableEntitlements.SyncOculusConsumableEntitlementsBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public PublicReconcilePlayStationStore.PublicReconcilePlayStationStoreBuilder PublicReconcilePlayStationStoreOp
        {
            get
            {
                var opBuilder = new Operation.PublicReconcilePlayStationStore.PublicReconcilePlayStationStoreBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public PublicReconcilePlayStationStoreWithMultipleServiceLabels.PublicReconcilePlayStationStoreWithMultipleServiceLabelsBuilder PublicReconcilePlayStationStoreWithMultipleServiceLabelsOp
        {
            get
            {
                var opBuilder = new Operation.PublicReconcilePlayStationStoreWithMultipleServiceLabels.PublicReconcilePlayStationStoreWithMultipleServiceLabelsBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public SyncSteamInventory.SyncSteamInventoryBuilder SyncSteamInventoryOp
        {
            get
            {
                var opBuilder = new Operation.SyncSteamInventory.SyncSteamInventoryBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public SyncSteamAbnormalTransaction.SyncSteamAbnormalTransactionBuilder SyncSteamAbnormalTransactionOp
        {
            get
            {
                var opBuilder = new Operation.SyncSteamAbnormalTransaction.SyncSteamAbnormalTransactionBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public SyncSteamIAPByTransaction.SyncSteamIAPByTransactionBuilder SyncSteamIAPByTransactionOp
        {
            get
            {
                var opBuilder = new Operation.SyncSteamIAPByTransaction.SyncSteamIAPByTransactionBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public SyncTwitchDropsEntitlement1.SyncTwitchDropsEntitlement1Builder SyncTwitchDropsEntitlement1Op
        {
            get
            {
                var opBuilder = new Operation.SyncTwitchDropsEntitlement1.SyncTwitchDropsEntitlement1Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public SyncXboxInventory.SyncXboxInventoryBuilder SyncXboxInventoryOp
        {
            get
            {
                var opBuilder = new Operation.SyncXboxInventory.SyncXboxInventoryBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public V2PublicFulfillAppleIAPItem.V2PublicFulfillAppleIAPItemBuilder V2PublicFulfillAppleIAPItemOp
        {
            get
            {
                var opBuilder = new Operation.V2PublicFulfillAppleIAPItem.V2PublicFulfillAppleIAPItemBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        #endregion

        public GetAppleIAPConfig.Response GetAppleIAPConfig(GetAppleIAPConfig input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<GetAppleIAPConfig.Response> GetAppleIAPConfigAsync(GetAppleIAPConfig input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public UpdateAppleIAPConfig.Response UpdateAppleIAPConfig(UpdateAppleIAPConfig input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<UpdateAppleIAPConfig.Response> UpdateAppleIAPConfigAsync(UpdateAppleIAPConfig input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public DeleteAppleIAPConfig.Response DeleteAppleIAPConfig(DeleteAppleIAPConfig input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<DeleteAppleIAPConfig.Response> DeleteAppleIAPConfigAsync(DeleteAppleIAPConfig input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public UpdateAppleP8File.Response UpdateAppleP8File(UpdateAppleP8File input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<UpdateAppleP8File.Response> UpdateAppleP8FileAsync(UpdateAppleP8File input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public GetEpicGamesIAPConfig.Response GetEpicGamesIAPConfig(GetEpicGamesIAPConfig input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<GetEpicGamesIAPConfig.Response> GetEpicGamesIAPConfigAsync(GetEpicGamesIAPConfig input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public UpdateEpicGamesIAPConfig.Response UpdateEpicGamesIAPConfig(UpdateEpicGamesIAPConfig input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<UpdateEpicGamesIAPConfig.Response> UpdateEpicGamesIAPConfigAsync(UpdateEpicGamesIAPConfig input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public DeleteEpicGamesIAPConfig.Response DeleteEpicGamesIAPConfig(DeleteEpicGamesIAPConfig input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<DeleteEpicGamesIAPConfig.Response> DeleteEpicGamesIAPConfigAsync(DeleteEpicGamesIAPConfig input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public GetGoogleIAPConfig.Response GetGoogleIAPConfig(GetGoogleIAPConfig input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<GetGoogleIAPConfig.Response> GetGoogleIAPConfigAsync(GetGoogleIAPConfig input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public UpdateGoogleIAPConfig.Response UpdateGoogleIAPConfig(UpdateGoogleIAPConfig input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<UpdateGoogleIAPConfig.Response> UpdateGoogleIAPConfigAsync(UpdateGoogleIAPConfig input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public DeleteGoogleIAPConfig.Response DeleteGoogleIAPConfig(DeleteGoogleIAPConfig input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<DeleteGoogleIAPConfig.Response> DeleteGoogleIAPConfigAsync(DeleteGoogleIAPConfig input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public UpdateGoogleP12File.Response UpdateGoogleP12File(UpdateGoogleP12File input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<UpdateGoogleP12File.Response> UpdateGoogleP12FileAsync(UpdateGoogleP12File input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public GetIAPItemConfig.Response GetIAPItemConfig(GetIAPItemConfig input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<GetIAPItemConfig.Response> GetIAPItemConfigAsync(GetIAPItemConfig input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public UpdateIAPItemConfig.Response UpdateIAPItemConfig(UpdateIAPItemConfig input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<UpdateIAPItemConfig.Response> UpdateIAPItemConfigAsync(UpdateIAPItemConfig input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public DeleteIAPItemConfig.Response DeleteIAPItemConfig(DeleteIAPItemConfig input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<DeleteIAPItemConfig.Response> DeleteIAPItemConfigAsync(DeleteIAPItemConfig input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public GetOculusIAPConfig.Response GetOculusIAPConfig(GetOculusIAPConfig input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<GetOculusIAPConfig.Response> GetOculusIAPConfigAsync(GetOculusIAPConfig input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public UpdateOculusIAPConfig.Response UpdateOculusIAPConfig(UpdateOculusIAPConfig input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<UpdateOculusIAPConfig.Response> UpdateOculusIAPConfigAsync(UpdateOculusIAPConfig input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public DeleteOculusIAPConfig.Response DeleteOculusIAPConfig(DeleteOculusIAPConfig input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<DeleteOculusIAPConfig.Response> DeleteOculusIAPConfigAsync(DeleteOculusIAPConfig input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public GetPlayStationIAPConfig.Response GetPlayStationIAPConfig(GetPlayStationIAPConfig input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<GetPlayStationIAPConfig.Response> GetPlayStationIAPConfigAsync(GetPlayStationIAPConfig input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public UpdatePlaystationIAPConfig.Response UpdatePlaystationIAPConfig(UpdatePlaystationIAPConfig input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<UpdatePlaystationIAPConfig.Response> UpdatePlaystationIAPConfigAsync(UpdatePlaystationIAPConfig input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public DeletePlaystationIAPConfig.Response DeletePlaystationIAPConfig(DeletePlaystationIAPConfig input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<DeletePlaystationIAPConfig.Response> DeletePlaystationIAPConfigAsync(DeletePlaystationIAPConfig input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public ValidateExistedPlaystationIAPConfig.Response ValidateExistedPlaystationIAPConfig(ValidateExistedPlaystationIAPConfig input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<ValidateExistedPlaystationIAPConfig.Response> ValidateExistedPlaystationIAPConfigAsync(ValidateExistedPlaystationIAPConfig input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public ValidatePlaystationIAPConfig.Response ValidatePlaystationIAPConfig(ValidatePlaystationIAPConfig input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<ValidatePlaystationIAPConfig.Response> ValidatePlaystationIAPConfigAsync(ValidatePlaystationIAPConfig input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public GetSteamIAPConfig.Response GetSteamIAPConfig(GetSteamIAPConfig input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<GetSteamIAPConfig.Response> GetSteamIAPConfigAsync(GetSteamIAPConfig input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public UpdateSteamIAPConfig.Response UpdateSteamIAPConfig(UpdateSteamIAPConfig input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<UpdateSteamIAPConfig.Response> UpdateSteamIAPConfigAsync(UpdateSteamIAPConfig input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public DeleteSteamIAPConfig.Response DeleteSteamIAPConfig(DeleteSteamIAPConfig input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<DeleteSteamIAPConfig.Response> DeleteSteamIAPConfigAsync(DeleteSteamIAPConfig input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public GetTwitchIAPConfig.Response GetTwitchIAPConfig(GetTwitchIAPConfig input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<GetTwitchIAPConfig.Response> GetTwitchIAPConfigAsync(GetTwitchIAPConfig input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public UpdateTwitchIAPConfig.Response UpdateTwitchIAPConfig(UpdateTwitchIAPConfig input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<UpdateTwitchIAPConfig.Response> UpdateTwitchIAPConfigAsync(UpdateTwitchIAPConfig input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public DeleteTwitchIAPConfig.Response DeleteTwitchIAPConfig(DeleteTwitchIAPConfig input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<DeleteTwitchIAPConfig.Response> DeleteTwitchIAPConfigAsync(DeleteTwitchIAPConfig input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public GetXblIAPConfig.Response GetXblIAPConfig(GetXblIAPConfig input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<GetXblIAPConfig.Response> GetXblIAPConfigAsync(GetXblIAPConfig input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public UpdateXblIAPConfig.Response UpdateXblIAPConfig(UpdateXblIAPConfig input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<UpdateXblIAPConfig.Response> UpdateXblIAPConfigAsync(UpdateXblIAPConfig input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public DeleteXblAPConfig.Response DeleteXblAPConfig(DeleteXblAPConfig input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<DeleteXblAPConfig.Response> DeleteXblAPConfigAsync(DeleteXblAPConfig input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public UpdateXblBPCertFile.Response UpdateXblBPCertFile(UpdateXblBPCertFile input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<UpdateXblBPCertFile.Response> UpdateXblBPCertFileAsync(UpdateXblBPCertFile input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public QueryAbnormalTransactions.Response QueryAbnormalTransactions(QueryAbnormalTransactions input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<QueryAbnormalTransactions.Response> QueryAbnormalTransactionsAsync(QueryAbnormalTransactions input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminGetSteamJobInfo.Response AdminGetSteamJobInfo(AdminGetSteamJobInfo input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminGetSteamJobInfo.Response> AdminGetSteamJobInfoAsync(AdminGetSteamJobInfo input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminResetSteamJobTime.Response AdminResetSteamJobTime(AdminResetSteamJobTime input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminResetSteamJobTime.Response> AdminResetSteamJobTimeAsync(AdminResetSteamJobTime input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminRefundIAPOrder.Response AdminRefundIAPOrder(AdminRefundIAPOrder input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminRefundIAPOrder.Response> AdminRefundIAPOrderAsync(AdminRefundIAPOrder input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public QuerySteamReportHistories.Response QuerySteamReportHistories(QuerySteamReportHistories input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<QuerySteamReportHistories.Response> QuerySteamReportHistoriesAsync(QuerySteamReportHistories input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public GetIAPOrderConsumeDetails.Response GetIAPOrderConsumeDetails(GetIAPOrderConsumeDetails input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<GetIAPOrderConsumeDetails.Response> GetIAPOrderConsumeDetailsAsync(GetIAPOrderConsumeDetails input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public QueryUserIAPOrders.Response QueryUserIAPOrders(QueryUserIAPOrders input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<QueryUserIAPOrders.Response> QueryUserIAPOrdersAsync(QueryUserIAPOrders input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public QueryAllUserIAPOrders.Response QueryAllUserIAPOrders(QueryAllUserIAPOrders input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<QueryAllUserIAPOrders.Response> QueryAllUserIAPOrdersAsync(QueryAllUserIAPOrders input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public QueryUserIAPConsumeHistory.Response QueryUserIAPConsumeHistory(QueryUserIAPConsumeHistory input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<QueryUserIAPConsumeHistory.Response> QueryUserIAPConsumeHistoryAsync(QueryUserIAPConsumeHistory input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public MockFulfillIAPItem.Response MockFulfillIAPItem(MockFulfillIAPItem input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<MockFulfillIAPItem.Response> MockFulfillIAPItemAsync(MockFulfillIAPItem input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminSyncOculusSubscriptions.Response AdminSyncOculusSubscriptions(AdminSyncOculusSubscriptions input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminSyncOculusSubscriptions.Response> AdminSyncOculusSubscriptionsAsync(AdminSyncOculusSubscriptions input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminGetIAPOrderLineItems.Response AdminGetIAPOrderLineItems(AdminGetIAPOrderLineItems input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminGetIAPOrderLineItems.Response> AdminGetIAPOrderLineItemsAsync(AdminGetIAPOrderLineItems input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminSyncSteamAbnormalTransaction.Response AdminSyncSteamAbnormalTransaction(AdminSyncSteamAbnormalTransaction input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminSyncSteamAbnormalTransaction.Response> AdminSyncSteamAbnormalTransactionAsync(AdminSyncSteamAbnormalTransaction input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminSyncSteamIAPByTransaction.Response AdminSyncSteamIAPByTransaction(AdminSyncSteamIAPByTransaction input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminSyncSteamIAPByTransaction.Response> AdminSyncSteamIAPByTransactionAsync(AdminSyncSteamIAPByTransaction input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public GetAppleConfigVersion.Response GetAppleConfigVersion(GetAppleConfigVersion input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<GetAppleConfigVersion.Response> GetAppleConfigVersionAsync(GetAppleConfigVersion input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public GetIAPItemMapping.Response GetIAPItemMapping(GetIAPItemMapping input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<GetIAPItemMapping.Response> GetIAPItemMappingAsync(GetIAPItemMapping input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public SyncTwitchDropsEntitlement.Response SyncTwitchDropsEntitlement(SyncTwitchDropsEntitlement input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<SyncTwitchDropsEntitlement.Response> SyncTwitchDropsEntitlementAsync(SyncTwitchDropsEntitlement input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public PublicFulfillAppleIAPItem.Response PublicFulfillAppleIAPItem(PublicFulfillAppleIAPItem input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<PublicFulfillAppleIAPItem.Response> PublicFulfillAppleIAPItemAsync(PublicFulfillAppleIAPItem input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public SyncEpicGamesInventory.Response SyncEpicGamesInventory(SyncEpicGamesInventory input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<SyncEpicGamesInventory.Response> SyncEpicGamesInventoryAsync(SyncEpicGamesInventory input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public PublicFulfillGoogleIAPItem.Response PublicFulfillGoogleIAPItem(PublicFulfillGoogleIAPItem input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<PublicFulfillGoogleIAPItem.Response> PublicFulfillGoogleIAPItemAsync(PublicFulfillGoogleIAPItem input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public SyncOculusSubscriptions.Response SyncOculusSubscriptions(SyncOculusSubscriptions input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<SyncOculusSubscriptions.Response> SyncOculusSubscriptionsAsync(SyncOculusSubscriptions input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public SyncOculusConsumableEntitlements.Response SyncOculusConsumableEntitlements(SyncOculusConsumableEntitlements input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<SyncOculusConsumableEntitlements.Response> SyncOculusConsumableEntitlementsAsync(SyncOculusConsumableEntitlements input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public PublicReconcilePlayStationStore.Response PublicReconcilePlayStationStore(PublicReconcilePlayStationStore input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<PublicReconcilePlayStationStore.Response> PublicReconcilePlayStationStoreAsync(PublicReconcilePlayStationStore input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public PublicReconcilePlayStationStoreWithMultipleServiceLabels.Response PublicReconcilePlayStationStoreWithMultipleServiceLabels(PublicReconcilePlayStationStoreWithMultipleServiceLabels input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<PublicReconcilePlayStationStoreWithMultipleServiceLabels.Response> PublicReconcilePlayStationStoreWithMultipleServiceLabelsAsync(PublicReconcilePlayStationStoreWithMultipleServiceLabels input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public SyncSteamInventory.Response SyncSteamInventory(SyncSteamInventory input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<SyncSteamInventory.Response> SyncSteamInventoryAsync(SyncSteamInventory input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public SyncSteamAbnormalTransaction.Response SyncSteamAbnormalTransaction(SyncSteamAbnormalTransaction input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<SyncSteamAbnormalTransaction.Response> SyncSteamAbnormalTransactionAsync(SyncSteamAbnormalTransaction input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public SyncSteamIAPByTransaction.Response SyncSteamIAPByTransaction(SyncSteamIAPByTransaction input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<SyncSteamIAPByTransaction.Response> SyncSteamIAPByTransactionAsync(SyncSteamIAPByTransaction input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public SyncTwitchDropsEntitlement1.Response SyncTwitchDropsEntitlement1(SyncTwitchDropsEntitlement1 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<SyncTwitchDropsEntitlement1.Response> SyncTwitchDropsEntitlement1Async(SyncTwitchDropsEntitlement1 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public SyncXboxInventory.Response SyncXboxInventory(SyncXboxInventory input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<SyncXboxInventory.Response> SyncXboxInventoryAsync(SyncXboxInventory input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public V2PublicFulfillAppleIAPItem.Response V2PublicFulfillAppleIAPItem(V2PublicFulfillAppleIAPItem input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<V2PublicFulfillAppleIAPItem.Response> V2PublicFulfillAppleIAPItemAsync(V2PublicFulfillAppleIAPItem input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
    }
}