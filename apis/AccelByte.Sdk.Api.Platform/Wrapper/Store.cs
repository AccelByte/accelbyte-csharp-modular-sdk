// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;

using AccelByte.Sdk.Api.Platform.Model;
using AccelByte.Sdk.Api.Platform.Operation;

namespace AccelByte.Sdk.Api.Platform.Wrapper
{
    public class Store
    {
        private readonly IAccelByteSdk _sdk;

        public Store(IAccelByteSdk sdk)
        {
            _sdk = sdk;
        }

        #region Operation Builders
        public ListStores.ListStoresBuilder ListStoresOp
        {
            get { return new Operation.ListStores.ListStoresBuilder(_sdk); }
        }
        public CreateStore.CreateStoreBuilder CreateStoreOp
        {
            get { return new Operation.CreateStore.CreateStoreBuilder(_sdk); }
        }
        public GetCatalogDefinition.GetCatalogDefinitionBuilder GetCatalogDefinitionOp
        {
            get { return new Operation.GetCatalogDefinition.GetCatalogDefinitionBuilder(_sdk); }
        }
        public DownloadCSVTemplates.DownloadCSVTemplatesBuilder DownloadCSVTemplatesOp
        {
            get { return new Operation.DownloadCSVTemplates.DownloadCSVTemplatesBuilder(_sdk); }
        }
        public ExportStoreByCSV.ExportStoreByCSVBuilder ExportStoreByCSVOp
        {
            get { return new Operation.ExportStoreByCSV.ExportStoreByCSVBuilder(_sdk); }
        }
        [Obsolete(DiagnosticId = "ab_deprecated_operation_wrapper")]
        public ImportStore.ImportStoreBuilder ImportStoreOp
        {
            get { return new Operation.ImportStore.ImportStoreBuilder(_sdk); }
        }
        public GetPublishedStore.GetPublishedStoreBuilder GetPublishedStoreOp
        {
            get { return new Operation.GetPublishedStore.GetPublishedStoreBuilder(_sdk); }
        }
        public DeletePublishedStore.DeletePublishedStoreBuilder DeletePublishedStoreOp
        {
            get { return new Operation.DeletePublishedStore.DeletePublishedStoreBuilder(_sdk); }
        }
        public GetPublishedStoreBackup.GetPublishedStoreBackupBuilder GetPublishedStoreBackupOp
        {
            get { return new Operation.GetPublishedStoreBackup.GetPublishedStoreBackupBuilder(_sdk); }
        }
        public RollbackPublishedStore.RollbackPublishedStoreBuilder RollbackPublishedStoreOp
        {
            get { return new Operation.RollbackPublishedStore.RollbackPublishedStoreBuilder(_sdk); }
        }
        public GetStore.GetStoreBuilder GetStoreOp
        {
            get { return new Operation.GetStore.GetStoreBuilder(_sdk); }
        }
        public UpdateStore.UpdateStoreBuilder UpdateStoreOp
        {
            get { return new Operation.UpdateStore.UpdateStoreBuilder(_sdk); }
        }
        public DeleteStore.DeleteStoreBuilder DeleteStoreOp
        {
            get { return new Operation.DeleteStore.DeleteStoreBuilder(_sdk); }
        }
        public CloneStore.CloneStoreBuilder CloneStoreOp
        {
            get { return new Operation.CloneStore.CloneStoreBuilder(_sdk); }
        }
        [Obsolete(DiagnosticId = "ab_deprecated_operation_wrapper")]
        public ExportStore.ExportStoreBuilder ExportStoreOp
        {
            get { return new Operation.ExportStore.ExportStoreBuilder(_sdk); }
        }
        public QueryImportHistory.QueryImportHistoryBuilder QueryImportHistoryOp
        {
            get { return new Operation.QueryImportHistory.QueryImportHistoryBuilder(_sdk); }
        }
        public ImportStoreByCSV.ImportStoreByCSVBuilder ImportStoreByCSVOp
        {
            get { return new Operation.ImportStoreByCSV.ImportStoreByCSVBuilder(_sdk); }
        }
        public PublicListStores.PublicListStoresBuilder PublicListStoresOp
        {
            get { return new Operation.PublicListStores.PublicListStoresBuilder(_sdk); }
        }
        public ImportStore1.ImportStore1Builder ImportStore1Op
        {
            get { return new Operation.ImportStore1.ImportStore1Builder(_sdk); }
        }
        public ExportStore1.ExportStore1Builder ExportStore1Op
        {
            get { return new Operation.ExportStore1.ExportStore1Builder(_sdk); }
        }
        #endregion

        public List<Model.StoreInfo>? ListStores(ListStores input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<List<Model.StoreInfo>?> ListStoresAsync(ListStores input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.StoreInfo? CreateStore(CreateStore input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.StoreInfo?> CreateStoreAsync(CreateStore input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public List<Model.CatalogDefinitionInfo>? GetCatalogDefinition(GetCatalogDefinition input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<List<Model.CatalogDefinitionInfo>?> GetCatalogDefinitionAsync(GetCatalogDefinition input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Stream? DownloadCSVTemplates(DownloadCSVTemplates input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Stream?> DownloadCSVTemplatesAsync(DownloadCSVTemplates input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Stream? ExportStoreByCSV(ExportStoreByCSV input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Stream?> ExportStoreByCSVAsync(ExportStoreByCSV input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
#pragma warning disable ab_deprecated_operation
        [Obsolete(DiagnosticId = "ab_deprecated_operation_wrapper")]
        public Model.StoreInfo? ImportStore(ImportStore input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.StoreInfo?> ImportStoreAsync(ImportStore input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
#pragma warning restore ab_deprecated_operation
        public Model.StoreInfo? GetPublishedStore(GetPublishedStore input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.StoreInfo?> GetPublishedStoreAsync(GetPublishedStore input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.StoreInfo? DeletePublishedStore(DeletePublishedStore input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.StoreInfo?> DeletePublishedStoreAsync(DeletePublishedStore input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.StoreBackupInfo? GetPublishedStoreBackup(GetPublishedStoreBackup input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.StoreBackupInfo?> GetPublishedStoreBackupAsync(GetPublishedStoreBackup input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.StoreInfo? RollbackPublishedStore(RollbackPublishedStore input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.StoreInfo?> RollbackPublishedStoreAsync(RollbackPublishedStore input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.StoreInfo? GetStore(GetStore input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.StoreInfo?> GetStoreAsync(GetStore input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.StoreInfo? UpdateStore(UpdateStore input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.StoreInfo?> UpdateStoreAsync(UpdateStore input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.StoreInfo? DeleteStore(DeleteStore input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.StoreInfo?> DeleteStoreAsync(DeleteStore input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.StoreInfo? CloneStore(CloneStore input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.StoreInfo?> CloneStoreAsync(CloneStore input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
#pragma warning disable ab_deprecated_operation
        [Obsolete(DiagnosticId = "ab_deprecated_operation_wrapper")]
        public Stream? ExportStore(ExportStore input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Stream?> ExportStoreAsync(ExportStore input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
#pragma warning restore ab_deprecated_operation
        public Model.ImportStoreHistoryPagingResult? QueryImportHistory(QueryImportHistory input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ImportStoreHistoryPagingResult?> QueryImportHistoryAsync(QueryImportHistory input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ImportStoreResult? ImportStoreByCSV(ImportStoreByCSV input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ImportStoreResult?> ImportStoreByCSVAsync(ImportStoreByCSV input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public List<Model.StoreInfo>? PublicListStores(PublicListStores input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<List<Model.StoreInfo>?> PublicListStoresAsync(PublicListStores input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ImportStoreResult? ImportStore1(ImportStore1 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ImportStoreResult?> ImportStore1Async(ImportStore1 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Stream? ExportStore1(ExportStore1 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Stream?> ExportStore1Async(ExportStore1 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
    }
}