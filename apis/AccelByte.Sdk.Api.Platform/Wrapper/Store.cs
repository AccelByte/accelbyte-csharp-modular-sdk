// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;

using AccelByte.Sdk.Api.Platform.Model;
using AccelByte.Sdk.Api.Platform.Operation;

namespace AccelByte.Sdk.Api.Platform.Wrapper
{
    public class Store
    {
        private readonly IAccelByteSdk _sdk;

        private string _CustomBasePath = String.Empty;

        public Store(IAccelByteSdk sdk)
        {
            _sdk = sdk;
        }

        public Store(IAccelByteSdk sdk, string customBasePath)
        {
            _sdk = sdk;
            _CustomBasePath = customBasePath;
        }

        #region Operation Builders
        public GetCatalogConfig.GetCatalogConfigBuilder GetCatalogConfigOp
        {
            get
            {
                var opBuilder = new Operation.GetCatalogConfig.GetCatalogConfigBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public UpdateCatalogConfig.UpdateCatalogConfigBuilder UpdateCatalogConfigOp
        {
            get
            {
                var opBuilder = new Operation.UpdateCatalogConfig.UpdateCatalogConfigBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public ListStores.ListStoresBuilder ListStoresOp
        {
            get
            {
                var opBuilder = new Operation.ListStores.ListStoresBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public CreateStore.CreateStoreBuilder CreateStoreOp
        {
            get
            {
                var opBuilder = new Operation.CreateStore.CreateStoreBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public GetCatalogDefinition.GetCatalogDefinitionBuilder GetCatalogDefinitionOp
        {
            get
            {
                var opBuilder = new Operation.GetCatalogDefinition.GetCatalogDefinitionBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public DownloadCSVTemplates.DownloadCSVTemplatesBuilder DownloadCSVTemplatesOp
        {
            get
            {
                var opBuilder = new Operation.DownloadCSVTemplates.DownloadCSVTemplatesBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public ExportStoreByCSV.ExportStoreByCSVBuilder ExportStoreByCSVOp
        {
            get
            {
                var opBuilder = new Operation.ExportStoreByCSV.ExportStoreByCSVBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        [Obsolete(DiagnosticId ="ab_deprecated_operation_wrapper")]
        public ImportStore.ImportStoreBuilder ImportStoreOp
        {
            get
            {
                var opBuilder = new Operation.ImportStore.ImportStoreBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public GetPublishedStore.GetPublishedStoreBuilder GetPublishedStoreOp
        {
            get
            {
                var opBuilder = new Operation.GetPublishedStore.GetPublishedStoreBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public DeletePublishedStore.DeletePublishedStoreBuilder DeletePublishedStoreOp
        {
            get
            {
                var opBuilder = new Operation.DeletePublishedStore.DeletePublishedStoreBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public GetPublishedStoreBackup.GetPublishedStoreBackupBuilder GetPublishedStoreBackupOp
        {
            get
            {
                var opBuilder = new Operation.GetPublishedStoreBackup.GetPublishedStoreBackupBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public RollbackPublishedStore.RollbackPublishedStoreBuilder RollbackPublishedStoreOp
        {
            get
            {
                var opBuilder = new Operation.RollbackPublishedStore.RollbackPublishedStoreBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public GetStore.GetStoreBuilder GetStoreOp
        {
            get
            {
                var opBuilder = new Operation.GetStore.GetStoreBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public UpdateStore.UpdateStoreBuilder UpdateStoreOp
        {
            get
            {
                var opBuilder = new Operation.UpdateStore.UpdateStoreBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public DeleteStore.DeleteStoreBuilder DeleteStoreOp
        {
            get
            {
                var opBuilder = new Operation.DeleteStore.DeleteStoreBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public CloneStore.CloneStoreBuilder CloneStoreOp
        {
            get
            {
                var opBuilder = new Operation.CloneStore.CloneStoreBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        [Obsolete(DiagnosticId ="ab_deprecated_operation_wrapper")]
        public ExportStore.ExportStoreBuilder ExportStoreOp
        {
            get
            {
                var opBuilder = new Operation.ExportStore.ExportStoreBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public QueryImportHistory.QueryImportHistoryBuilder QueryImportHistoryOp
        {
            get
            {
                var opBuilder = new Operation.QueryImportHistory.QueryImportHistoryBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public ImportStoreByCSV.ImportStoreByCSVBuilder ImportStoreByCSVOp
        {
            get
            {
                var opBuilder = new Operation.ImportStoreByCSV.ImportStoreByCSVBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public PublicListStores.PublicListStoresBuilder PublicListStoresOp
        {
            get
            {
                var opBuilder = new Operation.PublicListStores.PublicListStoresBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public ImportStore1.ImportStore1Builder ImportStore1Op
        {
            get
            {
                var opBuilder = new Operation.ImportStore1.ImportStore1Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public ExportStore1.ExportStore1Builder ExportStore1Op
        {
            get
            {
                var opBuilder = new Operation.ExportStore1.ExportStore1Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        #endregion

        public GetCatalogConfig.Response GetCatalogConfig(GetCatalogConfig input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<GetCatalogConfig.Response> GetCatalogConfigAsync(GetCatalogConfig input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public UpdateCatalogConfig.Response UpdateCatalogConfig(UpdateCatalogConfig input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<UpdateCatalogConfig.Response> UpdateCatalogConfigAsync(UpdateCatalogConfig input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public ListStores.Response ListStores(ListStores input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<ListStores.Response> ListStoresAsync(ListStores input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public CreateStore.Response CreateStore(CreateStore input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<CreateStore.Response> CreateStoreAsync(CreateStore input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public GetCatalogDefinition.Response GetCatalogDefinition(GetCatalogDefinition input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<GetCatalogDefinition.Response> GetCatalogDefinitionAsync(GetCatalogDefinition input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public DownloadCSVTemplates.Response DownloadCSVTemplates(DownloadCSVTemplates input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<DownloadCSVTemplates.Response> DownloadCSVTemplatesAsync(DownloadCSVTemplates input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public ExportStoreByCSV.Response ExportStoreByCSV(ExportStoreByCSV input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<ExportStoreByCSV.Response> ExportStoreByCSVAsync(ExportStoreByCSV input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        #pragma warning disable ab_deprecated_operation
        [Obsolete(DiagnosticId ="ab_deprecated_operation_wrapper")]
        public ImportStore.Response ImportStore(ImportStore input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<ImportStore.Response> ImportStoreAsync(ImportStore input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        #pragma warning restore ab_deprecated_operation
        public GetPublishedStore.Response GetPublishedStore(GetPublishedStore input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<GetPublishedStore.Response> GetPublishedStoreAsync(GetPublishedStore input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public DeletePublishedStore.Response DeletePublishedStore(DeletePublishedStore input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<DeletePublishedStore.Response> DeletePublishedStoreAsync(DeletePublishedStore input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public GetPublishedStoreBackup.Response GetPublishedStoreBackup(GetPublishedStoreBackup input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<GetPublishedStoreBackup.Response> GetPublishedStoreBackupAsync(GetPublishedStoreBackup input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public RollbackPublishedStore.Response RollbackPublishedStore(RollbackPublishedStore input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<RollbackPublishedStore.Response> RollbackPublishedStoreAsync(RollbackPublishedStore input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public GetStore.Response GetStore(GetStore input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<GetStore.Response> GetStoreAsync(GetStore input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public UpdateStore.Response UpdateStore(UpdateStore input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<UpdateStore.Response> UpdateStoreAsync(UpdateStore input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public DeleteStore.Response DeleteStore(DeleteStore input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<DeleteStore.Response> DeleteStoreAsync(DeleteStore input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public CloneStore.Response CloneStore(CloneStore input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<CloneStore.Response> CloneStoreAsync(CloneStore input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        #pragma warning disable ab_deprecated_operation
        [Obsolete(DiagnosticId ="ab_deprecated_operation_wrapper")]
        public ExportStore.Response ExportStore(ExportStore input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<ExportStore.Response> ExportStoreAsync(ExportStore input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        #pragma warning restore ab_deprecated_operation
        public QueryImportHistory.Response QueryImportHistory(QueryImportHistory input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<QueryImportHistory.Response> QueryImportHistoryAsync(QueryImportHistory input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public ImportStoreByCSV.Response ImportStoreByCSV(ImportStoreByCSV input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<ImportStoreByCSV.Response> ImportStoreByCSVAsync(ImportStoreByCSV input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public PublicListStores.Response PublicListStores(PublicListStores input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<PublicListStores.Response> PublicListStoresAsync(PublicListStores input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public ImportStore1.Response ImportStore1(ImportStore1 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<ImportStore1.Response> ImportStore1Async(ImportStore1 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public ExportStore1.Response ExportStore1(ExportStore1 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<ExportStore1.Response> ExportStore1Async(ExportStore1 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
    }
}