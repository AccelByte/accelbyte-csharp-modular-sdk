// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;

using AccelByte.Sdk.Api.Platform.Model;
using AccelByte.Sdk.Api.Platform.Operation;

namespace AccelByte.Sdk.Api.Platform.Wrapper
{
    public class IAPSubscription
    {
        private readonly IAccelByteSdk _sdk;

        private string _CustomBasePath = String.Empty;

        public IAPSubscription(IAccelByteSdk sdk)
        {
            _sdk = sdk;
        }

        public IAPSubscription(IAccelByteSdk sdk, string customBasePath)
        {
            _sdk = sdk;
            _CustomBasePath = customBasePath;
        }

        #region Operation Builders
        public QueryThirdPartySubscription.QueryThirdPartySubscriptionBuilder QueryThirdPartySubscriptionOp
        {
            get
            {
                var opBuilder = new Operation.QueryThirdPartySubscription.QueryThirdPartySubscriptionBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public QueryUserThirdPartySubscription.QueryUserThirdPartySubscriptionBuilder QueryUserThirdPartySubscriptionOp
        {
            get
            {
                var opBuilder = new Operation.QueryUserThirdPartySubscription.QueryUserThirdPartySubscriptionBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public GetThirdPartyPlatformSubscriptionOwnershipByGroupId.GetThirdPartyPlatformSubscriptionOwnershipByGroupIdBuilder GetThirdPartyPlatformSubscriptionOwnershipByGroupIdOp
        {
            get
            {
                var opBuilder = new Operation.GetThirdPartyPlatformSubscriptionOwnershipByGroupId.GetThirdPartyPlatformSubscriptionOwnershipByGroupIdBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public GetThirdPartyPlatformSubscriptionOwnershipByProductId.GetThirdPartyPlatformSubscriptionOwnershipByProductIdBuilder GetThirdPartyPlatformSubscriptionOwnershipByProductIdOp
        {
            get
            {
                var opBuilder = new Operation.GetThirdPartyPlatformSubscriptionOwnershipByProductId.GetThirdPartyPlatformSubscriptionOwnershipByProductIdBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public QueryUserThirdPartySubscriptionTransactions.QueryUserThirdPartySubscriptionTransactionsBuilder QueryUserThirdPartySubscriptionTransactionsOp
        {
            get
            {
                var opBuilder = new Operation.QueryUserThirdPartySubscriptionTransactions.QueryUserThirdPartySubscriptionTransactionsBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public GetThirdPartySubscriptionDetails.GetThirdPartySubscriptionDetailsBuilder GetThirdPartySubscriptionDetailsOp
        {
            get
            {
                var opBuilder = new Operation.GetThirdPartySubscriptionDetails.GetThirdPartySubscriptionDetailsBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public GetSubscriptionHistory.GetSubscriptionHistoryBuilder GetSubscriptionHistoryOp
        {
            get
            {
                var opBuilder = new Operation.GetSubscriptionHistory.GetSubscriptionHistoryBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public SyncSubscriptionTransaction.SyncSubscriptionTransactionBuilder SyncSubscriptionTransactionOp
        {
            get
            {
                var opBuilder = new Operation.SyncSubscriptionTransaction.SyncSubscriptionTransactionBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public GetThirdPartyUserSubscriptionDetails.GetThirdPartyUserSubscriptionDetailsBuilder GetThirdPartyUserSubscriptionDetailsOp
        {
            get
            {
                var opBuilder = new Operation.GetThirdPartyUserSubscriptionDetails.GetThirdPartyUserSubscriptionDetailsBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public SyncSubscription.SyncSubscriptionBuilder SyncSubscriptionOp
        {
            get
            {
                var opBuilder = new Operation.SyncSubscription.SyncSubscriptionBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public PublicQueryUserThirdPartySubscription.PublicQueryUserThirdPartySubscriptionBuilder PublicQueryUserThirdPartySubscriptionOp
        {
            get
            {
                var opBuilder = new Operation.PublicQueryUserThirdPartySubscription.PublicQueryUserThirdPartySubscriptionBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        #endregion

        public Model.ThirdPartyUserSubscriptionPagingSlicedResult? QueryThirdPartySubscription(QueryThirdPartySubscription input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ThirdPartyUserSubscriptionPagingSlicedResult?> QueryThirdPartySubscriptionAsync(QueryThirdPartySubscription input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ThirdPartyUserSubscriptionPagingSlicedResult? QueryUserThirdPartySubscription(QueryUserThirdPartySubscription input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ThirdPartyUserSubscriptionPagingSlicedResult?> QueryUserThirdPartySubscriptionAsync(QueryUserThirdPartySubscription input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ThirdPartySubscriptionOwnership? GetThirdPartyPlatformSubscriptionOwnershipByGroupId(GetThirdPartyPlatformSubscriptionOwnershipByGroupId input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ThirdPartySubscriptionOwnership?> GetThirdPartyPlatformSubscriptionOwnershipByGroupIdAsync(GetThirdPartyPlatformSubscriptionOwnershipByGroupId input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ThirdPartySubscriptionOwnership? GetThirdPartyPlatformSubscriptionOwnershipByProductId(GetThirdPartyPlatformSubscriptionOwnershipByProductId input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ThirdPartySubscriptionOwnership?> GetThirdPartyPlatformSubscriptionOwnershipByProductIdAsync(GetThirdPartyPlatformSubscriptionOwnershipByProductId input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ThirdPartySubscriptionTransactionPagingSlicedResult? QueryUserThirdPartySubscriptionTransactions(QueryUserThirdPartySubscriptionTransactions input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ThirdPartySubscriptionTransactionPagingSlicedResult?> QueryUserThirdPartySubscriptionTransactionsAsync(QueryUserThirdPartySubscriptionTransactions input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ThirdPartySubscriptionTransactionInfo? GetThirdPartySubscriptionDetails(GetThirdPartySubscriptionDetails input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ThirdPartySubscriptionTransactionInfo?> GetThirdPartySubscriptionDetailsAsync(GetThirdPartySubscriptionDetails input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ThirdPartySubscriptionTransactionHistoryPagingSlicedResult? GetSubscriptionHistory(GetSubscriptionHistory input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ThirdPartySubscriptionTransactionHistoryPagingSlicedResult?> GetSubscriptionHistoryAsync(GetSubscriptionHistory input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ThirdPartySubscriptionTransactionInfo? SyncSubscriptionTransaction(SyncSubscriptionTransaction input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ThirdPartySubscriptionTransactionInfo?> SyncSubscriptionTransactionAsync(SyncSubscriptionTransaction input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ThirdPartyUserSubscriptionInfo? GetThirdPartyUserSubscriptionDetails(GetThirdPartyUserSubscriptionDetails input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ThirdPartyUserSubscriptionInfo?> GetThirdPartyUserSubscriptionDetailsAsync(GetThirdPartyUserSubscriptionDetails input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ThirdPartyUserSubscriptionInfo? SyncSubscription(SyncSubscription input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ThirdPartyUserSubscriptionInfo?> SyncSubscriptionAsync(SyncSubscription input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ThirdPartyUserSubscriptionPagingSlicedResult? PublicQueryUserThirdPartySubscription(PublicQueryUserThirdPartySubscription input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ThirdPartyUserSubscriptionPagingSlicedResult?> PublicQueryUserThirdPartySubscriptionAsync(PublicQueryUserThirdPartySubscription input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
    }
}