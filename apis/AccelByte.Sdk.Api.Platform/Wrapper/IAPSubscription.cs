// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;

using AccelByte.Sdk.Api.Platform.Model;
using AccelByte.Sdk.Api.Platform.Operation;

namespace AccelByte.Sdk.Api.Platform.Wrapper
{
    public class IAPSubscription
    {
        private readonly IAccelByteSdk _sdk;

        private string _CustomBasePath = String.Empty;

        public IAPSubscription(IAccelByteSdk sdk)
        {
            _sdk = sdk;
        }

        public IAPSubscription(IAccelByteSdk sdk, string customBasePath)
        {
            _sdk = sdk;
            _CustomBasePath = customBasePath;
        }

        #region Operation Builders
        public QueryThirdPartySubscription.QueryThirdPartySubscriptionBuilder QueryThirdPartySubscriptionOp
        {
            get
            {
                var opBuilder = new Operation.QueryThirdPartySubscription.QueryThirdPartySubscriptionBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public QueryUserThirdPartySubscription.QueryUserThirdPartySubscriptionBuilder QueryUserThirdPartySubscriptionOp
        {
            get
            {
                var opBuilder = new Operation.QueryUserThirdPartySubscription.QueryUserThirdPartySubscriptionBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public GetThirdPartyPlatformSubscriptionOwnershipByGroupId.GetThirdPartyPlatformSubscriptionOwnershipByGroupIdBuilder GetThirdPartyPlatformSubscriptionOwnershipByGroupIdOp
        {
            get
            {
                var opBuilder = new Operation.GetThirdPartyPlatformSubscriptionOwnershipByGroupId.GetThirdPartyPlatformSubscriptionOwnershipByGroupIdBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public GetThirdPartyPlatformSubscriptionOwnershipByProductId.GetThirdPartyPlatformSubscriptionOwnershipByProductIdBuilder GetThirdPartyPlatformSubscriptionOwnershipByProductIdOp
        {
            get
            {
                var opBuilder = new Operation.GetThirdPartyPlatformSubscriptionOwnershipByProductId.GetThirdPartyPlatformSubscriptionOwnershipByProductIdBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public QueryUserThirdPartySubscriptionTransactions.QueryUserThirdPartySubscriptionTransactionsBuilder QueryUserThirdPartySubscriptionTransactionsOp
        {
            get
            {
                var opBuilder = new Operation.QueryUserThirdPartySubscriptionTransactions.QueryUserThirdPartySubscriptionTransactionsBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public GetThirdPartySubscriptionDetails.GetThirdPartySubscriptionDetailsBuilder GetThirdPartySubscriptionDetailsOp
        {
            get
            {
                var opBuilder = new Operation.GetThirdPartySubscriptionDetails.GetThirdPartySubscriptionDetailsBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public GetSubscriptionHistory.GetSubscriptionHistoryBuilder GetSubscriptionHistoryOp
        {
            get
            {
                var opBuilder = new Operation.GetSubscriptionHistory.GetSubscriptionHistoryBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public SyncSubscriptionTransaction.SyncSubscriptionTransactionBuilder SyncSubscriptionTransactionOp
        {
            get
            {
                var opBuilder = new Operation.SyncSubscriptionTransaction.SyncSubscriptionTransactionBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public GetThirdPartyUserSubscriptionDetails.GetThirdPartyUserSubscriptionDetailsBuilder GetThirdPartyUserSubscriptionDetailsOp
        {
            get
            {
                var opBuilder = new Operation.GetThirdPartyUserSubscriptionDetails.GetThirdPartyUserSubscriptionDetailsBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public SyncSubscription.SyncSubscriptionBuilder SyncSubscriptionOp
        {
            get
            {
                var opBuilder = new Operation.SyncSubscription.SyncSubscriptionBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public PublicQueryUserThirdPartySubscription.PublicQueryUserThirdPartySubscriptionBuilder PublicQueryUserThirdPartySubscriptionOp
        {
            get
            {
                var opBuilder = new Operation.PublicQueryUserThirdPartySubscription.PublicQueryUserThirdPartySubscriptionBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        #endregion

        public QueryThirdPartySubscription.Response QueryThirdPartySubscription(QueryThirdPartySubscription input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<QueryThirdPartySubscription.Response> QueryThirdPartySubscriptionAsync(QueryThirdPartySubscription input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public QueryUserThirdPartySubscription.Response QueryUserThirdPartySubscription(QueryUserThirdPartySubscription input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<QueryUserThirdPartySubscription.Response> QueryUserThirdPartySubscriptionAsync(QueryUserThirdPartySubscription input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public GetThirdPartyPlatformSubscriptionOwnershipByGroupId.Response GetThirdPartyPlatformSubscriptionOwnershipByGroupId(GetThirdPartyPlatformSubscriptionOwnershipByGroupId input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<GetThirdPartyPlatformSubscriptionOwnershipByGroupId.Response> GetThirdPartyPlatformSubscriptionOwnershipByGroupIdAsync(GetThirdPartyPlatformSubscriptionOwnershipByGroupId input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public GetThirdPartyPlatformSubscriptionOwnershipByProductId.Response GetThirdPartyPlatformSubscriptionOwnershipByProductId(GetThirdPartyPlatformSubscriptionOwnershipByProductId input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<GetThirdPartyPlatformSubscriptionOwnershipByProductId.Response> GetThirdPartyPlatformSubscriptionOwnershipByProductIdAsync(GetThirdPartyPlatformSubscriptionOwnershipByProductId input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public QueryUserThirdPartySubscriptionTransactions.Response QueryUserThirdPartySubscriptionTransactions(QueryUserThirdPartySubscriptionTransactions input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<QueryUserThirdPartySubscriptionTransactions.Response> QueryUserThirdPartySubscriptionTransactionsAsync(QueryUserThirdPartySubscriptionTransactions input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public GetThirdPartySubscriptionDetails.Response GetThirdPartySubscriptionDetails(GetThirdPartySubscriptionDetails input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<GetThirdPartySubscriptionDetails.Response> GetThirdPartySubscriptionDetailsAsync(GetThirdPartySubscriptionDetails input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public GetSubscriptionHistory.Response GetSubscriptionHistory(GetSubscriptionHistory input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<GetSubscriptionHistory.Response> GetSubscriptionHistoryAsync(GetSubscriptionHistory input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public SyncSubscriptionTransaction.Response SyncSubscriptionTransaction(SyncSubscriptionTransaction input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<SyncSubscriptionTransaction.Response> SyncSubscriptionTransactionAsync(SyncSubscriptionTransaction input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public GetThirdPartyUserSubscriptionDetails.Response GetThirdPartyUserSubscriptionDetails(GetThirdPartyUserSubscriptionDetails input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<GetThirdPartyUserSubscriptionDetails.Response> GetThirdPartyUserSubscriptionDetailsAsync(GetThirdPartyUserSubscriptionDetails input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public SyncSubscription.Response SyncSubscription(SyncSubscription input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<SyncSubscription.Response> SyncSubscriptionAsync(SyncSubscription input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public PublicQueryUserThirdPartySubscription.Response PublicQueryUserThirdPartySubscription(PublicQueryUserThirdPartySubscription input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<PublicQueryUserThirdPartySubscription.Response> PublicQueryUserThirdPartySubscriptionAsync(PublicQueryUserThirdPartySubscription input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
    }
}