// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;

using AccelByte.Sdk.Api.Platform.Model;
using AccelByte.Sdk.Api.Platform.Operation;

namespace AccelByte.Sdk.Api.Platform.Wrapper
{
    public class Revocation
    {
        private readonly IAccelByteSdk _sdk;

        private string _CustomBasePath = String.Empty;

        public Revocation(IAccelByteSdk sdk)
        {
            _sdk = sdk;
        }

        public Revocation(IAccelByteSdk sdk, string customBasePath)
        {
            _sdk = sdk;
            _CustomBasePath = customBasePath;
        }

        #region Operation Builders
        public GetRevocationConfig.GetRevocationConfigBuilder GetRevocationConfigOp
        {
            get
            {
                var opBuilder = new Operation.GetRevocationConfig.GetRevocationConfigBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public UpdateRevocationConfig.UpdateRevocationConfigBuilder UpdateRevocationConfigOp
        {
            get
            {
                var opBuilder = new Operation.UpdateRevocationConfig.UpdateRevocationConfigBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public DeleteRevocationConfig.DeleteRevocationConfigBuilder DeleteRevocationConfigOp
        {
            get
            {
                var opBuilder = new Operation.DeleteRevocationConfig.DeleteRevocationConfigBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public QueryRevocationHistories.QueryRevocationHistoriesBuilder QueryRevocationHistoriesOp
        {
            get
            {
                var opBuilder = new Operation.QueryRevocationHistories.QueryRevocationHistoriesBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public DoRevocation.DoRevocationBuilder DoRevocationOp
        {
            get
            {
                var opBuilder = new Operation.DoRevocation.DoRevocationBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        #endregion

        public GetRevocationConfig.Response GetRevocationConfig(GetRevocationConfig input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<GetRevocationConfig.Response> GetRevocationConfigAsync(GetRevocationConfig input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public UpdateRevocationConfig.Response UpdateRevocationConfig(UpdateRevocationConfig input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<UpdateRevocationConfig.Response> UpdateRevocationConfigAsync(UpdateRevocationConfig input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public DeleteRevocationConfig.Response DeleteRevocationConfig(DeleteRevocationConfig input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<DeleteRevocationConfig.Response> DeleteRevocationConfigAsync(DeleteRevocationConfig input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public QueryRevocationHistories.Response QueryRevocationHistories(QueryRevocationHistories input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<QueryRevocationHistories.Response> QueryRevocationHistoriesAsync(QueryRevocationHistories input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public DoRevocation.Response DoRevocation(DoRevocation input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<DoRevocation.Response> DoRevocationAsync(DoRevocation input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
    }
}