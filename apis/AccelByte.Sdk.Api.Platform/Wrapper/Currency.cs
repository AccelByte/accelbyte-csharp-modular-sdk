// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;

using AccelByte.Sdk.Api.Platform.Model;
using AccelByte.Sdk.Api.Platform.Operation;

namespace AccelByte.Sdk.Api.Platform.Wrapper
{
    public class Currency
    {
        private readonly IAccelByteSdk _sdk;

        private string _CustomBasePath = String.Empty;

        public Currency(IAccelByteSdk sdk)
        {
            _sdk = sdk;
        }

        public Currency(IAccelByteSdk sdk, string customBasePath)
        {
            _sdk = sdk;
            _CustomBasePath = customBasePath;
        }

        #region Operation Builders
        public ListCurrencies.ListCurrenciesBuilder ListCurrenciesOp
        {
            get
            {
                var opBuilder = new Operation.ListCurrencies.ListCurrenciesBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public CreateCurrency.CreateCurrencyBuilder CreateCurrencyOp
        {
            get
            {
                var opBuilder = new Operation.CreateCurrency.CreateCurrencyBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public UpdateCurrency.UpdateCurrencyBuilder UpdateCurrencyOp
        {
            get
            {
                var opBuilder = new Operation.UpdateCurrency.UpdateCurrencyBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public DeleteCurrency.DeleteCurrencyBuilder DeleteCurrencyOp
        {
            get
            {
                var opBuilder = new Operation.DeleteCurrency.DeleteCurrencyBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public GetCurrencyConfig.GetCurrencyConfigBuilder GetCurrencyConfigOp
        {
            get
            {
                var opBuilder = new Operation.GetCurrencyConfig.GetCurrencyConfigBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public GetCurrencySummary.GetCurrencySummaryBuilder GetCurrencySummaryOp
        {
            get
            {
                var opBuilder = new Operation.GetCurrencySummary.GetCurrencySummaryBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public PublicListCurrencies.PublicListCurrenciesBuilder PublicListCurrenciesOp
        {
            get
            {
                var opBuilder = new Operation.PublicListCurrencies.PublicListCurrenciesBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        #endregion

        public List<Model.CurrencyInfo>? ListCurrencies(ListCurrencies input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<List<Model.CurrencyInfo>?> ListCurrenciesAsync(ListCurrencies input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.CurrencyInfo? CreateCurrency(CreateCurrency input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.CurrencyInfo?> CreateCurrencyAsync(CreateCurrency input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.CurrencyInfo? UpdateCurrency(UpdateCurrency input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.CurrencyInfo?> UpdateCurrencyAsync(UpdateCurrency input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.CurrencyInfo? DeleteCurrency(DeleteCurrency input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.CurrencyInfo?> DeleteCurrencyAsync(DeleteCurrency input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.CurrencyConfig? GetCurrencyConfig(GetCurrencyConfig input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.CurrencyConfig?> GetCurrencyConfigAsync(GetCurrencyConfig input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.CurrencySummary? GetCurrencySummary(GetCurrencySummary input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.CurrencySummary?> GetCurrencySummaryAsync(GetCurrencySummary input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public List<Model.CurrencyInfo>? PublicListCurrencies(PublicListCurrencies input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<List<Model.CurrencyInfo>?> PublicListCurrenciesAsync(PublicListCurrencies input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
    }
}