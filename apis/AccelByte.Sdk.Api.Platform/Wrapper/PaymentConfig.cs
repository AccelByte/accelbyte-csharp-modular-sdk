// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;

using AccelByte.Sdk.Api.Platform.Model;
using AccelByte.Sdk.Api.Platform.Operation;

namespace AccelByte.Sdk.Api.Platform.Wrapper
{
    public class PaymentConfig
    {
        private readonly IAccelByteSdk _sdk;

        private string _CustomBasePath = String.Empty;

        public PaymentConfig(IAccelByteSdk sdk)
        {
            _sdk = sdk;
        }

        public PaymentConfig(IAccelByteSdk sdk, string customBasePath)
        {
            _sdk = sdk;
            _CustomBasePath = customBasePath;
        }

        #region Operation Builders
        public GetPaymentMerchantConfig.GetPaymentMerchantConfigBuilder GetPaymentMerchantConfigOp
        {
            get
            {
                var opBuilder = new Operation.GetPaymentMerchantConfig.GetPaymentMerchantConfigBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public UpdatePaymentDomainWhitelistConfig.UpdatePaymentDomainWhitelistConfigBuilder UpdatePaymentDomainWhitelistConfigOp
        {
            get
            {
                var opBuilder = new Operation.UpdatePaymentDomainWhitelistConfig.UpdatePaymentDomainWhitelistConfigBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public TestAdyenConfig.TestAdyenConfigBuilder TestAdyenConfigOp
        {
            get
            {
                var opBuilder = new Operation.TestAdyenConfig.TestAdyenConfigBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public TestAliPayConfig.TestAliPayConfigBuilder TestAliPayConfigOp
        {
            get
            {
                var opBuilder = new Operation.TestAliPayConfig.TestAliPayConfigBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public TestCheckoutConfig.TestCheckoutConfigBuilder TestCheckoutConfigOp
        {
            get
            {
                var opBuilder = new Operation.TestCheckoutConfig.TestCheckoutConfigBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public DebugMatchedPaymentMerchantConfig.DebugMatchedPaymentMerchantConfigBuilder DebugMatchedPaymentMerchantConfigOp
        {
            get
            {
                var opBuilder = new Operation.DebugMatchedPaymentMerchantConfig.DebugMatchedPaymentMerchantConfigBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public TestNeonPayConfig.TestNeonPayConfigBuilder TestNeonPayConfigOp
        {
            get
            {
                var opBuilder = new Operation.TestNeonPayConfig.TestNeonPayConfigBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public TestPayPalConfig.TestPayPalConfigBuilder TestPayPalConfigOp
        {
            get
            {
                var opBuilder = new Operation.TestPayPalConfig.TestPayPalConfigBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public TestStripeConfig.TestStripeConfigBuilder TestStripeConfigOp
        {
            get
            {
                var opBuilder = new Operation.TestStripeConfig.TestStripeConfigBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public TestWxPayConfig.TestWxPayConfigBuilder TestWxPayConfigOp
        {
            get
            {
                var opBuilder = new Operation.TestWxPayConfig.TestWxPayConfigBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public TestXsollaConfig.TestXsollaConfigBuilder TestXsollaConfigOp
        {
            get
            {
                var opBuilder = new Operation.TestXsollaConfig.TestXsollaConfigBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public GetPaymentMerchantConfig1.GetPaymentMerchantConfig1Builder GetPaymentMerchantConfig1Op
        {
            get
            {
                var opBuilder = new Operation.GetPaymentMerchantConfig1.GetPaymentMerchantConfig1Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public UpdateAdyenConfig.UpdateAdyenConfigBuilder UpdateAdyenConfigOp
        {
            get
            {
                var opBuilder = new Operation.UpdateAdyenConfig.UpdateAdyenConfigBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public TestAdyenConfigById.TestAdyenConfigByIdBuilder TestAdyenConfigByIdOp
        {
            get
            {
                var opBuilder = new Operation.TestAdyenConfigById.TestAdyenConfigByIdBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public UpdateAliPayConfig.UpdateAliPayConfigBuilder UpdateAliPayConfigOp
        {
            get
            {
                var opBuilder = new Operation.UpdateAliPayConfig.UpdateAliPayConfigBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public TestAliPayConfigById.TestAliPayConfigByIdBuilder TestAliPayConfigByIdOp
        {
            get
            {
                var opBuilder = new Operation.TestAliPayConfigById.TestAliPayConfigByIdBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public UpdateCheckoutConfig.UpdateCheckoutConfigBuilder UpdateCheckoutConfigOp
        {
            get
            {
                var opBuilder = new Operation.UpdateCheckoutConfig.UpdateCheckoutConfigBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public TestCheckoutConfigById.TestCheckoutConfigByIdBuilder TestCheckoutConfigByIdOp
        {
            get
            {
                var opBuilder = new Operation.TestCheckoutConfigById.TestCheckoutConfigByIdBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public UpdateNeonPayConfig.UpdateNeonPayConfigBuilder UpdateNeonPayConfigOp
        {
            get
            {
                var opBuilder = new Operation.UpdateNeonPayConfig.UpdateNeonPayConfigBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public TestNeonPayConfigById.TestNeonPayConfigByIdBuilder TestNeonPayConfigByIdOp
        {
            get
            {
                var opBuilder = new Operation.TestNeonPayConfigById.TestNeonPayConfigByIdBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public UpdatePayPalConfig.UpdatePayPalConfigBuilder UpdatePayPalConfigOp
        {
            get
            {
                var opBuilder = new Operation.UpdatePayPalConfig.UpdatePayPalConfigBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public TestPayPalConfigById.TestPayPalConfigByIdBuilder TestPayPalConfigByIdOp
        {
            get
            {
                var opBuilder = new Operation.TestPayPalConfigById.TestPayPalConfigByIdBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public UpdateStripeConfig.UpdateStripeConfigBuilder UpdateStripeConfigOp
        {
            get
            {
                var opBuilder = new Operation.UpdateStripeConfig.UpdateStripeConfigBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public TestStripeConfigById.TestStripeConfigByIdBuilder TestStripeConfigByIdOp
        {
            get
            {
                var opBuilder = new Operation.TestStripeConfigById.TestStripeConfigByIdBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public UpdateWxPayConfig.UpdateWxPayConfigBuilder UpdateWxPayConfigOp
        {
            get
            {
                var opBuilder = new Operation.UpdateWxPayConfig.UpdateWxPayConfigBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public UpdateWxPayConfigCert.UpdateWxPayConfigCertBuilder UpdateWxPayConfigCertOp
        {
            get
            {
                var opBuilder = new Operation.UpdateWxPayConfigCert.UpdateWxPayConfigCertBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public TestWxPayConfigById.TestWxPayConfigByIdBuilder TestWxPayConfigByIdOp
        {
            get
            {
                var opBuilder = new Operation.TestWxPayConfigById.TestWxPayConfigByIdBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public UpdateXsollaConfig.UpdateXsollaConfigBuilder UpdateXsollaConfigOp
        {
            get
            {
                var opBuilder = new Operation.UpdateXsollaConfig.UpdateXsollaConfigBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public TestXsollaConfigById.TestXsollaConfigByIdBuilder TestXsollaConfigByIdOp
        {
            get
            {
                var opBuilder = new Operation.TestXsollaConfigById.TestXsollaConfigByIdBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public UpdateXsollaUIConfig.UpdateXsollaUIConfigBuilder UpdateXsollaUIConfigOp
        {
            get
            {
                var opBuilder = new Operation.UpdateXsollaUIConfig.UpdateXsollaUIConfigBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public QueryPaymentProviderConfig.QueryPaymentProviderConfigBuilder QueryPaymentProviderConfigOp
        {
            get
            {
                var opBuilder = new Operation.QueryPaymentProviderConfig.QueryPaymentProviderConfigBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public CreatePaymentProviderConfig.CreatePaymentProviderConfigBuilder CreatePaymentProviderConfigOp
        {
            get
            {
                var opBuilder = new Operation.CreatePaymentProviderConfig.CreatePaymentProviderConfigBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public GetAggregatePaymentProviders.GetAggregatePaymentProvidersBuilder GetAggregatePaymentProvidersOp
        {
            get
            {
                var opBuilder = new Operation.GetAggregatePaymentProviders.GetAggregatePaymentProvidersBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public DebugMatchedPaymentProviderConfig.DebugMatchedPaymentProviderConfigBuilder DebugMatchedPaymentProviderConfigOp
        {
            get
            {
                var opBuilder = new Operation.DebugMatchedPaymentProviderConfig.DebugMatchedPaymentProviderConfigBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public GetSpecialPaymentProviders.GetSpecialPaymentProvidersBuilder GetSpecialPaymentProvidersOp
        {
            get
            {
                var opBuilder = new Operation.GetSpecialPaymentProviders.GetSpecialPaymentProvidersBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public UpdatePaymentProviderConfig.UpdatePaymentProviderConfigBuilder UpdatePaymentProviderConfigOp
        {
            get
            {
                var opBuilder = new Operation.UpdatePaymentProviderConfig.UpdatePaymentProviderConfigBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public DeletePaymentProviderConfig.DeletePaymentProviderConfigBuilder DeletePaymentProviderConfigOp
        {
            get
            {
                var opBuilder = new Operation.DeletePaymentProviderConfig.DeletePaymentProviderConfigBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public GetPaymentTaxConfig.GetPaymentTaxConfigBuilder GetPaymentTaxConfigOp
        {
            get
            {
                var opBuilder = new Operation.GetPaymentTaxConfig.GetPaymentTaxConfigBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public UpdatePaymentTaxConfig.UpdatePaymentTaxConfigBuilder UpdatePaymentTaxConfigOp
        {
            get
            {
                var opBuilder = new Operation.UpdatePaymentTaxConfig.UpdatePaymentTaxConfigBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        #endregion

        public GetPaymentMerchantConfig.Response GetPaymentMerchantConfig(GetPaymentMerchantConfig input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<GetPaymentMerchantConfig.Response> GetPaymentMerchantConfigAsync(GetPaymentMerchantConfig input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public UpdatePaymentDomainWhitelistConfig.Response UpdatePaymentDomainWhitelistConfig(UpdatePaymentDomainWhitelistConfig input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<UpdatePaymentDomainWhitelistConfig.Response> UpdatePaymentDomainWhitelistConfigAsync(UpdatePaymentDomainWhitelistConfig input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public TestAdyenConfig.Response TestAdyenConfig(TestAdyenConfig input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<TestAdyenConfig.Response> TestAdyenConfigAsync(TestAdyenConfig input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public TestAliPayConfig.Response TestAliPayConfig(TestAliPayConfig input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<TestAliPayConfig.Response> TestAliPayConfigAsync(TestAliPayConfig input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public TestCheckoutConfig.Response TestCheckoutConfig(TestCheckoutConfig input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<TestCheckoutConfig.Response> TestCheckoutConfigAsync(TestCheckoutConfig input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public DebugMatchedPaymentMerchantConfig.Response DebugMatchedPaymentMerchantConfig(DebugMatchedPaymentMerchantConfig input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<DebugMatchedPaymentMerchantConfig.Response> DebugMatchedPaymentMerchantConfigAsync(DebugMatchedPaymentMerchantConfig input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public TestNeonPayConfig.Response TestNeonPayConfig(TestNeonPayConfig input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<TestNeonPayConfig.Response> TestNeonPayConfigAsync(TestNeonPayConfig input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public TestPayPalConfig.Response TestPayPalConfig(TestPayPalConfig input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<TestPayPalConfig.Response> TestPayPalConfigAsync(TestPayPalConfig input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public TestStripeConfig.Response TestStripeConfig(TestStripeConfig input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<TestStripeConfig.Response> TestStripeConfigAsync(TestStripeConfig input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public TestWxPayConfig.Response TestWxPayConfig(TestWxPayConfig input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<TestWxPayConfig.Response> TestWxPayConfigAsync(TestWxPayConfig input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public TestXsollaConfig.Response TestXsollaConfig(TestXsollaConfig input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<TestXsollaConfig.Response> TestXsollaConfigAsync(TestXsollaConfig input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public GetPaymentMerchantConfig1.Response GetPaymentMerchantConfig1(GetPaymentMerchantConfig1 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<GetPaymentMerchantConfig1.Response> GetPaymentMerchantConfig1Async(GetPaymentMerchantConfig1 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public UpdateAdyenConfig.Response UpdateAdyenConfig(UpdateAdyenConfig input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<UpdateAdyenConfig.Response> UpdateAdyenConfigAsync(UpdateAdyenConfig input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public TestAdyenConfigById.Response TestAdyenConfigById(TestAdyenConfigById input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<TestAdyenConfigById.Response> TestAdyenConfigByIdAsync(TestAdyenConfigById input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public UpdateAliPayConfig.Response UpdateAliPayConfig(UpdateAliPayConfig input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<UpdateAliPayConfig.Response> UpdateAliPayConfigAsync(UpdateAliPayConfig input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public TestAliPayConfigById.Response TestAliPayConfigById(TestAliPayConfigById input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<TestAliPayConfigById.Response> TestAliPayConfigByIdAsync(TestAliPayConfigById input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public UpdateCheckoutConfig.Response UpdateCheckoutConfig(UpdateCheckoutConfig input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<UpdateCheckoutConfig.Response> UpdateCheckoutConfigAsync(UpdateCheckoutConfig input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public TestCheckoutConfigById.Response TestCheckoutConfigById(TestCheckoutConfigById input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<TestCheckoutConfigById.Response> TestCheckoutConfigByIdAsync(TestCheckoutConfigById input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public UpdateNeonPayConfig.Response UpdateNeonPayConfig(UpdateNeonPayConfig input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<UpdateNeonPayConfig.Response> UpdateNeonPayConfigAsync(UpdateNeonPayConfig input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public TestNeonPayConfigById.Response TestNeonPayConfigById(TestNeonPayConfigById input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<TestNeonPayConfigById.Response> TestNeonPayConfigByIdAsync(TestNeonPayConfigById input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public UpdatePayPalConfig.Response UpdatePayPalConfig(UpdatePayPalConfig input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<UpdatePayPalConfig.Response> UpdatePayPalConfigAsync(UpdatePayPalConfig input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public TestPayPalConfigById.Response TestPayPalConfigById(TestPayPalConfigById input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<TestPayPalConfigById.Response> TestPayPalConfigByIdAsync(TestPayPalConfigById input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public UpdateStripeConfig.Response UpdateStripeConfig(UpdateStripeConfig input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<UpdateStripeConfig.Response> UpdateStripeConfigAsync(UpdateStripeConfig input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public TestStripeConfigById.Response TestStripeConfigById(TestStripeConfigById input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<TestStripeConfigById.Response> TestStripeConfigByIdAsync(TestStripeConfigById input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public UpdateWxPayConfig.Response UpdateWxPayConfig(UpdateWxPayConfig input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<UpdateWxPayConfig.Response> UpdateWxPayConfigAsync(UpdateWxPayConfig input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public UpdateWxPayConfigCert.Response UpdateWxPayConfigCert(UpdateWxPayConfigCert input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<UpdateWxPayConfigCert.Response> UpdateWxPayConfigCertAsync(UpdateWxPayConfigCert input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public TestWxPayConfigById.Response TestWxPayConfigById(TestWxPayConfigById input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<TestWxPayConfigById.Response> TestWxPayConfigByIdAsync(TestWxPayConfigById input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public UpdateXsollaConfig.Response UpdateXsollaConfig(UpdateXsollaConfig input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<UpdateXsollaConfig.Response> UpdateXsollaConfigAsync(UpdateXsollaConfig input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public TestXsollaConfigById.Response TestXsollaConfigById(TestXsollaConfigById input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<TestXsollaConfigById.Response> TestXsollaConfigByIdAsync(TestXsollaConfigById input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public UpdateXsollaUIConfig.Response UpdateXsollaUIConfig(UpdateXsollaUIConfig input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<UpdateXsollaUIConfig.Response> UpdateXsollaUIConfigAsync(UpdateXsollaUIConfig input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public QueryPaymentProviderConfig.Response QueryPaymentProviderConfig(QueryPaymentProviderConfig input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<QueryPaymentProviderConfig.Response> QueryPaymentProviderConfigAsync(QueryPaymentProviderConfig input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public CreatePaymentProviderConfig.Response CreatePaymentProviderConfig(CreatePaymentProviderConfig input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<CreatePaymentProviderConfig.Response> CreatePaymentProviderConfigAsync(CreatePaymentProviderConfig input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public GetAggregatePaymentProviders.Response GetAggregatePaymentProviders(GetAggregatePaymentProviders input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<GetAggregatePaymentProviders.Response> GetAggregatePaymentProvidersAsync(GetAggregatePaymentProviders input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public DebugMatchedPaymentProviderConfig.Response DebugMatchedPaymentProviderConfig(DebugMatchedPaymentProviderConfig input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<DebugMatchedPaymentProviderConfig.Response> DebugMatchedPaymentProviderConfigAsync(DebugMatchedPaymentProviderConfig input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public GetSpecialPaymentProviders.Response GetSpecialPaymentProviders(GetSpecialPaymentProviders input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<GetSpecialPaymentProviders.Response> GetSpecialPaymentProvidersAsync(GetSpecialPaymentProviders input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public UpdatePaymentProviderConfig.Response UpdatePaymentProviderConfig(UpdatePaymentProviderConfig input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<UpdatePaymentProviderConfig.Response> UpdatePaymentProviderConfigAsync(UpdatePaymentProviderConfig input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public DeletePaymentProviderConfig.Response DeletePaymentProviderConfig(DeletePaymentProviderConfig input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<DeletePaymentProviderConfig.Response> DeletePaymentProviderConfigAsync(DeletePaymentProviderConfig input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public GetPaymentTaxConfig.Response GetPaymentTaxConfig(GetPaymentTaxConfig input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<GetPaymentTaxConfig.Response> GetPaymentTaxConfigAsync(GetPaymentTaxConfig input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public UpdatePaymentTaxConfig.Response UpdatePaymentTaxConfig(UpdatePaymentTaxConfig input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<UpdatePaymentTaxConfig.Response> UpdatePaymentTaxConfigAsync(UpdatePaymentTaxConfig input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
    }
}