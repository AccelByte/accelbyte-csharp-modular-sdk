// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;

using AccelByte.Sdk.Api.Platform.Model;
using AccelByte.Sdk.Api.Platform.Operation;

namespace AccelByte.Sdk.Api.Platform.Wrapper
{
    public class PaymentConfig
    {
        private readonly IAccelByteSdk _sdk;

        private string _CustomBasePath = String.Empty;

        public PaymentConfig(IAccelByteSdk sdk)
        {
            _sdk = sdk;
        }

        public PaymentConfig(IAccelByteSdk sdk, string customBasePath)
        {
            _sdk = sdk;
            _CustomBasePath = customBasePath;
        }

        #region Operation Builders
        public TestAdyenConfig.TestAdyenConfigBuilder TestAdyenConfigOp
        {
            get
            {
                var opBuilder = new Operation.TestAdyenConfig.TestAdyenConfigBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public TestAliPayConfig.TestAliPayConfigBuilder TestAliPayConfigOp
        {
            get
            {
                var opBuilder = new Operation.TestAliPayConfig.TestAliPayConfigBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public TestCheckoutConfig.TestCheckoutConfigBuilder TestCheckoutConfigOp
        {
            get
            {
                var opBuilder = new Operation.TestCheckoutConfig.TestCheckoutConfigBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public DebugMatchedPaymentMerchantConfig.DebugMatchedPaymentMerchantConfigBuilder DebugMatchedPaymentMerchantConfigOp
        {
            get
            {
                var opBuilder = new Operation.DebugMatchedPaymentMerchantConfig.DebugMatchedPaymentMerchantConfigBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public TestPayPalConfig.TestPayPalConfigBuilder TestPayPalConfigOp
        {
            get
            {
                var opBuilder = new Operation.TestPayPalConfig.TestPayPalConfigBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public TestStripeConfig.TestStripeConfigBuilder TestStripeConfigOp
        {
            get
            {
                var opBuilder = new Operation.TestStripeConfig.TestStripeConfigBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public TestWxPayConfig.TestWxPayConfigBuilder TestWxPayConfigOp
        {
            get
            {
                var opBuilder = new Operation.TestWxPayConfig.TestWxPayConfigBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public TestXsollaConfig.TestXsollaConfigBuilder TestXsollaConfigOp
        {
            get
            {
                var opBuilder = new Operation.TestXsollaConfig.TestXsollaConfigBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public GetPaymentMerchantConfig.GetPaymentMerchantConfigBuilder GetPaymentMerchantConfigOp
        {
            get
            {
                var opBuilder = new Operation.GetPaymentMerchantConfig.GetPaymentMerchantConfigBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public UpdateAdyenConfig.UpdateAdyenConfigBuilder UpdateAdyenConfigOp
        {
            get
            {
                var opBuilder = new Operation.UpdateAdyenConfig.UpdateAdyenConfigBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public TestAdyenConfigById.TestAdyenConfigByIdBuilder TestAdyenConfigByIdOp
        {
            get
            {
                var opBuilder = new Operation.TestAdyenConfigById.TestAdyenConfigByIdBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public UpdateAliPayConfig.UpdateAliPayConfigBuilder UpdateAliPayConfigOp
        {
            get
            {
                var opBuilder = new Operation.UpdateAliPayConfig.UpdateAliPayConfigBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public TestAliPayConfigById.TestAliPayConfigByIdBuilder TestAliPayConfigByIdOp
        {
            get
            {
                var opBuilder = new Operation.TestAliPayConfigById.TestAliPayConfigByIdBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public UpdateCheckoutConfig.UpdateCheckoutConfigBuilder UpdateCheckoutConfigOp
        {
            get
            {
                var opBuilder = new Operation.UpdateCheckoutConfig.UpdateCheckoutConfigBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public TestCheckoutConfigById.TestCheckoutConfigByIdBuilder TestCheckoutConfigByIdOp
        {
            get
            {
                var opBuilder = new Operation.TestCheckoutConfigById.TestCheckoutConfigByIdBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public UpdatePayPalConfig.UpdatePayPalConfigBuilder UpdatePayPalConfigOp
        {
            get
            {
                var opBuilder = new Operation.UpdatePayPalConfig.UpdatePayPalConfigBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public TestPayPalConfigById.TestPayPalConfigByIdBuilder TestPayPalConfigByIdOp
        {
            get
            {
                var opBuilder = new Operation.TestPayPalConfigById.TestPayPalConfigByIdBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public UpdateStripeConfig.UpdateStripeConfigBuilder UpdateStripeConfigOp
        {
            get
            {
                var opBuilder = new Operation.UpdateStripeConfig.UpdateStripeConfigBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public TestStripeConfigById.TestStripeConfigByIdBuilder TestStripeConfigByIdOp
        {
            get
            {
                var opBuilder = new Operation.TestStripeConfigById.TestStripeConfigByIdBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public UpdateWxPayConfig.UpdateWxPayConfigBuilder UpdateWxPayConfigOp
        {
            get
            {
                var opBuilder = new Operation.UpdateWxPayConfig.UpdateWxPayConfigBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public UpdateWxPayConfigCert.UpdateWxPayConfigCertBuilder UpdateWxPayConfigCertOp
        {
            get
            {
                var opBuilder = new Operation.UpdateWxPayConfigCert.UpdateWxPayConfigCertBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public TestWxPayConfigById.TestWxPayConfigByIdBuilder TestWxPayConfigByIdOp
        {
            get
            {
                var opBuilder = new Operation.TestWxPayConfigById.TestWxPayConfigByIdBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public UpdateXsollaConfig.UpdateXsollaConfigBuilder UpdateXsollaConfigOp
        {
            get
            {
                var opBuilder = new Operation.UpdateXsollaConfig.UpdateXsollaConfigBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public TestXsollaConfigById.TestXsollaConfigByIdBuilder TestXsollaConfigByIdOp
        {
            get
            {
                var opBuilder = new Operation.TestXsollaConfigById.TestXsollaConfigByIdBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public UpdateXsollaUIConfig.UpdateXsollaUIConfigBuilder UpdateXsollaUIConfigOp
        {
            get
            {
                var opBuilder = new Operation.UpdateXsollaUIConfig.UpdateXsollaUIConfigBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public QueryPaymentProviderConfig.QueryPaymentProviderConfigBuilder QueryPaymentProviderConfigOp
        {
            get
            {
                var opBuilder = new Operation.QueryPaymentProviderConfig.QueryPaymentProviderConfigBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public CreatePaymentProviderConfig.CreatePaymentProviderConfigBuilder CreatePaymentProviderConfigOp
        {
            get
            {
                var opBuilder = new Operation.CreatePaymentProviderConfig.CreatePaymentProviderConfigBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public GetAggregatePaymentProviders.GetAggregatePaymentProvidersBuilder GetAggregatePaymentProvidersOp
        {
            get
            {
                var opBuilder = new Operation.GetAggregatePaymentProviders.GetAggregatePaymentProvidersBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public DebugMatchedPaymentProviderConfig.DebugMatchedPaymentProviderConfigBuilder DebugMatchedPaymentProviderConfigOp
        {
            get
            {
                var opBuilder = new Operation.DebugMatchedPaymentProviderConfig.DebugMatchedPaymentProviderConfigBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public GetSpecialPaymentProviders.GetSpecialPaymentProvidersBuilder GetSpecialPaymentProvidersOp
        {
            get
            {
                var opBuilder = new Operation.GetSpecialPaymentProviders.GetSpecialPaymentProvidersBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public UpdatePaymentProviderConfig.UpdatePaymentProviderConfigBuilder UpdatePaymentProviderConfigOp
        {
            get
            {
                var opBuilder = new Operation.UpdatePaymentProviderConfig.UpdatePaymentProviderConfigBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public DeletePaymentProviderConfig.DeletePaymentProviderConfigBuilder DeletePaymentProviderConfigOp
        {
            get
            {
                var opBuilder = new Operation.DeletePaymentProviderConfig.DeletePaymentProviderConfigBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public GetPaymentTaxConfig.GetPaymentTaxConfigBuilder GetPaymentTaxConfigOp
        {
            get
            {
                var opBuilder = new Operation.GetPaymentTaxConfig.GetPaymentTaxConfigBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public UpdatePaymentTaxConfig.UpdatePaymentTaxConfigBuilder UpdatePaymentTaxConfigOp
        {
            get
            {
                var opBuilder = new Operation.UpdatePaymentTaxConfig.UpdatePaymentTaxConfigBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        #endregion

        public Model.TestResult? TestAdyenConfig(TestAdyenConfig input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.TestResult?> TestAdyenConfigAsync(TestAdyenConfig input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.TestResult? TestAliPayConfig(TestAliPayConfig input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.TestResult?> TestAliPayConfigAsync(TestAliPayConfig input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.TestResult? TestCheckoutConfig(TestCheckoutConfig input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.TestResult?> TestCheckoutConfigAsync(TestCheckoutConfig input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.PaymentMerchantConfigInfo? DebugMatchedPaymentMerchantConfig(DebugMatchedPaymentMerchantConfig input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.PaymentMerchantConfigInfo?> DebugMatchedPaymentMerchantConfigAsync(DebugMatchedPaymentMerchantConfig input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.TestResult? TestPayPalConfig(TestPayPalConfig input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.TestResult?> TestPayPalConfigAsync(TestPayPalConfig input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.TestResult? TestStripeConfig(TestStripeConfig input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.TestResult?> TestStripeConfigAsync(TestStripeConfig input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.TestResult? TestWxPayConfig(TestWxPayConfig input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.TestResult?> TestWxPayConfigAsync(TestWxPayConfig input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.TestResult? TestXsollaConfig(TestXsollaConfig input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.TestResult?> TestXsollaConfigAsync(TestXsollaConfig input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.PaymentMerchantConfigInfo? GetPaymentMerchantConfig(GetPaymentMerchantConfig input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.PaymentMerchantConfigInfo?> GetPaymentMerchantConfigAsync(GetPaymentMerchantConfig input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.PaymentMerchantConfigInfo? UpdateAdyenConfig(UpdateAdyenConfig input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.PaymentMerchantConfigInfo?> UpdateAdyenConfigAsync(UpdateAdyenConfig input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.TestResult? TestAdyenConfigById(TestAdyenConfigById input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.TestResult?> TestAdyenConfigByIdAsync(TestAdyenConfigById input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.PaymentMerchantConfigInfo? UpdateAliPayConfig(UpdateAliPayConfig input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.PaymentMerchantConfigInfo?> UpdateAliPayConfigAsync(UpdateAliPayConfig input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.TestResult? TestAliPayConfigById(TestAliPayConfigById input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.TestResult?> TestAliPayConfigByIdAsync(TestAliPayConfigById input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.PaymentMerchantConfigInfo? UpdateCheckoutConfig(UpdateCheckoutConfig input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.PaymentMerchantConfigInfo?> UpdateCheckoutConfigAsync(UpdateCheckoutConfig input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.TestResult? TestCheckoutConfigById(TestCheckoutConfigById input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.TestResult?> TestCheckoutConfigByIdAsync(TestCheckoutConfigById input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.PaymentMerchantConfigInfo? UpdatePayPalConfig(UpdatePayPalConfig input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.PaymentMerchantConfigInfo?> UpdatePayPalConfigAsync(UpdatePayPalConfig input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.TestResult? TestPayPalConfigById(TestPayPalConfigById input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.TestResult?> TestPayPalConfigByIdAsync(TestPayPalConfigById input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.PaymentMerchantConfigInfo? UpdateStripeConfig(UpdateStripeConfig input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.PaymentMerchantConfigInfo?> UpdateStripeConfigAsync(UpdateStripeConfig input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.TestResult? TestStripeConfigById(TestStripeConfigById input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.TestResult?> TestStripeConfigByIdAsync(TestStripeConfigById input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.PaymentMerchantConfigInfo? UpdateWxPayConfig(UpdateWxPayConfig input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.PaymentMerchantConfigInfo?> UpdateWxPayConfigAsync(UpdateWxPayConfig input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.PaymentMerchantConfigInfo? UpdateWxPayConfigCert(UpdateWxPayConfigCert input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.PaymentMerchantConfigInfo?> UpdateWxPayConfigCertAsync(UpdateWxPayConfigCert input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.TestResult? TestWxPayConfigById(TestWxPayConfigById input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.TestResult?> TestWxPayConfigByIdAsync(TestWxPayConfigById input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.PaymentMerchantConfigInfo? UpdateXsollaConfig(UpdateXsollaConfig input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.PaymentMerchantConfigInfo?> UpdateXsollaConfigAsync(UpdateXsollaConfig input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.TestResult? TestXsollaConfigById(TestXsollaConfigById input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.TestResult?> TestXsollaConfigByIdAsync(TestXsollaConfigById input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.PaymentMerchantConfigInfo? UpdateXsollaUIConfig(UpdateXsollaUIConfig input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.PaymentMerchantConfigInfo?> UpdateXsollaUIConfigAsync(UpdateXsollaUIConfig input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.PaymentProviderConfigPagingSlicedResult? QueryPaymentProviderConfig(QueryPaymentProviderConfig input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.PaymentProviderConfigPagingSlicedResult?> QueryPaymentProviderConfigAsync(QueryPaymentProviderConfig input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.PaymentProviderConfigInfo? CreatePaymentProviderConfig(CreatePaymentProviderConfig input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.PaymentProviderConfigInfo?> CreatePaymentProviderConfigAsync(CreatePaymentProviderConfig input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public List<string>? GetAggregatePaymentProviders(GetAggregatePaymentProviders input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<List<string>?> GetAggregatePaymentProvidersAsync(GetAggregatePaymentProviders input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.PaymentProviderConfigInfo? DebugMatchedPaymentProviderConfig(DebugMatchedPaymentProviderConfig input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.PaymentProviderConfigInfo?> DebugMatchedPaymentProviderConfigAsync(DebugMatchedPaymentProviderConfig input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public List<string>? GetSpecialPaymentProviders(GetSpecialPaymentProviders input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<List<string>?> GetSpecialPaymentProvidersAsync(GetSpecialPaymentProviders input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.PaymentProviderConfigInfo? UpdatePaymentProviderConfig(UpdatePaymentProviderConfig input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.PaymentProviderConfigInfo?> UpdatePaymentProviderConfigAsync(UpdatePaymentProviderConfig input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public void DeletePaymentProviderConfig(DeletePaymentProviderConfig input)
        {
            var response = _sdk.RunRequest(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task DeletePaymentProviderConfigAsync(DeletePaymentProviderConfig input)
        {
            var response = await _sdk.RunRequestAsync(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.PaymentTaxConfigInfo? GetPaymentTaxConfig(GetPaymentTaxConfig input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.PaymentTaxConfigInfo?> GetPaymentTaxConfigAsync(GetPaymentTaxConfig input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.PaymentTaxConfigInfo? UpdatePaymentTaxConfig(UpdatePaymentTaxConfig input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.PaymentTaxConfigInfo?> UpdatePaymentTaxConfigAsync(UpdatePaymentTaxConfig input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
    }
}