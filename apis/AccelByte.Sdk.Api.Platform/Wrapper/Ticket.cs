// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;

using AccelByte.Sdk.Api.Platform.Model;
using AccelByte.Sdk.Api.Platform.Operation;

namespace AccelByte.Sdk.Api.Platform.Wrapper
{
    public class Ticket
    {
        private readonly IAccelByteSdk _sdk;

        public Ticket(IAccelByteSdk sdk)
        {
            _sdk = sdk;
        }

        #region Operation Builders
        public GetTicketDynamic.GetTicketDynamicBuilder GetTicketDynamicOp
        {
            get { return new Operation.GetTicketDynamic.GetTicketDynamicBuilder(_sdk); }
        }
        public DecreaseTicketSale.DecreaseTicketSaleBuilder DecreaseTicketSaleOp
        {
            get { return new Operation.DecreaseTicketSale.DecreaseTicketSaleBuilder(_sdk); }
        }
        public GetTicketBoothID.GetTicketBoothIDBuilder GetTicketBoothIDOp
        {
            get { return new Operation.GetTicketBoothID.GetTicketBoothIDBuilder(_sdk); }
        }
        public IncreaseTicketSale.IncreaseTicketSaleBuilder IncreaseTicketSaleOp
        {
            get { return new Operation.IncreaseTicketSale.IncreaseTicketSaleBuilder(_sdk); }
        }
        public AcquireUserTicket.AcquireUserTicketBuilder AcquireUserTicketOp
        {
            get { return new Operation.AcquireUserTicket.AcquireUserTicketBuilder(_sdk); }
        }
        #endregion

        public Model.TicketDynamicInfo? GetTicketDynamic(GetTicketDynamic input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.TicketDynamicInfo?> GetTicketDynamicAsync(GetTicketDynamic input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public void DecreaseTicketSale(DecreaseTicketSale input)
        {
            var response = _sdk.RunRequest(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task DecreaseTicketSaleAsync(DecreaseTicketSale input)
        {
            var response = await _sdk.RunRequestAsync(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.TicketBoothID? GetTicketBoothID(GetTicketBoothID input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.TicketBoothID?> GetTicketBoothIDAsync(GetTicketBoothID input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.TicketSaleIncrementResult? IncreaseTicketSale(IncreaseTicketSale input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.TicketSaleIncrementResult?> IncreaseTicketSaleAsync(IncreaseTicketSale input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.TicketAcquireResult? AcquireUserTicket(AcquireUserTicket input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.TicketAcquireResult?> AcquireUserTicketAsync(AcquireUserTicket input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
    }
}