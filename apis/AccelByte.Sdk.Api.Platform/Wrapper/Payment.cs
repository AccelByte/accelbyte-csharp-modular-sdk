// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;

using AccelByte.Sdk.Api.Platform.Model;
using AccelByte.Sdk.Api.Platform.Operation;

namespace AccelByte.Sdk.Api.Platform.Wrapper
{
    public class Payment
    {
        private readonly IAccelByteSdk _sdk;

        private string _CustomBasePath = String.Empty;

        public Payment(IAccelByteSdk sdk)
        {
            _sdk = sdk;
        }

        public Payment(IAccelByteSdk sdk, string customBasePath)
        {
            _sdk = sdk;
            _CustomBasePath = customBasePath;
        }

        #region Operation Builders
        public QueryPaymentNotifications.QueryPaymentNotificationsBuilder QueryPaymentNotificationsOp
        {
            get
            {
                var opBuilder = new Operation.QueryPaymentNotifications.QueryPaymentNotificationsBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public QueryPaymentOrders.QueryPaymentOrdersBuilder QueryPaymentOrdersOp
        {
            get
            {
                var opBuilder = new Operation.QueryPaymentOrders.QueryPaymentOrdersBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public ListExtOrderNoByExtTxId.ListExtOrderNoByExtTxIdBuilder ListExtOrderNoByExtTxIdOp
        {
            get
            {
                var opBuilder = new Operation.ListExtOrderNoByExtTxId.ListExtOrderNoByExtTxIdBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public GetPaymentOrder.GetPaymentOrderBuilder GetPaymentOrderOp
        {
            get
            {
                var opBuilder = new Operation.GetPaymentOrder.GetPaymentOrderBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public ChargePaymentOrder.ChargePaymentOrderBuilder ChargePaymentOrderOp
        {
            get
            {
                var opBuilder = new Operation.ChargePaymentOrder.ChargePaymentOrderBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public SimulatePaymentOrderNotification.SimulatePaymentOrderNotificationBuilder SimulatePaymentOrderNotificationOp
        {
            get
            {
                var opBuilder = new Operation.SimulatePaymentOrderNotification.SimulatePaymentOrderNotificationBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public GetPaymentOrderChargeStatus.GetPaymentOrderChargeStatusBuilder GetPaymentOrderChargeStatusOp
        {
            get
            {
                var opBuilder = new Operation.GetPaymentOrderChargeStatus.GetPaymentOrderChargeStatusBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public CreateUserPaymentOrder.CreateUserPaymentOrderBuilder CreateUserPaymentOrderOp
        {
            get
            {
                var opBuilder = new Operation.CreateUserPaymentOrder.CreateUserPaymentOrderBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public RefundUserPaymentOrder.RefundUserPaymentOrderBuilder RefundUserPaymentOrderOp
        {
            get
            {
                var opBuilder = new Operation.RefundUserPaymentOrder.RefundUserPaymentOrderBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        #endregion

        public Model.PaymentNotificationPagingSlicedResult? QueryPaymentNotifications(QueryPaymentNotifications input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.PaymentNotificationPagingSlicedResult?> QueryPaymentNotificationsAsync(QueryPaymentNotifications input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.PaymentOrderPagingSlicedResult? QueryPaymentOrders(QueryPaymentOrders input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.PaymentOrderPagingSlicedResult?> QueryPaymentOrdersAsync(QueryPaymentOrders input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public List<string>? ListExtOrderNoByExtTxId(ListExtOrderNoByExtTxId input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<List<string>?> ListExtOrderNoByExtTxIdAsync(ListExtOrderNoByExtTxId input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.PaymentOrderInfo? GetPaymentOrder(GetPaymentOrder input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.PaymentOrderInfo?> GetPaymentOrderAsync(GetPaymentOrder input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public Model.PaymentOrderInfo<T1>? GetPaymentOrder<T1>(GetPaymentOrder input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.PaymentOrderInfo<T1>?> GetPaymentOrderAsync<T1>(GetPaymentOrder input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.PaymentOrderInfo? ChargePaymentOrder(ChargePaymentOrder input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.PaymentOrderInfo?> ChargePaymentOrderAsync(ChargePaymentOrder input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public Model.PaymentOrderInfo<T1>? ChargePaymentOrder<T1>(ChargePaymentOrder input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.PaymentOrderInfo<T1>?> ChargePaymentOrderAsync<T1>(ChargePaymentOrder input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.NotificationProcessResult? SimulatePaymentOrderNotification(SimulatePaymentOrderNotification input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.NotificationProcessResult?> SimulatePaymentOrderNotificationAsync(SimulatePaymentOrderNotification input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public Model.NotificationProcessResult<T1>? SimulatePaymentOrderNotification<T1>(SimulatePaymentOrderNotification input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.NotificationProcessResult<T1>?> SimulatePaymentOrderNotificationAsync<T1>(SimulatePaymentOrderNotification input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.PaymentOrderChargeStatus? GetPaymentOrderChargeStatus(GetPaymentOrderChargeStatus input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.PaymentOrderChargeStatus?> GetPaymentOrderChargeStatusAsync(GetPaymentOrderChargeStatus input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.PaymentOrderInfo? CreateUserPaymentOrder(CreateUserPaymentOrder input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.PaymentOrderInfo?> CreateUserPaymentOrderAsync(CreateUserPaymentOrder input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public Model.PaymentOrderInfo<T1>? CreateUserPaymentOrder<T1>(CreateUserPaymentOrder input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.PaymentOrderInfo<T1>?> CreateUserPaymentOrderAsync<T1>(CreateUserPaymentOrder input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.PaymentOrderInfo? RefundUserPaymentOrder(RefundUserPaymentOrder input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.PaymentOrderInfo?> RefundUserPaymentOrderAsync(RefundUserPaymentOrder input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public Model.PaymentOrderInfo<T1>? RefundUserPaymentOrder<T1>(RefundUserPaymentOrder input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.PaymentOrderInfo<T1>?> RefundUserPaymentOrderAsync<T1>(RefundUserPaymentOrder input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
    }
}