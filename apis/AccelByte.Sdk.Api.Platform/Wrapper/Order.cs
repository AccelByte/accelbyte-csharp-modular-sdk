// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;

using AccelByte.Sdk.Api.Platform.Model;
using AccelByte.Sdk.Api.Platform.Operation;

namespace AccelByte.Sdk.Api.Platform.Wrapper
{
    public class Order
    {
        private readonly IAccelByteSdk _sdk;

        private string _CustomBasePath = String.Empty;

        public Order(IAccelByteSdk sdk)
        {
            _sdk = sdk;
        }

        public Order(IAccelByteSdk sdk, string customBasePath)
        {
            _sdk = sdk;
            _CustomBasePath = customBasePath;
        }

        #region Operation Builders
        public QueryOrders.QueryOrdersBuilder QueryOrdersOp
        {
            get
            {
                var opBuilder = new Operation.QueryOrders.QueryOrdersBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public GetOrderStatistics.GetOrderStatisticsBuilder GetOrderStatisticsOp
        {
            get
            {
                var opBuilder = new Operation.GetOrderStatistics.GetOrderStatisticsBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public GetOrder.GetOrderBuilder GetOrderOp
        {
            get
            {
                var opBuilder = new Operation.GetOrder.GetOrderBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public RefundOrder.RefundOrderBuilder RefundOrderOp
        {
            get
            {
                var opBuilder = new Operation.RefundOrder.RefundOrderBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public QueryUserOrders.QueryUserOrdersBuilder QueryUserOrdersOp
        {
            get
            {
                var opBuilder = new Operation.QueryUserOrders.QueryUserOrdersBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminCreateUserOrder.AdminCreateUserOrderBuilder AdminCreateUserOrderOp
        {
            get
            {
                var opBuilder = new Operation.AdminCreateUserOrder.AdminCreateUserOrderBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public CountOfPurchasedItem.CountOfPurchasedItemBuilder CountOfPurchasedItemOp
        {
            get
            {
                var opBuilder = new Operation.CountOfPurchasedItem.CountOfPurchasedItemBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public GetUserOrder.GetUserOrderBuilder GetUserOrderOp
        {
            get
            {
                var opBuilder = new Operation.GetUserOrder.GetUserOrderBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public UpdateUserOrderStatus.UpdateUserOrderStatusBuilder UpdateUserOrderStatusOp
        {
            get
            {
                var opBuilder = new Operation.UpdateUserOrderStatus.UpdateUserOrderStatusBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public FulfillUserOrder.FulfillUserOrderBuilder FulfillUserOrderOp
        {
            get
            {
                var opBuilder = new Operation.FulfillUserOrder.FulfillUserOrderBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        [Obsolete(DiagnosticId ="ab_deprecated_operation_wrapper")]
        public GetUserOrderGrant.GetUserOrderGrantBuilder GetUserOrderGrantOp
        {
            get
            {
                var opBuilder = new Operation.GetUserOrderGrant.GetUserOrderGrantBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public GetUserOrderHistories.GetUserOrderHistoriesBuilder GetUserOrderHistoriesOp
        {
            get
            {
                var opBuilder = new Operation.GetUserOrderHistories.GetUserOrderHistoriesBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public ProcessUserOrderNotification.ProcessUserOrderNotificationBuilder ProcessUserOrderNotificationOp
        {
            get
            {
                var opBuilder = new Operation.ProcessUserOrderNotification.ProcessUserOrderNotificationBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public DownloadUserOrderReceipt.DownloadUserOrderReceiptBuilder DownloadUserOrderReceiptOp
        {
            get
            {
                var opBuilder = new Operation.DownloadUserOrderReceipt.DownloadUserOrderReceiptBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public PublicQueryUserOrders.PublicQueryUserOrdersBuilder PublicQueryUserOrdersOp
        {
            get
            {
                var opBuilder = new Operation.PublicQueryUserOrders.PublicQueryUserOrdersBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public PublicCreateUserOrder.PublicCreateUserOrderBuilder PublicCreateUserOrderOp
        {
            get
            {
                var opBuilder = new Operation.PublicCreateUserOrder.PublicCreateUserOrderBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public PublicPreviewOrderPrice.PublicPreviewOrderPriceBuilder PublicPreviewOrderPriceOp
        {
            get
            {
                var opBuilder = new Operation.PublicPreviewOrderPrice.PublicPreviewOrderPriceBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public PublicGetUserOrder.PublicGetUserOrderBuilder PublicGetUserOrderOp
        {
            get
            {
                var opBuilder = new Operation.PublicGetUserOrder.PublicGetUserOrderBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public PublicCancelUserOrder.PublicCancelUserOrderBuilder PublicCancelUserOrderOp
        {
            get
            {
                var opBuilder = new Operation.PublicCancelUserOrder.PublicCancelUserOrderBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public PublicGetUserOrderHistories.PublicGetUserOrderHistoriesBuilder PublicGetUserOrderHistoriesOp
        {
            get
            {
                var opBuilder = new Operation.PublicGetUserOrderHistories.PublicGetUserOrderHistoriesBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public PublicDownloadUserOrderReceipt.PublicDownloadUserOrderReceiptBuilder PublicDownloadUserOrderReceiptOp
        {
            get
            {
                var opBuilder = new Operation.PublicDownloadUserOrderReceipt.PublicDownloadUserOrderReceiptBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        #endregion

        public Model.OrderPagingResult? QueryOrders(QueryOrders input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.OrderPagingResult?> QueryOrdersAsync(QueryOrders input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.OrderStatistics? GetOrderStatistics(GetOrderStatistics input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.OrderStatistics?> GetOrderStatisticsAsync(GetOrderStatistics input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.OrderInfo? GetOrder(GetOrder input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.OrderInfo?> GetOrderAsync(GetOrder input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public Model.OrderInfo<T1>? GetOrder<T1>(GetOrder input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.OrderInfo<T1>?> GetOrderAsync<T1>(GetOrder input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.OrderInfo? RefundOrder(RefundOrder input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.OrderInfo?> RefundOrderAsync(RefundOrder input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public Model.OrderInfo<T1>? RefundOrder<T1>(RefundOrder input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.OrderInfo<T1>?> RefundOrderAsync<T1>(RefundOrder input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.OrderPagingSlicedResult? QueryUserOrders(QueryUserOrders input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.OrderPagingSlicedResult?> QueryUserOrdersAsync(QueryUserOrders input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.OrderInfo? AdminCreateUserOrder(AdminCreateUserOrder input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.OrderInfo?> AdminCreateUserOrderAsync(AdminCreateUserOrder input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public Model.OrderInfo<T1>? AdminCreateUserOrder<T1>(AdminCreateUserOrder input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.OrderInfo<T1>?> AdminCreateUserOrderAsync<T1>(AdminCreateUserOrder input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.PurchasedItemCount? CountOfPurchasedItem(CountOfPurchasedItem input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.PurchasedItemCount?> CountOfPurchasedItemAsync(CountOfPurchasedItem input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.OrderInfo? GetUserOrder(GetUserOrder input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.OrderInfo?> GetUserOrderAsync(GetUserOrder input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public Model.OrderInfo<T1>? GetUserOrder<T1>(GetUserOrder input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.OrderInfo<T1>?> GetUserOrderAsync<T1>(GetUserOrder input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.OrderInfo? UpdateUserOrderStatus(UpdateUserOrderStatus input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.OrderInfo?> UpdateUserOrderStatusAsync(UpdateUserOrderStatus input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public Model.OrderInfo<T1>? UpdateUserOrderStatus<T1>(UpdateUserOrderStatus input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.OrderInfo<T1>?> UpdateUserOrderStatusAsync<T1>(UpdateUserOrderStatus input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.OrderInfo? FulfillUserOrder(FulfillUserOrder input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.OrderInfo?> FulfillUserOrderAsync(FulfillUserOrder input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public Model.OrderInfo<T1>? FulfillUserOrder<T1>(FulfillUserOrder input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.OrderInfo<T1>?> FulfillUserOrderAsync<T1>(FulfillUserOrder input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        #pragma warning disable ab_deprecated_operation
        [Obsolete(DiagnosticId ="ab_deprecated_operation_wrapper")]
        public Model.OrderGrantInfo? GetUserOrderGrant(GetUserOrderGrant input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.OrderGrantInfo?> GetUserOrderGrantAsync(GetUserOrderGrant input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        #pragma warning restore ab_deprecated_operation
        public List<Model.OrderHistoryInfo>? GetUserOrderHistories(GetUserOrderHistories input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<List<Model.OrderHistoryInfo>?> GetUserOrderHistoriesAsync(GetUserOrderHistories input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public void ProcessUserOrderNotification(ProcessUserOrderNotification input)
        {
            var response = _sdk.RunRequest(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task ProcessUserOrderNotificationAsync(ProcessUserOrderNotification input)
        {
            var response = await _sdk.RunRequestAsync(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Stream? DownloadUserOrderReceipt(DownloadUserOrderReceipt input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Stream?> DownloadUserOrderReceiptAsync(DownloadUserOrderReceipt input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.OrderPagingSlicedResult? PublicQueryUserOrders(PublicQueryUserOrders input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.OrderPagingSlicedResult?> PublicQueryUserOrdersAsync(PublicQueryUserOrders input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.OrderInfo? PublicCreateUserOrder(PublicCreateUserOrder input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.OrderInfo?> PublicCreateUserOrderAsync(PublicCreateUserOrder input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public Model.OrderInfo<T1>? PublicCreateUserOrder<T1>(PublicCreateUserOrder input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.OrderInfo<T1>?> PublicCreateUserOrderAsync<T1>(PublicCreateUserOrder input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.OrderDiscountPreviewResponse? PublicPreviewOrderPrice(PublicPreviewOrderPrice input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.OrderDiscountPreviewResponse?> PublicPreviewOrderPriceAsync(PublicPreviewOrderPrice input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.OrderInfo? PublicGetUserOrder(PublicGetUserOrder input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.OrderInfo?> PublicGetUserOrderAsync(PublicGetUserOrder input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public Model.OrderInfo<T1>? PublicGetUserOrder<T1>(PublicGetUserOrder input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.OrderInfo<T1>?> PublicGetUserOrderAsync<T1>(PublicGetUserOrder input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.OrderInfo? PublicCancelUserOrder(PublicCancelUserOrder input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.OrderInfo?> PublicCancelUserOrderAsync(PublicCancelUserOrder input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public Model.OrderInfo<T1>? PublicCancelUserOrder<T1>(PublicCancelUserOrder input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.OrderInfo<T1>?> PublicCancelUserOrderAsync<T1>(PublicCancelUserOrder input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public List<Model.OrderHistoryInfo>? PublicGetUserOrderHistories(PublicGetUserOrderHistories input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<List<Model.OrderHistoryInfo>?> PublicGetUserOrderHistoriesAsync(PublicGetUserOrderHistories input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Stream? PublicDownloadUserOrderReceipt(PublicDownloadUserOrderReceipt input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Stream?> PublicDownloadUserOrderReceiptAsync(PublicDownloadUserOrderReceipt input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
    }
}