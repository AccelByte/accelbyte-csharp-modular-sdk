// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Platform.Model;

namespace AccelByte.Sdk.Api.Platform.Operation
{
    /// <summary>
    /// deleteView
    ///
    /// This API is used to delete a view.It will also delete all the related sections
    /// </summary>
    public class DeleteView : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static DeleteViewBuilder Builder { get => new DeleteViewBuilder(); }

        public class DeleteViewBuilder
            : OperationBuilder<DeleteViewBuilder>
        {





            internal DeleteViewBuilder() { }

            internal DeleteViewBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }






            public DeleteView Build(
                string namespace_,
                string viewId,
                string storeId
            )
            {
                DeleteView op = new DeleteView(this,
                    namespace_,                    
                    viewId,                    
                    storeId                    
                );

                op.SetBaseFields<DeleteViewBuilder>(this);
                return op;
            }

            public DeleteView.Response Execute(
                string namespace_,
                string viewId,
                string storeId
            )
            {
                DeleteView op = Build(
                    namespace_,
                    viewId,
                    storeId
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
            public async Task<DeleteView.Response> ExecuteAsync(
                string namespace_,
                string viewId,
                string storeId
            )
            {
                DeleteView op = Build(
                    namespace_,
                    viewId,
                    storeId
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
        }

        private DeleteView(DeleteViewBuilder builder,
            string namespace_,
            string viewId,
            string storeId
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["viewId"] = viewId;
            
            if (storeId is not null) QueryParams["storeId"] = storeId;
            

            
            
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        #region Response Part        
        public class Response : ApiResponse
        {

            public ErrorEntity? Error404 { get; set; } = null;

            public ErrorEntity? Error409 { get; set; } = null;


            protected override string GetFullOperationId() => "Platform::View::DeleteView";
        }

        #endregion

        public DeleteView(
            string namespace_,            
            string viewId,            
            string storeId            
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["viewId"] = viewId;
            
            if (storeId is not null) QueryParams["storeId"] = storeId;
            

            
            
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/platform/admin/namespaces/{namespace}/views/{viewId}";

        public override HttpMethod Method => HttpMethod.Delete;

        public override List<string> Consumes => new() {  };

        public override List<string> Produces => new() { "application/json" };
        
        public DeleteView.Response ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            var response = new DeleteView.Response()
            {
                StatusCode = code,
                ContentType = contentType
            };

            int statusCode = (int)code;
            if (statusCode >= 200 && statusCode < 300)
            {
                response.IsSuccess = true;
            }
            else if (code == (HttpStatusCode)404)
            {
                response.Error404 = JsonSerializer.Deserialize<ErrorEntity>(payload, ResponseJsonOptions);
                response.Error = response.Error404!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)409)
            {
                response.Error409 = JsonSerializer.Deserialize<ErrorEntity>(payload, ResponseJsonOptions);
                response.Error = response.Error409!.TranslateToApiError();
            }

            return response;
        }
    }

}