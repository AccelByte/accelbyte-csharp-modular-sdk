// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Platform.Model;

namespace AccelByte.Sdk.Api.Platform.Operation
{
    /// <summary>
    /// publicListCurrencies
    ///
    /// List currencies of a namespace.
    /// Other detail info:
    /// 
    ///   * Returns : Currency List
    /// </summary>
    public class PublicListCurrencies : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static PublicListCurrenciesBuilder Builder { get => new PublicListCurrenciesBuilder(); }

        public class PublicListCurrenciesBuilder
            : OperationBuilder<PublicListCurrenciesBuilder>
        {

            public PublicListCurrenciesCurrencyType? CurrencyType { get; set; }





            internal PublicListCurrenciesBuilder() { }

            internal PublicListCurrenciesBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }


            public PublicListCurrenciesBuilder SetCurrencyType(PublicListCurrenciesCurrencyType _currencyType)
            {
                CurrencyType = _currencyType;
                return this;
            }





            public PublicListCurrencies Build(
                string namespace_
            )
            {
                PublicListCurrencies op = new PublicListCurrencies(this,
                    namespace_                    
                );

                op.SetBaseFields<PublicListCurrenciesBuilder>(this);
                return op;
            }

            public PublicListCurrencies.Response Execute(
                string namespace_
            )
            {
                PublicListCurrencies op = Build(
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
            public async Task<PublicListCurrencies.Response> ExecuteAsync(
                string namespace_
            )
            {
                PublicListCurrencies op = Build(
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
        }

        private PublicListCurrencies(PublicListCurrenciesBuilder builder,
            string namespace_
        )
        {
            PathParams["namespace"] = namespace_;
            
            if (builder.CurrencyType is not null) QueryParams["currencyType"] = builder.CurrencyType.Value;
            

            
            
            

        }
        #endregion

        #region Response Part        
        public class Response : ApiResponse<List<Model.CurrencyInfo>>
        {


            protected override string GetFullOperationId() => "Platform::Currency::PublicListCurrencies";
        }

        #endregion

        public PublicListCurrencies(
            string namespace_,            
            PublicListCurrenciesCurrencyType? currencyType            
        )
        {
            PathParams["namespace"] = namespace_;
            
            if (currencyType is not null) QueryParams["currencyType"] = currencyType.Value;
            

            
            
            

        }

        public override string Path => "/platform/public/namespaces/{namespace}/currencies";

        public override HttpMethod Method => HttpMethod.Get;

        public override List<string> Consumes => new() { "application/json" };

        public override List<string> Produces => new() { "application/json" };
        
        public PublicListCurrencies.Response ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            var response = new PublicListCurrencies.Response()
            {
                StatusCode = code,
                ContentType = contentType
            };

            if (code == (HttpStatusCode)204)
            {
                response.IsSuccess = true;
            }
            else if ((code == (HttpStatusCode)201) || (code == (HttpStatusCode)202) || (code == (HttpStatusCode)200))
            {
                response.Data = JsonSerializer.Deserialize<List<Model.CurrencyInfo>>(payload, ResponseJsonOptions);
                response.IsSuccess = true;
            }

            return response;
        }
    }

    public class PublicListCurrenciesCurrencyType : StringEnum<PublicListCurrenciesCurrencyType>
    {
        public static readonly PublicListCurrenciesCurrencyType REAL
            = new PublicListCurrenciesCurrencyType("REAL");

        public static readonly PublicListCurrenciesCurrencyType VIRTUAL
            = new PublicListCurrenciesCurrencyType("VIRTUAL");


        public static implicit operator PublicListCurrenciesCurrencyType(string value)
        {
            return NewValue(value);
        }

        public PublicListCurrenciesCurrencyType(string enumValue)
            : base(enumValue)
        {

        }
    }

}