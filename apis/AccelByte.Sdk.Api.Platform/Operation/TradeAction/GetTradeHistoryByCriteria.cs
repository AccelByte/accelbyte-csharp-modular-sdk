// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Platform.Model;

namespace AccelByte.Sdk.Api.Platform.Operation
{
    /// <summary>
    /// getTradeHistoryByCriteria
    ///
    /// This API is used to fetch trade history based on the provided criteria
    /// 
    /// Other detail info:
    /// 
    ///   * Returns : trade history list based on criteria
    /// </summary>
    public class GetTradeHistoryByCriteria : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static GetTradeHistoryByCriteriaBuilder Builder { get => new GetTradeHistoryByCriteriaBuilder(); }

        public class GetTradeHistoryByCriteriaBuilder
            : OperationBuilder<GetTradeHistoryByCriteriaBuilder>
        {

            public int? Limit { get; set; }

            public int? Offset { get; set; }

            public GetTradeHistoryByCriteriaStatus? Status { get; set; }

            public string? Type { get; set; }

            public string? UserId { get; set; }





            internal GetTradeHistoryByCriteriaBuilder() { }

            internal GetTradeHistoryByCriteriaBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }


            public GetTradeHistoryByCriteriaBuilder SetLimit(int _limit)
            {
                Limit = _limit;
                return this;
            }

            public GetTradeHistoryByCriteriaBuilder SetOffset(int _offset)
            {
                Offset = _offset;
                return this;
            }

            public GetTradeHistoryByCriteriaBuilder SetStatus(GetTradeHistoryByCriteriaStatus _status)
            {
                Status = _status;
                return this;
            }

            public GetTradeHistoryByCriteriaBuilder SetType(string _type)
            {
                Type = _type;
                return this;
            }

            public GetTradeHistoryByCriteriaBuilder SetUserId(string _userId)
            {
                UserId = _userId;
                return this;
            }





            public GetTradeHistoryByCriteria Build(
                string namespace_
            )
            {
                GetTradeHistoryByCriteria op = new GetTradeHistoryByCriteria(this,
                    namespace_
                );

                op.SetBaseFields<GetTradeHistoryByCriteriaBuilder>(this);
                return op;
            }

            public GetTradeHistoryByCriteria.Response Execute(
                string namespace_
            )
            {
                GetTradeHistoryByCriteria op = Build(
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
            public async Task<GetTradeHistoryByCriteria.Response> ExecuteAsync(
                string namespace_
            )
            {
                GetTradeHistoryByCriteria op = Build(
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
        }

        private GetTradeHistoryByCriteria(GetTradeHistoryByCriteriaBuilder builder,
            string namespace_
        )
        {
            PathParams["namespace"] = namespace_;

            if (builder.Limit != null) QueryParams["limit"] = Convert.ToString(builder.Limit)!;
            if (builder.Offset != null) QueryParams["offset"] = Convert.ToString(builder.Offset)!;
            if (builder.Status is not null) QueryParams["status"] = builder.Status.Value;
            if (builder.Type is not null) QueryParams["type"] = builder.Type;
            if (builder.UserId is not null) QueryParams["userId"] = builder.UserId;






            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        #region Response Part        
        public class Response : ApiResponse<Model.TradeActionPagingSlicedResult>
        {


            protected override string GetFullOperationId() => "Platform::TradeAction::GetTradeHistoryByCriteria";
        }

        #endregion

        public GetTradeHistoryByCriteria(
            string namespace_,
            int? limit,
            int? offset,
            GetTradeHistoryByCriteriaStatus? status,
            string? type,
            string? userId
        )
        {
            PathParams["namespace"] = namespace_;

            if (limit != null) QueryParams["limit"] = Convert.ToString(limit)!;
            if (offset != null) QueryParams["offset"] = Convert.ToString(offset)!;
            if (status is not null) QueryParams["status"] = status.Value;
            if (type is not null) QueryParams["type"] = type;
            if (userId is not null) QueryParams["userId"] = userId;






            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/platform/admin/namespaces/{namespace}/trade/history/byCriteria";

        public override HttpMethod Method => HttpMethod.Get;

        public override List<string> Consumes => new() { };

        public override List<string> Produces => new() { "application/json" };

        public GetTradeHistoryByCriteria.Response ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            var response = new GetTradeHistoryByCriteria.Response()
            {
                StatusCode = code,
                ContentType = contentType
            };

            if (code == (HttpStatusCode)204)
            {
                response.IsSuccess = true;
            }
            else if ((code == (HttpStatusCode)201) || (code == (HttpStatusCode)202) || (code == (HttpStatusCode)200))
            {
                response.Data = JsonSerializer.Deserialize<Model.TradeActionPagingSlicedResult>(payload, ResponseJsonOptions);
                response.IsSuccess = true;
            }

            return response;
        }
    }

    public class GetTradeHistoryByCriteriaStatus : StringEnum<GetTradeHistoryByCriteriaStatus>
    {
        public static readonly GetTradeHistoryByCriteriaStatus FAILED
            = new GetTradeHistoryByCriteriaStatus("FAILED");

        public static readonly GetTradeHistoryByCriteriaStatus INIT
            = new GetTradeHistoryByCriteriaStatus("INIT");

        public static readonly GetTradeHistoryByCriteriaStatus SUCCESS
            = new GetTradeHistoryByCriteriaStatus("SUCCESS");


        public static implicit operator GetTradeHistoryByCriteriaStatus(string value)
        {
            return NewValue(value);
        }

        public GetTradeHistoryByCriteriaStatus(string enumValue)
            : base(enumValue)
        {

        }
    }

}