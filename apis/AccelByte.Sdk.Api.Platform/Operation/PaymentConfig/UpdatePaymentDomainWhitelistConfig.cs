// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Platform.Model;

namespace AccelByte.Sdk.Api.Platform.Operation
{
    /// <summary>
    /// updatePaymentDomainWhitelistConfig
    ///
    ///  [Not Supported Yet In Starter] Update payment provider config by namespace.
    /// 
    /// 
    /// 
    ///      Request Body Parameters:
    /// 
    /// 
    ///      Parameter | Type   | Required | Description
    ///     -----------|--------|----------|--------------------------------------------------
    ///     domains    | String | Yes      | list of domains to whitelist for the return URL.
    /// 
    /// 
    /// 
    /// Other detail info:
    /// 
    ///   * Validation : the domain should include the protocol (http/https), but the whitelist check will only compare the host part (www.example.com)
    ///   *  Returns : payment domain whitelist config
    /// </summary>
    public class UpdatePaymentDomainWhitelistConfig : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static UpdatePaymentDomainWhitelistConfigBuilder Builder { get => new UpdatePaymentDomainWhitelistConfigBuilder(); }

        public class UpdatePaymentDomainWhitelistConfigBuilder
            : OperationBuilder<UpdatePaymentDomainWhitelistConfigBuilder>
        {


            public Model.PaymentDomainWhitelistConfigEdit? Body { get; set; }




            internal UpdatePaymentDomainWhitelistConfigBuilder() { }

            internal UpdatePaymentDomainWhitelistConfigBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }



            public UpdatePaymentDomainWhitelistConfigBuilder SetBody(Model.PaymentDomainWhitelistConfigEdit _body)
            {
                Body = _body;
                return this;
            }




            public UpdatePaymentDomainWhitelistConfig Build(
                string namespace_
            )
            {
                UpdatePaymentDomainWhitelistConfig op = new UpdatePaymentDomainWhitelistConfig(this,
                    namespace_
                );

                op.SetBaseFields<UpdatePaymentDomainWhitelistConfigBuilder>(this);
                return op;
            }

            public Model.PaymentDomainWhitelistConfigInfo? Execute(
                string namespace_
            )
            {
                UpdatePaymentDomainWhitelistConfig op = Build(
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
            public async Task<Model.PaymentDomainWhitelistConfigInfo?> ExecuteAsync(
                string namespace_
            )
            {
                UpdatePaymentDomainWhitelistConfig op = Build(
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
        }

        private UpdatePaymentDomainWhitelistConfig(UpdatePaymentDomainWhitelistConfigBuilder builder,
            string namespace_
        )
        {
            PathParams["namespace"] = namespace_;





            BodyParams = builder.Body;


            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public UpdatePaymentDomainWhitelistConfig(
            string namespace_,
            Model.PaymentDomainWhitelistConfigEdit body
        )
        {
            PathParams["namespace"] = namespace_;





            BodyParams = body;


            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/platform/admin/namespaces/{namespace}/payment/config/domains";

        public override HttpMethod Method => HttpMethod.Put;

        public override List<string> Consumes => new() { "application/json" };

        public override List<string> Produces => new() { "application/json" };

        public Model.PaymentDomainWhitelistConfigInfo? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                return JsonSerializer.Deserialize<Model.PaymentDomainWhitelistConfigInfo>(payload, ResponseJsonOptions);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.PaymentDomainWhitelistConfigInfo>(payload, ResponseJsonOptions);
            }

            var payloadString = payload.ReadToString();

            throw new HttpResponseException(code, payloadString);
        }
    }

}