// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Platform.Model;

namespace AccelByte.Sdk.Api.Platform.Operation
{
    /// <summary>
    /// updatePaymentTaxConfig
    ///
    ///  [Not supported yet in AGS Shared Cloud] Update payment tax config.
    /// 
    /// 
    /// 
    ///      Request Body Parameters:
    /// 
    /// 
    ///      Parameter                | Type    | Required | Description
    ///     --------------------------|---------|----------|---------------------------------------------------------------------
    ///     taxJarEnabled             | Boolean | false
    ///     taxJarApiToken            | String  | false    | required, when taxJarEnabled is true and there is no existing token
    ///     sandboxTaxJarApiToken     | String  | false    | optional
    ///     taxJarProductCodesMapping | Map     | No       | key is item type(APP                                                |COINS |INGAMEITEM |BUNDLE |CODE |SUBSCRIPTION) and value is product tax code: https://developers.taxjar.com/api/reference/?ruby#get-list-tax-categories
    /// 
    /// 
    /// 
    /// Other detail info:
    ///   * Returns : payment global tax config
    /// </summary>
    public class UpdatePaymentTaxConfig : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static UpdatePaymentTaxConfigBuilder Builder { get => new UpdatePaymentTaxConfigBuilder(); }

        public class UpdatePaymentTaxConfigBuilder
            : OperationBuilder<UpdatePaymentTaxConfigBuilder>
        {





            internal UpdatePaymentTaxConfigBuilder() { }

            internal UpdatePaymentTaxConfigBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }






            public UpdatePaymentTaxConfig Build(
                PaymentTaxConfigEdit body
            )
            {
                UpdatePaymentTaxConfig op = new UpdatePaymentTaxConfig(this,
                    body                    
                );

                op.SetBaseFields<UpdatePaymentTaxConfigBuilder>(this);
                return op;
            }

            public Model.PaymentTaxConfigInfo? Execute(
                PaymentTaxConfigEdit body
            )
            {
                UpdatePaymentTaxConfig op = Build(
                    body
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
            public async Task<Model.PaymentTaxConfigInfo?> ExecuteAsync(
                PaymentTaxConfigEdit body
            )
            {
                UpdatePaymentTaxConfig op = Build(
                    body
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
        }

        private UpdatePaymentTaxConfig(UpdatePaymentTaxConfigBuilder builder,
            PaymentTaxConfigEdit body
        )
        {
            
            

            
            
            BodyParams = body;
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public UpdatePaymentTaxConfig(
            Model.PaymentTaxConfigEdit body            
        )
        {
            
            

            
            
            BodyParams = body;
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/platform/admin/payment/config/tax";

        public override HttpMethod Method => HttpMethod.Put;

        public override List<string> Consumes => new() { "application/json" };

        public override List<string> Produces => new() { "application/json" };        
        
        public Model.PaymentTaxConfigInfo? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {            
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                return JsonSerializer.Deserialize<Model.PaymentTaxConfigInfo>(payload, ResponseJsonOptions);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.PaymentTaxConfigInfo>(payload, ResponseJsonOptions);
            }
            
            var payloadString = payload.ReadToString();
            
            throw new HttpResponseException(code, payloadString);
        }
    }

}