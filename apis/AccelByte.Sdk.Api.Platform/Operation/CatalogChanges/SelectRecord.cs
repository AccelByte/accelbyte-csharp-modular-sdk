// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Platform.Model;

namespace AccelByte.Sdk.Api.Platform.Operation
{
    /// <summary>
    /// selectRecord
    ///
    /// Select a change, it will be included when partial publish.
    /// Other detail info:
    /// 
    ///   * Required permission : resource="ADMIN:NAMESPACE:{namespace}:STORE", action=4 (UPDATE)
    /// </summary>
    public class SelectRecord : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static SelectRecordBuilder Builder { get => new SelectRecordBuilder(); }

        public class SelectRecordBuilder
            : OperationBuilder<SelectRecordBuilder>
        {





            internal SelectRecordBuilder() { }

            internal SelectRecordBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }






            public SelectRecord Build(
                string changeId,
                string namespace_,
                string storeId
            )
            {
                SelectRecord op = new SelectRecord(this,
                    changeId,
                    namespace_,
                    storeId
                );

                op.SetBaseFields<SelectRecordBuilder>(this);
                return op;
            }

            public void Execute(
                string changeId,
                string namespace_,
                string storeId
            )
            {
                SelectRecord op = Build(
                    changeId,
                    namespace_,
                    storeId
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
            public async Task ExecuteAsync(
                string changeId,
                string namespace_,
                string storeId
            )
            {
                SelectRecord op = Build(
                    changeId,
                    namespace_,
                    storeId
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
        }

        private SelectRecord(SelectRecordBuilder builder,
            string changeId,
            string namespace_,
            string storeId
        )
        {
            PathParams["changeId"] = changeId;
            PathParams["namespace"] = namespace_;
            PathParams["storeId"] = storeId;







            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public SelectRecord(
            string changeId,
            string namespace_,
            string storeId
        )
        {
            PathParams["changeId"] = changeId;
            PathParams["namespace"] = namespace_;
            PathParams["storeId"] = storeId;







            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/platform/admin/namespaces/{namespace}/stores/{storeId}/catalogChanges/{changeId}/select";

        public override HttpMethod Method => HttpMethod.Put;

        public override List<string> Consumes => new() { "application/json" };

        public override List<string> Produces => new() { "application/json" };

        public void ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return;
            }

            var payloadString = payload.ReadToString();

            throw new HttpResponseException(code, payloadString);
        }
    }

}