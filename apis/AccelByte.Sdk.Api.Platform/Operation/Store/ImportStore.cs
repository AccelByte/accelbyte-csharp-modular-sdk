// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Platform.Model;

namespace AccelByte.Sdk.Api.Platform.Operation
{
    /// <summary>
    /// importStore
    ///
    /// This API is used to import a store.
    /// 
    /// This api has been deprecated, pls use /v2/admin/namespaces/{namespace}/stores/import to import store.
    /// </summary>
    [Obsolete(DiagnosticId = "ab_deprecated_operation")]
    public class ImportStore : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static ImportStoreBuilder Builder { get => new ImportStoreBuilder(); }

        public class ImportStoreBuilder
            : OperationBuilder<ImportStoreBuilder>
        {

            public string? StoreId { get; set; }



            public Stream? File { get; set; }



            internal ImportStoreBuilder() { }

            internal ImportStoreBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }


            public ImportStoreBuilder SetStoreId(string _storeId)
            {
                StoreId = _storeId;
                return this;
            }



            public ImportStoreBuilder SetFile(Stream _file)
            {
                File = _file;
                return this;
            }



            public ImportStore Build(
                string namespace_
            )
            {
                ImportStore op = new ImportStore(this,
                    namespace_
                );

                op.SetBaseFields<ImportStoreBuilder>(this);
                return op;
            }

            [Obsolete(DiagnosticId = "ab_deprecated_operation_wrapper")]
            public Model.StoreInfo? Execute(
                string namespace_
            )
            {
                ImportStore op = Build(
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
            public async Task<Model.StoreInfo?> ExecuteAsync(
                string namespace_
            )
            {
                ImportStore op = Build(
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
        }

        private ImportStore(ImportStoreBuilder builder,
            string namespace_
        )
        {
            PathParams["namespace"] = namespace_;

            if (builder.StoreId is not null) QueryParams["storeId"] = builder.StoreId;

            if (builder.File is not null) FormParams["file"] = builder.File;





            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public ImportStore(
            string namespace_,
            string? storeId,
            Stream? file
        )
        {
            PathParams["namespace"] = namespace_;

            if (storeId is not null) QueryParams["storeId"] = storeId;

            if (file is not null) FormParams["file"] = file;





            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/platform/admin/namespaces/{namespace}/stores/import";

        public override HttpMethod Method => HttpMethod.Put;

        public override List<string> Consumes => new() { "multipart/form-data" };

        public override List<string> Produces => new() { "application/json" };

        public Model.StoreInfo? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                return JsonSerializer.Deserialize<Model.StoreInfo>(payload, ResponseJsonOptions);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.StoreInfo>(payload, ResponseJsonOptions);
            }

            var payloadString = payload.ReadToString();

            throw new HttpResponseException(code, payloadString);
        }
    }

}