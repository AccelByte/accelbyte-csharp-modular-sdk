// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Platform.Model;

namespace AccelByte.Sdk.Api.Platform.Operation
{
    /// <summary>
    /// updateStore
    ///
    /// This API is used to Update a store basic info.
    /// 
    /// Other detail info:
    /// 
    ///   * Returns : updated store data
    /// </summary>
    public class UpdateStore : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static UpdateStoreBuilder Builder { get => new UpdateStoreBuilder(); }

        public class UpdateStoreBuilder
            : OperationBuilder<UpdateStoreBuilder>
        {





            internal UpdateStoreBuilder() { }

            internal UpdateStoreBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }






            public UpdateStore Build(
                StoreUpdate body,
                string namespace_,
                string storeId
            )
            {
                UpdateStore op = new UpdateStore(this,
                    body,                    
                    namespace_,                    
                    storeId                    
                );

                op.SetBaseFields<UpdateStoreBuilder>(this);
                return op;
            }

            public Model.StoreInfo? Execute(
                StoreUpdate body,
                string namespace_,
                string storeId
            )
            {
                UpdateStore op = Build(
                    body,
                    namespace_,
                    storeId
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
            public async Task<Model.StoreInfo?> ExecuteAsync(
                StoreUpdate body,
                string namespace_,
                string storeId
            )
            {
                UpdateStore op = Build(
                    body,
                    namespace_,
                    storeId
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
        }

        private UpdateStore(UpdateStoreBuilder builder,
            StoreUpdate body,
            string namespace_,
            string storeId
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["storeId"] = storeId;
            
            

            
            
            BodyParams = body;
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public UpdateStore(
            string namespace_,            
            string storeId,            
            Model.StoreUpdate body            
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["storeId"] = storeId;
            
            

            
            
            BodyParams = body;
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/platform/admin/namespaces/{namespace}/stores/{storeId}";

        public override HttpMethod Method => HttpMethod.Put;

        public override List<string> Consumes => new() { "application/json" };

        public override List<string> Produces => new() { "application/json" };        
        
        public Model.StoreInfo? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {            
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                return JsonSerializer.Deserialize<Model.StoreInfo>(payload, ResponseJsonOptions);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.StoreInfo>(payload, ResponseJsonOptions);
            }
            
            var payloadString = payload.ReadToString();
            
            throw new HttpResponseException(code, payloadString);
        }
    }

}