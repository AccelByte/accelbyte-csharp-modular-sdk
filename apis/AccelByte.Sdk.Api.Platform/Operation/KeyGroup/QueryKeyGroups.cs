// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Platform.Model;

namespace AccelByte.Sdk.Api.Platform.Operation
{
    /// <summary>
    /// queryKeyGroups
    ///
    /// Query key groups, if name is presented, it's fuzzy match.
    /// Other detail info:
    /// 
    ///   * Returns : slice of key group
    /// </summary>
    public class QueryKeyGroups : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static QueryKeyGroupsBuilder Builder { get => new QueryKeyGroupsBuilder(); }

        public class QueryKeyGroupsBuilder
            : OperationBuilder<QueryKeyGroupsBuilder>
        {

            public int? Limit { get; set; }

            public string? Name { get; set; }

            public int? Offset { get; set; }

            public string? Tag { get; set; }





            internal QueryKeyGroupsBuilder() { }

            internal QueryKeyGroupsBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }


            public QueryKeyGroupsBuilder SetLimit(int _limit)
            {
                Limit = _limit;
                return this;
            }

            public QueryKeyGroupsBuilder SetName(string _name)
            {
                Name = _name;
                return this;
            }

            public QueryKeyGroupsBuilder SetOffset(int _offset)
            {
                Offset = _offset;
                return this;
            }

            public QueryKeyGroupsBuilder SetTag(string _tag)
            {
                Tag = _tag;
                return this;
            }





            public QueryKeyGroups Build(
                string namespace_
            )
            {
                QueryKeyGroups op = new QueryKeyGroups(this,
                    namespace_
                );

                op.SetBaseFields<QueryKeyGroupsBuilder>(this);
                return op;
            }

            public QueryKeyGroups.Response Execute(
                string namespace_
            )
            {
                QueryKeyGroups op = Build(
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
            public async Task<QueryKeyGroups.Response> ExecuteAsync(
                string namespace_
            )
            {
                QueryKeyGroups op = Build(
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
        }

        private QueryKeyGroups(QueryKeyGroupsBuilder builder,
            string namespace_
        )
        {
            PathParams["namespace"] = namespace_;

            if (builder.Limit != null) QueryParams["limit"] = Convert.ToString(builder.Limit)!;
            if (builder.Name is not null) QueryParams["name"] = builder.Name;
            if (builder.Offset != null) QueryParams["offset"] = Convert.ToString(builder.Offset)!;
            if (builder.Tag is not null) QueryParams["tag"] = builder.Tag;






            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        #region Response Part        
        public class Response : ApiResponse<Model.KeyGroupPagingSlicedResult>
        {


            protected override string GetFullOperationId() => "Platform::KeyGroup::QueryKeyGroups";
        }

        #endregion

        public QueryKeyGroups(
            string namespace_,
            int? limit,
            string? name,
            int? offset,
            string? tag
        )
        {
            PathParams["namespace"] = namespace_;

            if (limit != null) QueryParams["limit"] = Convert.ToString(limit)!;
            if (name is not null) QueryParams["name"] = name;
            if (offset != null) QueryParams["offset"] = Convert.ToString(offset)!;
            if (tag is not null) QueryParams["tag"] = tag;






            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/platform/admin/namespaces/{namespace}/keygroups";

        public override HttpMethod Method => HttpMethod.Get;

        public override List<string> Consumes => new() { };

        public override List<string> Produces => new() { "application/json" };

        public QueryKeyGroups.Response ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            var response = new QueryKeyGroups.Response()
            {
                StatusCode = code,
                ContentType = contentType
            };

            if (code == (HttpStatusCode)204)
            {
                response.IsSuccess = true;
            }
            else if ((code == (HttpStatusCode)201) || (code == (HttpStatusCode)202) || (code == (HttpStatusCode)200))
            {
                response.Data = JsonSerializer.Deserialize<Model.KeyGroupPagingSlicedResult>(payload, ResponseJsonOptions);
                response.IsSuccess = true;
            }

            return response;
        }
    }

}