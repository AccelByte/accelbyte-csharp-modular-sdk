// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Platform.Model;

namespace AccelByte.Sdk.Api.Platform.Operation
{
    /// <summary>
    /// getPsnEntitlementOwnership
    ///
    /// Get user psn entitlement ownership by entitlement label.
    /// </summary>
    public class GetPsnEntitlementOwnership : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static GetPsnEntitlementOwnershipBuilder Builder { get => new GetPsnEntitlementOwnershipBuilder(); }

        public class GetPsnEntitlementOwnershipBuilder
            : OperationBuilder<GetPsnEntitlementOwnershipBuilder>
        {


            public Model.PsnEntitlementOwnershipRequest? Body { get; set; }




            internal GetPsnEntitlementOwnershipBuilder() { }

            internal GetPsnEntitlementOwnershipBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }



            public GetPsnEntitlementOwnershipBuilder SetBody(Model.PsnEntitlementOwnershipRequest _body)
            {
                Body = _body;
                return this;
            }




            public GetPsnEntitlementOwnership Build(
                string entitlementLabel,
                string namespace_
            )
            {
                GetPsnEntitlementOwnership op = new GetPsnEntitlementOwnership(this,
                    entitlementLabel,
                    namespace_
                );

                op.SetBaseFields<GetPsnEntitlementOwnershipBuilder>(this);
                return op;
            }

            public Model.Ownership? Execute(
                string entitlementLabel,
                string namespace_
            )
            {
                GetPsnEntitlementOwnership op = Build(
                    entitlementLabel,
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
            public async Task<Model.Ownership?> ExecuteAsync(
                string entitlementLabel,
                string namespace_
            )
            {
                GetPsnEntitlementOwnership op = Build(
                    entitlementLabel,
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
        }

        private GetPsnEntitlementOwnership(GetPsnEntitlementOwnershipBuilder builder,
            string entitlementLabel,
            string namespace_
        )
        {
            PathParams["entitlementLabel"] = entitlementLabel;
            PathParams["namespace"] = namespace_;





            BodyParams = builder.Body;


            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public GetPsnEntitlementOwnership(
            string entitlementLabel,
            string namespace_,
            Model.PsnEntitlementOwnershipRequest body
        )
        {
            PathParams["entitlementLabel"] = entitlementLabel;
            PathParams["namespace"] = namespace_;





            BodyParams = body;


            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/platform/admin/namespaces/{namespace}/platforms/psn/entitlements/{entitlementLabel}/ownership";

        public override HttpMethod Method => HttpMethod.Post;

        public override List<string> Consumes => new() { "application/json" };

        public override List<string> Produces => new() { "application/json" };

        public Model.Ownership? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                return JsonSerializer.Deserialize<Model.Ownership>(payload, ResponseJsonOptions);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.Ownership>(payload, ResponseJsonOptions);
            }

            var payloadString = payload.ReadToString();

            throw new HttpResponseException(code, payloadString);
        }
    }

}