// Copyright (c) 2022-2023 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Platform.Model;

namespace AccelByte.Sdk.Api.Platform.Operation
{
    /// <summary>
    /// publicGetQRCode
    ///
    ///  [Not Supported Yet In Starter] Get qrcode.
    /// Other detail info:
    /// 
    ///   * Returns : QRCode image stream
    /// </summary>
    public class PublicGetQRCode : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static PublicGetQRCodeBuilder Builder { get => new PublicGetQRCodeBuilder(); }

        public class PublicGetQRCodeBuilder
            : OperationBuilder<PublicGetQRCodeBuilder>
        {





            internal PublicGetQRCodeBuilder() { }

            internal PublicGetQRCodeBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }






            public PublicGetQRCode Build(
                string namespace_,
                string code
            )
            {
                PublicGetQRCode op = new PublicGetQRCode(this,
                    namespace_,
                    code
                );

                op.SetBaseFields<PublicGetQRCodeBuilder>(this);
                return op;
            }

            public byte[]? Execute(
                string namespace_,
                string code
            )
            {
                PublicGetQRCode op = Build(
                    namespace_,
                    code
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
        }

        private PublicGetQRCode(PublicGetQRCodeBuilder builder,
            string namespace_,
            string code
        )
        {
            PathParams["namespace"] = namespace_;

            if (code is not null) QueryParams["code"] = code;






        }
        #endregion

        public PublicGetQRCode(
            string namespace_,
            string code
        )
        {
            PathParams["namespace"] = namespace_;

            if (code is not null) QueryParams["code"] = code;






        }

        public override string Path => "/platform/public/namespaces/{namespace}/payment/qrcode";

        public override HttpMethod Method => HttpMethod.Get;

        public override List<string> Consumes => new() { };

        public override List<string> Produces => new() { "image/png" };

        public byte[]? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                using (MemoryStream ms = new MemoryStream())
                {
                    payload.CopyTo(ms);
                    return ms.ToArray();
                }
            }
            else if (code == (HttpStatusCode)200)
            {
                using (MemoryStream ms = new MemoryStream())
                {
                    payload.CopyTo(ms);
                    return ms.ToArray();
                }
            }

            var payloadString = payload.ReadToString();

            throw new HttpResponseException(code, payloadString);
        }
    }

}