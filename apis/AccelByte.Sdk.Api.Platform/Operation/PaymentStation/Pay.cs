// Copyright (c) 2022-2023 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Platform.Model;

namespace AccelByte.Sdk.Api.Platform.Operation
{
    /// <summary>
    /// pay
    ///
    ///  [Not Supported Yet In Starter] Do payment(For now, this only support checkout.com).
    /// Other detail info:
    /// 
    ///   * Returns : Payment process result
    /// </summary>
    public class Pay : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static PayBuilder Builder { get => new PayBuilder(); }

        public class PayBuilder
            : OperationBuilder<PayBuilder>
        {

            public PayPaymentProvider? PaymentProvider { get; set; }

            public string? ZipCode { get; set; }


            public Model.PaymentToken? Body { get; set; }




            internal PayBuilder() { }

            internal PayBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }


            public PayBuilder SetPaymentProvider(PayPaymentProvider _paymentProvider)
            {
                PaymentProvider = _paymentProvider;
                return this;
            }

            public PayBuilder SetZipCode(string _zipCode)
            {
                ZipCode = _zipCode;
                return this;
            }


            public PayBuilder SetBody(Model.PaymentToken _body)
            {
                Body = _body;
                return this;
            }




            public Pay Build(
                string namespace_,
                string paymentOrderNo
            )
            {
                Pay op = new Pay(this,
                    namespace_,
                    paymentOrderNo
                );

                op.SetBaseFields<PayBuilder>(this);
                return op;
            }

            public Model.PaymentProcessResult? Execute(
                string namespace_,
                string paymentOrderNo
            )
            {
                Pay op = Build(
                    namespace_,
                    paymentOrderNo
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
        }

        private Pay(PayBuilder builder,
            string namespace_,
            string paymentOrderNo
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["paymentOrderNo"] = paymentOrderNo;

            if (builder.PaymentProvider is not null) QueryParams["paymentProvider"] = builder.PaymentProvider.Value;
            if (builder.ZipCode is not null) QueryParams["zipCode"] = builder.ZipCode;




            BodyParams = builder.Body;


        }
        #endregion

        public Pay(
            string namespace_,
            string paymentOrderNo,
            PayPaymentProvider? paymentProvider,
            string? zipCode,
            Model.PaymentToken body
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["paymentOrderNo"] = paymentOrderNo;

            if (paymentProvider is not null) QueryParams["paymentProvider"] = paymentProvider.Value;
            if (zipCode is not null) QueryParams["zipCode"] = zipCode;




            BodyParams = body;


        }

        public override string Path => "/platform/public/namespaces/{namespace}/payment/orders/{paymentOrderNo}/pay";

        public override HttpMethod Method => HttpMethod.Post;

        public override List<string> Consumes => new() { "application/json" };

        public override List<string> Produces => new() { "application/json" };

        public Model.PaymentProcessResult? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                return JsonSerializer.Deserialize<Model.PaymentProcessResult>(payload, ResponseJsonOptions);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.PaymentProcessResult>(payload, ResponseJsonOptions);
            }

            var payloadString = payload.ReadToString();

            throw new HttpResponseException(code, payloadString);
        }
    }

    public class PayPaymentProvider : StringEnum<PayPaymentProvider>
    {
        public static readonly PayPaymentProvider ADYEN
            = new PayPaymentProvider("ADYEN");

        public static readonly PayPaymentProvider ALIPAY
            = new PayPaymentProvider("ALIPAY");

        public static readonly PayPaymentProvider CHECKOUT
            = new PayPaymentProvider("CHECKOUT");

        public static readonly PayPaymentProvider PAYPAL
            = new PayPaymentProvider("PAYPAL");

        public static readonly PayPaymentProvider STRIPE
            = new PayPaymentProvider("STRIPE");

        public static readonly PayPaymentProvider WALLET
            = new PayPaymentProvider("WALLET");

        public static readonly PayPaymentProvider WXPAY
            = new PayPaymentProvider("WXPAY");

        public static readonly PayPaymentProvider XSOLLA
            = new PayPaymentProvider("XSOLLA");


        public static implicit operator PayPaymentProvider(string value)
        {
            return NewValue(value);
        }

        public PayPaymentProvider(string enumValue)
            : base(enumValue)
        {

        }
    }

}