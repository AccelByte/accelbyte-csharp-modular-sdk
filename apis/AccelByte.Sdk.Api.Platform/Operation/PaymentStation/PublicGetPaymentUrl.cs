// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Platform.Model;

namespace AccelByte.Sdk.Api.Platform.Operation
{
    /// <summary>
    /// publicGetPaymentUrl
    ///
    ///  [Not supported yet in AGS Shared Cloud] Get payment url.
    /// Other detail info:
    /// 
    ///   * For Neon Pay payment provider, the 'neonPayConfig' field can be used to provide success and cancel URL. If 'neonPayConfig' field is not present, the 'returnUrl' will be used for both success and cancel URL.
    ///   *  Returns : Get payment link
    /// </summary>
    public class PublicGetPaymentUrl : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static PublicGetPaymentUrlBuilder Builder { get => new PublicGetPaymentUrlBuilder(); }

        public class PublicGetPaymentUrlBuilder
            : OperationBuilder<PublicGetPaymentUrlBuilder>
        {





            internal PublicGetPaymentUrlBuilder() { }

            internal PublicGetPaymentUrlBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }






            public PublicGetPaymentUrl Build(
                PaymentUrlCreate body,
                string namespace_
            )
            {
                PublicGetPaymentUrl op = new PublicGetPaymentUrl(this,
                    body,
                    namespace_
                );

                op.SetBaseFields<PublicGetPaymentUrlBuilder>(this);
                return op;
            }

            public Model.PaymentUrl? Execute(
                PaymentUrlCreate body,
                string namespace_
            )
            {
                PublicGetPaymentUrl op = Build(
                    body,
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
            public async Task<Model.PaymentUrl?> ExecuteAsync(
                PaymentUrlCreate body,
                string namespace_
            )
            {
                PublicGetPaymentUrl op = Build(
                    body,
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
        }

        private PublicGetPaymentUrl(PublicGetPaymentUrlBuilder builder,
            PaymentUrlCreate body,
            string namespace_
        )
        {
            PathParams["namespace"] = namespace_;





            BodyParams = body;


        }
        #endregion

        public PublicGetPaymentUrl(
            string namespace_,
            Model.PaymentUrlCreate body
        )
        {
            PathParams["namespace"] = namespace_;





            BodyParams = body;


        }

        public override string Path => "/platform/public/namespaces/{namespace}/payment/link";

        public override HttpMethod Method => HttpMethod.Post;

        public override List<string> Consumes => new() { "application/json" };

        public override List<string> Produces => new() { "application/json" };

        public Model.PaymentUrl? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                return JsonSerializer.Deserialize<Model.PaymentUrl>(payload, ResponseJsonOptions);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.PaymentUrl>(payload, ResponseJsonOptions);
            }

            var payloadString = payload.ReadToString();

            throw new HttpResponseException(code, payloadString);
        }
    }

}