// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Platform.Model;

namespace AccelByte.Sdk.Api.Platform.Operation
{
    /// <summary>
    /// getPaymentCustomization
    ///
    ///  [Not supported yet in AGS Shared Cloud] Get payment provider customization, at current only Adyen provide customization. This api has been deprecated, pls use /public/namespaces/{namespace}/payment/publicconfig to get adyen config
    /// Other detail info:
    /// 
    ///   * Returns : customization
    /// </summary>
    [Obsolete(DiagnosticId ="ab_deprecated_operation")]
    public class GetPaymentCustomization : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static GetPaymentCustomizationBuilder Builder { get => new GetPaymentCustomizationBuilder(); }

        public class GetPaymentCustomizationBuilder
            : OperationBuilder<GetPaymentCustomizationBuilder>
        {

            public bool? Sandbox { get; set; }





            internal GetPaymentCustomizationBuilder() { }

            internal GetPaymentCustomizationBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }


            public GetPaymentCustomizationBuilder SetSandbox(bool _sandbox)
            {
                Sandbox = _sandbox;
                return this;
            }





            public GetPaymentCustomization Build(
                string namespace_,
                GetPaymentCustomizationPaymentProvider paymentProvider,
                string region
            )
            {
                GetPaymentCustomization op = new GetPaymentCustomization(this,
                    namespace_,                    
                    paymentProvider,                    
                    region                    
                );

                op.SetBaseFields<GetPaymentCustomizationBuilder>(this);
                return op;
            }

            [Obsolete(DiagnosticId ="ab_deprecated_operation_wrapper")]
            public Model.Customization? Execute(
                string namespace_,
                string paymentProvider,
                string region
            )
            {
                GetPaymentCustomization op = Build(
                    namespace_,
                    paymentProvider,
                    region
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
            public async Task<Model.Customization?> ExecuteAsync(
                string namespace_,
                string paymentProvider,
                string region
            )
            {
                GetPaymentCustomization op = Build(
                    namespace_,
                    paymentProvider,
                    region
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
        }

        private GetPaymentCustomization(GetPaymentCustomizationBuilder builder,
            string namespace_,
            GetPaymentCustomizationPaymentProvider paymentProvider,
            string region
        )
        {
            PathParams["namespace"] = namespace_;
            
            if (builder.Sandbox != null) QueryParams["sandbox"] = Convert.ToString(builder.Sandbox)!;
            if (paymentProvider is not null) QueryParams["paymentProvider"] = paymentProvider.Value;
            if (region is not null) QueryParams["region"] = region;
            

            
            
            

        }
        #endregion

        public GetPaymentCustomization(
            string namespace_,            
            bool? sandbox,            
            GetPaymentCustomizationPaymentProvider paymentProvider,            
            string region            
        )
        {
            PathParams["namespace"] = namespace_;
            
            if (sandbox != null) QueryParams["sandbox"] = Convert.ToString(sandbox)!;
            if (paymentProvider is not null) QueryParams["paymentProvider"] = paymentProvider.Value;
            if (region is not null) QueryParams["region"] = region;
            

            
            
            

        }

        public override string Path => "/platform/public/namespaces/{namespace}/payment/customization";

        public override HttpMethod Method => HttpMethod.Get;

        public override List<string> Consumes => new() { "application/json" };

        public override List<string> Produces => new() { "application/json" };        
        
        public Model.Customization? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {            
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                return JsonSerializer.Deserialize<Model.Customization>(payload, ResponseJsonOptions);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.Customization>(payload, ResponseJsonOptions);
            }
            
            var payloadString = payload.ReadToString();
            
            throw new HttpResponseException(code, payloadString);
        }
    }

    public class GetPaymentCustomizationPaymentProvider : StringEnum<GetPaymentCustomizationPaymentProvider>
    {
        public static readonly GetPaymentCustomizationPaymentProvider ADYEN
            = new GetPaymentCustomizationPaymentProvider("ADYEN");

        public static readonly GetPaymentCustomizationPaymentProvider ALIPAY
            = new GetPaymentCustomizationPaymentProvider("ALIPAY");

        public static readonly GetPaymentCustomizationPaymentProvider CHECKOUT
            = new GetPaymentCustomizationPaymentProvider("CHECKOUT");

        public static readonly GetPaymentCustomizationPaymentProvider NEONPAY
            = new GetPaymentCustomizationPaymentProvider("NEONPAY");

        public static readonly GetPaymentCustomizationPaymentProvider PAYPAL
            = new GetPaymentCustomizationPaymentProvider("PAYPAL");

        public static readonly GetPaymentCustomizationPaymentProvider STRIPE
            = new GetPaymentCustomizationPaymentProvider("STRIPE");

        public static readonly GetPaymentCustomizationPaymentProvider WALLET
            = new GetPaymentCustomizationPaymentProvider("WALLET");

        public static readonly GetPaymentCustomizationPaymentProvider WXPAY
            = new GetPaymentCustomizationPaymentProvider("WXPAY");

        public static readonly GetPaymentCustomizationPaymentProvider XSOLLA
            = new GetPaymentCustomizationPaymentProvider("XSOLLA");


        public static implicit operator GetPaymentCustomizationPaymentProvider(string value)
        {
            return NewValue(value);
        }

        public GetPaymentCustomizationPaymentProvider(string enumValue)
            : base(enumValue)
        {

        }
    }

}