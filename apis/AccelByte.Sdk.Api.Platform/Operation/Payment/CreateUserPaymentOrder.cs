// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Platform.Model;

namespace AccelByte.Sdk.Api.Platform.Operation
{
    /// <summary>
    /// createUserPaymentOrder
    ///
    ///  [Not supported yet in AGS Shared Cloud] [SERVICE COMMUNICATION ONLY] This API is used to create payment order from justice service. The result contains the payment station url.
    /// Other detail info:
    /// 
    ///   * It will be forbidden while the user is banned: PAYMENT_INITIATE or ORDER_AND_PAYMENT
    ///   *  Returns : created order
    /// 
    /// 
    /// 
    /// ## Restrictions for custom parameters and meta data
    /// 
    /// 
    /// 1. Cannot use "." as the key name
    /// -
    /// 
    /// 
    ///     { "data.2": "value" }
    /// 
    /// 
    /// 2. Cannot use "$" as the prefix in key names
    /// -
    /// 
    /// 
    ///     { "$data": "value" }
    /// </summary>
    public class CreateUserPaymentOrder : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static CreateUserPaymentOrderBuilder Builder { get => new CreateUserPaymentOrderBuilder(); }

        public class CreateUserPaymentOrderBuilder
            : OperationBuilder<CreateUserPaymentOrderBuilder>
        {





            internal CreateUserPaymentOrderBuilder() { }

            internal CreateUserPaymentOrderBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }






            public CreateUserPaymentOrder Build(
                PaymentOrderCreate body,
                string namespace_,
                string userId
            )
            {
                CreateUserPaymentOrder op = new CreateUserPaymentOrder(this,
                    body,
                    namespace_,
                    userId
                );

                op.SetBaseFields<CreateUserPaymentOrderBuilder>(this);
                return op;
            }

            public Model.PaymentOrderInfo? Execute(
                PaymentOrderCreate body,
                string namespace_,
                string userId
            )
            {
                CreateUserPaymentOrder op = Build(
                    body,
                    namespace_,
                    userId
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
            public async Task<Model.PaymentOrderInfo?> ExecuteAsync(
                PaymentOrderCreate body,
                string namespace_,
                string userId
            )
            {
                CreateUserPaymentOrder op = Build(
                    body,
                    namespace_,
                    userId
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }

            public Model.PaymentOrderInfo<T1>? Execute<T1>(
                PaymentOrderCreate body,
                string namespace_,
                string userId
            )
            {
                CreateUserPaymentOrder op = Build(
                    body,
                    namespace_,
                    userId
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
            public async Task<Model.PaymentOrderInfo<T1>?> ExecuteAsync<T1>(
                PaymentOrderCreate body,
                string namespace_,
                string userId
            )
            {
                CreateUserPaymentOrder op = Build(
                    body,
                    namespace_,
                    userId
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
        }

        private CreateUserPaymentOrder(CreateUserPaymentOrderBuilder builder,
            PaymentOrderCreate body,
            string namespace_,
            string userId
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["userId"] = userId;





            BodyParams = body;


            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public CreateUserPaymentOrder(
            string namespace_,
            string userId,
            Model.PaymentOrderCreate body
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["userId"] = userId;





            BodyParams = body;


            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/platform/admin/namespaces/{namespace}/users/{userId}/payment/orders";

        public override HttpMethod Method => HttpMethod.Post;

        public override List<string> Consumes => new() { "application/json" };

        public override List<string> Produces => new() { "application/json" };

        public Model.PaymentOrderInfo? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                return JsonSerializer.Deserialize<Model.PaymentOrderInfo>(payload, ResponseJsonOptions);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.PaymentOrderInfo>(payload, ResponseJsonOptions);
            }

            var payloadString = payload.ReadToString();

            throw new HttpResponseException(code, payloadString);
        }

        public Model.PaymentOrderInfo<T1>? ParseResponse<T1>(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                return JsonSerializer.Deserialize<Model.PaymentOrderInfo<T1>>(payload, ResponseJsonOptions);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.PaymentOrderInfo<T1>>(payload, ResponseJsonOptions);
            }

            var payloadString = payload.ReadToString();
            throw new HttpResponseException(code, payloadString);
        }
    }

}