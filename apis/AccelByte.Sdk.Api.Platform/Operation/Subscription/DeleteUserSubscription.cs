// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Platform.Model;

namespace AccelByte.Sdk.Api.Platform.Operation
{
    /// <summary>
    /// deleteUserSubscription
    ///
    ///  [TEST FACILITY ONLY] Forbidden in live environment. Delete user subscription.
    /// </summary>
    public class DeleteUserSubscription : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static DeleteUserSubscriptionBuilder Builder { get => new DeleteUserSubscriptionBuilder(); }

        public class DeleteUserSubscriptionBuilder
            : OperationBuilder<DeleteUserSubscriptionBuilder>
        {





            internal DeleteUserSubscriptionBuilder() { }

            internal DeleteUserSubscriptionBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }






            public DeleteUserSubscription Build(
                string namespace_,
                string subscriptionId,
                string userId
            )
            {
                DeleteUserSubscription op = new DeleteUserSubscription(this,
                    namespace_,
                    subscriptionId,
                    userId
                );

                op.SetBaseFields<DeleteUserSubscriptionBuilder>(this);
                return op;
            }

            public DeleteUserSubscription.Response Execute(
                string namespace_,
                string subscriptionId,
                string userId
            )
            {
                DeleteUserSubscription op = Build(
                    namespace_,
                    subscriptionId,
                    userId
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
            public async Task<DeleteUserSubscription.Response> ExecuteAsync(
                string namespace_,
                string subscriptionId,
                string userId
            )
            {
                DeleteUserSubscription op = Build(
                    namespace_,
                    subscriptionId,
                    userId
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
        }

        private DeleteUserSubscription(DeleteUserSubscriptionBuilder builder,
            string namespace_,
            string subscriptionId,
            string userId
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["subscriptionId"] = subscriptionId;
            PathParams["userId"] = userId;







            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        #region Response Part        
        public class Response : ApiResponse
        {


            protected override string GetFullOperationId() => "Platform::Subscription::DeleteUserSubscription";
        }

        #endregion

        public DeleteUserSubscription(
            string namespace_,
            string subscriptionId,
            string userId
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["subscriptionId"] = subscriptionId;
            PathParams["userId"] = userId;







            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/platform/admin/namespaces/{namespace}/users/{userId}/subscriptions/{subscriptionId}";

        public override HttpMethod Method => HttpMethod.Delete;

        public override List<string> Consumes => new() { "application/json" };

        public override List<string> Produces => new() { "application/json" };

        public DeleteUserSubscription.Response ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            var response = new DeleteUserSubscription.Response()
            {
                StatusCode = code,
                ContentType = contentType,
                IsSuccess = true
            };


            return response;
        }
    }

}