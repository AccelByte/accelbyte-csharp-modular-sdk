// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Platform.Model;

namespace AccelByte.Sdk.Api.Platform.Operation
{
    /// <summary>
    /// publicSubscribeSubscription
    ///
    /// Subscribe a subscription. Support both real and virtual payment. Need go through payment flow using the paymentOrderNo if paymentFlowRequired true.
    ///  ACTIVE USER subscription can't do subscribe again.
    ///  The next billing date will be X(default 4) hours before the current period ends if correctly subscribed.
    /// User with permission SANDBOX will create sandbox subscription that not real paid.
    /// Other detail info:
    /// 
    ///   * Optional permission(user with this permission will create sandbox subscription) : resource="SANDBOX", action=1 (CREATE)
    ///   * It will be forbidden while the user is banned: ORDER_INITIATE or ORDER_AND_PAYMENT
    ///   *  Returns : created subscription
    /// </summary>
    public class PublicSubscribeSubscription : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static PublicSubscribeSubscriptionBuilder Builder { get => new PublicSubscribeSubscriptionBuilder(); }

        public class PublicSubscribeSubscriptionBuilder
            : OperationBuilder<PublicSubscribeSubscriptionBuilder>
        {


            public Model.SubscribeRequest? Body { get; set; }




            internal PublicSubscribeSubscriptionBuilder() { }

            internal PublicSubscribeSubscriptionBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }



            public PublicSubscribeSubscriptionBuilder SetBody(Model.SubscribeRequest _body)
            {
                Body = _body;
                return this;
            }




            public PublicSubscribeSubscription Build(
                string namespace_,
                string userId
            )
            {
                PublicSubscribeSubscription op = new PublicSubscribeSubscription(this,
                    namespace_,
                    userId
                );

                op.SetBaseFields<PublicSubscribeSubscriptionBuilder>(this);
                return op;
            }

            public void Execute(
                string namespace_,
                string userId
            )
            {
                PublicSubscribeSubscription op = Build(
                    namespace_,
                    userId
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
            public async Task ExecuteAsync(
                string namespace_,
                string userId
            )
            {
                PublicSubscribeSubscription op = Build(
                    namespace_,
                    userId
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
        }

        private PublicSubscribeSubscription(PublicSubscribeSubscriptionBuilder builder,
            string namespace_,
            string userId
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["userId"] = userId;





            BodyParams = builder.Body;


            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public PublicSubscribeSubscription(
            string namespace_,
            string userId,
            Model.SubscribeRequest body
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["userId"] = userId;





            BodyParams = body;


            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/platform/public/namespaces/{namespace}/users/{userId}/subscriptions";

        public override HttpMethod Method => HttpMethod.Post;

        public override List<string> Consumes => new() { "application/json" };

        public override List<string> Produces => new() { "application/json" };

        public void ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)201)
            {
                return;
            }

            var payloadString = payload.ReadToString();

            throw new HttpResponseException(code, payloadString);
        }
    }

}