// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Platform.Model;

namespace AccelByte.Sdk.Api.Platform.Operation
{
    /// <summary>
    /// getCode
    ///
    /// Get campaign code, it will check code whether available to redeem if redeemable true.
    /// Other detail info:
    /// 
    ///   * Returns : code info
    /// </summary>
    public class GetCode : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static GetCodeBuilder Builder { get => new GetCodeBuilder(); }

        public class GetCodeBuilder
            : OperationBuilder<GetCodeBuilder>
        {

            public bool? Redeemable { get; set; }

            public bool? WithBatchName { get; set; }





            internal GetCodeBuilder() { }

            internal GetCodeBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }


            public GetCodeBuilder SetRedeemable(bool _redeemable)
            {
                Redeemable = _redeemable;
                return this;
            }

            public GetCodeBuilder SetWithBatchName(bool _withBatchName)
            {
                WithBatchName = _withBatchName;
                return this;
            }





            public GetCode Build(
                string code,
                string namespace_
            )
            {
                GetCode op = new GetCode(this,
                    code,
                    namespace_
                );

                op.SetBaseFields<GetCodeBuilder>(this);
                return op;
            }

            public GetCode.Response Execute(
                string code,
                string namespace_
            )
            {
                GetCode op = Build(
                    code,
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
            public async Task<GetCode.Response> ExecuteAsync(
                string code,
                string namespace_
            )
            {
                GetCode op = Build(
                    code,
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
        }

        private GetCode(GetCodeBuilder builder,
            string code,
            string namespace_
        )
        {
            PathParams["code"] = code;
            PathParams["namespace"] = namespace_;

            if (builder.Redeemable != null) QueryParams["redeemable"] = Convert.ToString(builder.Redeemable)!;
            if (builder.WithBatchName != null) QueryParams["withBatchName"] = Convert.ToString(builder.WithBatchName)!;






            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        #region Response Part        
        public class Response : ApiResponse<Model.CodeInfo>
        {

            public ErrorEntity? Error404 { get; set; } = null;

            public ErrorEntity? Error409 { get; set; } = null;


            protected override string GetFullOperationId() => "Platform::Campaign::GetCode";
        }

        #endregion

        public GetCode(
            string code,
            string namespace_,
            bool? redeemable,
            bool? withBatchName
        )
        {
            PathParams["code"] = code;
            PathParams["namespace"] = namespace_;

            if (redeemable != null) QueryParams["redeemable"] = Convert.ToString(redeemable)!;
            if (withBatchName != null) QueryParams["withBatchName"] = Convert.ToString(withBatchName)!;






            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/platform/admin/namespaces/{namespace}/codes/{code}";

        public override HttpMethod Method => HttpMethod.Get;

        public override List<string> Consumes => new() { };

        public override List<string> Produces => new() { "application/json" };

        public GetCode.Response ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            var response = new GetCode.Response()
            {
                StatusCode = code,
                ContentType = contentType
            };

            if (code == (HttpStatusCode)204)
            {
                response.IsSuccess = true;
            }
            else if ((code == (HttpStatusCode)201) || (code == (HttpStatusCode)202) || (code == (HttpStatusCode)200))
            {
                response.Data = JsonSerializer.Deserialize<Model.CodeInfo>(payload, ResponseJsonOptions);
                response.IsSuccess = true;
            }
            else if (code == (HttpStatusCode)404)
            {
                response.Error404 = JsonSerializer.Deserialize<ErrorEntity>(payload, ResponseJsonOptions);
                response.Error = response.Error404!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)409)
            {
                response.Error409 = JsonSerializer.Deserialize<ErrorEntity>(payload, ResponseJsonOptions);
                response.Error = response.Error409!.TranslateToApiError();
            }

            return response;
        }
    }

}