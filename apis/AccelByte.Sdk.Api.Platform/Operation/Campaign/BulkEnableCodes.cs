// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Platform.Model;

namespace AccelByte.Sdk.Api.Platform.Operation
{
    /// <summary>
    /// bulkEnableCodes
    ///
    /// Bulk enable campaign codes.
    /// Other detail info:
    /// 
    ///   * Returns : the number of code actually enabled
    /// </summary>
    public class BulkEnableCodes : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static BulkEnableCodesBuilder Builder { get => new BulkEnableCodesBuilder(); }

        public class BulkEnableCodesBuilder
            : OperationBuilder<BulkEnableCodesBuilder>
        {

            public string? BatchName { get; set; }

            public List<int>? BatchNo { get; set; }





            internal BulkEnableCodesBuilder() { }

            internal BulkEnableCodesBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }


            public BulkEnableCodesBuilder SetBatchName(string _batchName)
            {
                BatchName = _batchName;
                return this;
            }

            public BulkEnableCodesBuilder SetBatchNo(List<int> _batchNo)
            {
                BatchNo = _batchNo;
                return this;
            }





            public BulkEnableCodes Build(
                string campaignId,
                string namespace_
            )
            {
                BulkEnableCodes op = new BulkEnableCodes(this,
                    campaignId,
                    namespace_
                );

                op.SetBaseFields<BulkEnableCodesBuilder>(this);
                return op;
            }

            public BulkEnableCodes.Response Execute(
                string campaignId,
                string namespace_
            )
            {
                BulkEnableCodes op = Build(
                    campaignId,
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
            public async Task<BulkEnableCodes.Response> ExecuteAsync(
                string campaignId,
                string namespace_
            )
            {
                BulkEnableCodes op = Build(
                    campaignId,
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
        }

        private BulkEnableCodes(BulkEnableCodesBuilder builder,
            string campaignId,
            string namespace_
        )
        {
            PathParams["campaignId"] = campaignId;
            PathParams["namespace"] = namespace_;

            if (builder.BatchName is not null) QueryParams["batchName"] = builder.BatchName;
            if (builder.BatchNo is not null) QueryParams["batchNo"] = builder.BatchNo;



            CollectionFormatMap["batchNo"] = "multi";



            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        #region Response Part        
        public class Response : ApiResponse<Model.BulkOperationResult>
        {


            protected override string GetFullOperationId() => "Platform::Campaign::BulkEnableCodes";
        }

        #endregion

        public BulkEnableCodes(
            string campaignId,
            string namespace_,
            string? batchName,
            List<int>? batchNo
        )
        {
            PathParams["campaignId"] = campaignId;
            PathParams["namespace"] = namespace_;

            if (batchName is not null) QueryParams["batchName"] = batchName;
            if (batchNo is not null) QueryParams["batchNo"] = batchNo;



            CollectionFormatMap["batchNo"] = "multi";



            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/platform/admin/namespaces/{namespace}/codes/campaigns/{campaignId}/enable/bulk";

        public override HttpMethod Method => HttpMethod.Put;

        public override List<string> Consumes => new() { "application/json" };

        public override List<string> Produces => new() { "application/json" };

        public BulkEnableCodes.Response ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            var response = new BulkEnableCodes.Response()
            {
                StatusCode = code,
                ContentType = contentType
            };

            if (code == (HttpStatusCode)204)
            {
                response.IsSuccess = true;
            }
            else if ((code == (HttpStatusCode)201) || (code == (HttpStatusCode)202) || (code == (HttpStatusCode)200))
            {
                response.Data = JsonSerializer.Deserialize<Model.BulkOperationResult>(payload, ResponseJsonOptions);
                response.IsSuccess = true;
            }

            return response;
        }
    }

}