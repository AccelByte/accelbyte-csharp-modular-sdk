// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Platform.Model;

namespace AccelByte.Sdk.Api.Platform.Operation
{
    /// <summary>
    /// geDLCDurableRewardShortMap
    ///
    /// Get dlc reward simple map, only return the sku of durable item reward.
    /// </summary>
    public class GeDLCDurableRewardShortMap : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static GeDLCDurableRewardShortMapBuilder Builder { get => new GeDLCDurableRewardShortMapBuilder(); }

        public class GeDLCDurableRewardShortMapBuilder
            : OperationBuilder<GeDLCDurableRewardShortMapBuilder>
        {





            internal GeDLCDurableRewardShortMapBuilder() { }

            internal GeDLCDurableRewardShortMapBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }






            public GeDLCDurableRewardShortMap Build(
                string namespace_,
                GeDLCDurableRewardShortMapDlcType dlcType
            )
            {
                GeDLCDurableRewardShortMap op = new GeDLCDurableRewardShortMap(this,
                    namespace_,                    
                    dlcType                    
                );

                op.SetBaseFields<GeDLCDurableRewardShortMapBuilder>(this);
                return op;
            }

            public Model.DLCConfigRewardShortInfo? Execute(
                string namespace_,
                string dlcType
            )
            {
                GeDLCDurableRewardShortMap op = Build(
                    namespace_,
                    dlcType
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
            public async Task<Model.DLCConfigRewardShortInfo?> ExecuteAsync(
                string namespace_,
                string dlcType
            )
            {
                GeDLCDurableRewardShortMap op = Build(
                    namespace_,
                    dlcType
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
        }

        private GeDLCDurableRewardShortMap(GeDLCDurableRewardShortMapBuilder builder,
            string namespace_,
            GeDLCDurableRewardShortMapDlcType dlcType
        )
        {
            PathParams["namespace"] = namespace_;
            
            if (dlcType is not null) QueryParams["dlcType"] = dlcType.Value;
            

            
            
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public GeDLCDurableRewardShortMap(
            string namespace_,            
            GeDLCDurableRewardShortMapDlcType dlcType            
        )
        {
            PathParams["namespace"] = namespace_;
            
            if (dlcType is not null) QueryParams["dlcType"] = dlcType.Value;
            

            
            
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/platform/public/namespaces/{namespace}/dlc/rewards/durable/map";

        public override HttpMethod Method => HttpMethod.Get;

        public override List<string> Consumes => new() {  };

        public override List<string> Produces => new() {  };        
        
        public Model.DLCConfigRewardShortInfo? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {            
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                return JsonSerializer.Deserialize<Model.DLCConfigRewardShortInfo>(payload, ResponseJsonOptions);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.DLCConfigRewardShortInfo>(payload, ResponseJsonOptions);
            }
            
            var payloadString = payload.ReadToString();
            
            throw new HttpResponseException(code, payloadString);
        }
    }

    public class GeDLCDurableRewardShortMapDlcType : StringEnum<GeDLCDurableRewardShortMapDlcType>
    {
        public static readonly GeDLCDurableRewardShortMapDlcType EPICGAMES
            = new GeDLCDurableRewardShortMapDlcType("EPICGAMES");

        public static readonly GeDLCDurableRewardShortMapDlcType OCULUS
            = new GeDLCDurableRewardShortMapDlcType("OCULUS");

        public static readonly GeDLCDurableRewardShortMapDlcType PSN
            = new GeDLCDurableRewardShortMapDlcType("PSN");

        public static readonly GeDLCDurableRewardShortMapDlcType STEAM
            = new GeDLCDurableRewardShortMapDlcType("STEAM");

        public static readonly GeDLCDurableRewardShortMapDlcType XBOX
            = new GeDLCDurableRewardShortMapDlcType("XBOX");


        public static implicit operator GeDLCDurableRewardShortMapDlcType(string value)
        {
            return NewValue(value);
        }

        public GeDLCDurableRewardShortMapDlcType(string enumValue)
            : base(enumValue)
        {

        }
    }

}