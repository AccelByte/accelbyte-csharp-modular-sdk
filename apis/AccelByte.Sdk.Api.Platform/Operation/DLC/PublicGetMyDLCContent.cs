// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Platform.Model;

namespace AccelByte.Sdk.Api.Platform.Operation
{
    /// <summary>
    /// publicGetMyDLCContent
    ///
    /// Get user dlc reward contents. If includeAllNamespaces is false, will only return the dlc synced from the current namespace
    /// Other detail info:
    /// 
    ///   * Returns : user dlc
    /// </summary>
    public class PublicGetMyDLCContent : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static PublicGetMyDLCContentBuilder Builder { get => new PublicGetMyDLCContentBuilder(); }

        public class PublicGetMyDLCContentBuilder
            : OperationBuilder<PublicGetMyDLCContentBuilder>
        {

            public bool? IncludeAllNamespaces { get; set; }





            internal PublicGetMyDLCContentBuilder() { }

            internal PublicGetMyDLCContentBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }


            public PublicGetMyDLCContentBuilder SetIncludeAllNamespaces(bool _includeAllNamespaces)
            {
                IncludeAllNamespaces = _includeAllNamespaces;
                return this;
            }





            public PublicGetMyDLCContent Build(
                PublicGetMyDLCContentType type
            )
            {
                PublicGetMyDLCContent op = new PublicGetMyDLCContent(this,
                    type
                );

                op.SetBaseFields<PublicGetMyDLCContentBuilder>(this);
                return op;
            }

            public Model.SimpleUserDLCRewardContentsResponse? Execute(
                string type
            )
            {
                PublicGetMyDLCContent op = Build(
                    type
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
            public async Task<Model.SimpleUserDLCRewardContentsResponse?> ExecuteAsync(
                string type
            )
            {
                PublicGetMyDLCContent op = Build(
                    type
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
        }

        private PublicGetMyDLCContent(PublicGetMyDLCContentBuilder builder,
            PublicGetMyDLCContentType type
        )
        {

            if (builder.IncludeAllNamespaces != null) QueryParams["includeAllNamespaces"] = Convert.ToString(builder.IncludeAllNamespaces)!;
            if (type is not null) QueryParams["type"] = type.Value;






            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public PublicGetMyDLCContent(
            bool? includeAllNamespaces,
            PublicGetMyDLCContentType type
        )
        {

            if (includeAllNamespaces != null) QueryParams["includeAllNamespaces"] = Convert.ToString(includeAllNamespaces)!;
            if (type is not null) QueryParams["type"] = type.Value;






            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/platform/public/users/me/dlc/content";

        public override HttpMethod Method => HttpMethod.Get;

        public override List<string> Consumes => new() { };

        public override List<string> Produces => new() { "application/json" };

        public Model.SimpleUserDLCRewardContentsResponse? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                return JsonSerializer.Deserialize<Model.SimpleUserDLCRewardContentsResponse>(payload, ResponseJsonOptions);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.SimpleUserDLCRewardContentsResponse>(payload, ResponseJsonOptions);
            }

            var payloadString = payload.ReadToString();

            throw new HttpResponseException(code, payloadString);
        }
    }

    public class PublicGetMyDLCContentType : StringEnum<PublicGetMyDLCContentType>
    {
        public static readonly PublicGetMyDLCContentType EPICGAMES
            = new PublicGetMyDLCContentType("EPICGAMES");

        public static readonly PublicGetMyDLCContentType OCULUS
            = new PublicGetMyDLCContentType("OCULUS");

        public static readonly PublicGetMyDLCContentType PSN
            = new PublicGetMyDLCContentType("PSN");

        public static readonly PublicGetMyDLCContentType STEAM
            = new PublicGetMyDLCContentType("STEAM");

        public static readonly PublicGetMyDLCContentType XBOX
            = new PublicGetMyDLCContentType("XBOX");


        public static implicit operator PublicGetMyDLCContentType(string value)
        {
            return NewValue(value);
        }

        public PublicGetMyDLCContentType(string enumValue)
            : base(enumValue)
        {

        }
    }

}