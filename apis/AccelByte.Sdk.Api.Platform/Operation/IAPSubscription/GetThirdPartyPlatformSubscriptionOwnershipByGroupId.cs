// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Platform.Model;

namespace AccelByte.Sdk.Api.Platform.Operation
{
    /// <summary>
    /// getThirdPartyPlatformSubscriptionOwnershipByGroupId
    ///
    /// Get user third party subscription by subscription group id.
    /// </summary>
    public class GetThirdPartyPlatformSubscriptionOwnershipByGroupId : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static GetThirdPartyPlatformSubscriptionOwnershipByGroupIdBuilder Builder { get => new GetThirdPartyPlatformSubscriptionOwnershipByGroupIdBuilder(); }

        public class GetThirdPartyPlatformSubscriptionOwnershipByGroupIdBuilder
            : OperationBuilder<GetThirdPartyPlatformSubscriptionOwnershipByGroupIdBuilder>
        {





            internal GetThirdPartyPlatformSubscriptionOwnershipByGroupIdBuilder() { }

            internal GetThirdPartyPlatformSubscriptionOwnershipByGroupIdBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }






            public GetThirdPartyPlatformSubscriptionOwnershipByGroupId Build(
                string namespace_,
                GetThirdPartyPlatformSubscriptionOwnershipByGroupIdPlatform platform,
                string userId,
                string groupId
            )
            {
                GetThirdPartyPlatformSubscriptionOwnershipByGroupId op = new GetThirdPartyPlatformSubscriptionOwnershipByGroupId(this,
                    namespace_,
                    platform,
                    userId,
                    groupId
                );

                op.SetBaseFields<GetThirdPartyPlatformSubscriptionOwnershipByGroupIdBuilder>(this);
                return op;
            }

            public Model.ThirdPartySubscriptionOwnership? Execute(
                string namespace_,
                string platform,
                string userId,
                string groupId
            )
            {
                GetThirdPartyPlatformSubscriptionOwnershipByGroupId op = Build(
                    namespace_,
                    platform,
                    userId,
                    groupId
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
            public async Task<Model.ThirdPartySubscriptionOwnership?> ExecuteAsync(
                string namespace_,
                string platform,
                string userId,
                string groupId
            )
            {
                GetThirdPartyPlatformSubscriptionOwnershipByGroupId op = Build(
                    namespace_,
                    platform,
                    userId,
                    groupId
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
        }

        private GetThirdPartyPlatformSubscriptionOwnershipByGroupId(GetThirdPartyPlatformSubscriptionOwnershipByGroupIdBuilder builder,
            string namespace_,
            GetThirdPartyPlatformSubscriptionOwnershipByGroupIdPlatform platform,
            string userId,
            string groupId
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["platform"] = platform.Value;
            PathParams["userId"] = userId;

            if (groupId is not null) QueryParams["groupId"] = groupId;






            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public GetThirdPartyPlatformSubscriptionOwnershipByGroupId(
            string namespace_,
            GetThirdPartyPlatformSubscriptionOwnershipByGroupIdPlatform platform,
            string userId,
            string groupId
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["platform"] = platform.Value;
            PathParams["userId"] = userId;

            if (groupId is not null) QueryParams["groupId"] = groupId;






            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/platform/admin/namespaces/{namespace}/users/{userId}/iap/subscriptions/platforms/{platform}/ownership/byGroupId";

        public override HttpMethod Method => HttpMethod.Get;

        public override List<string> Consumes => new() { };

        public override List<string> Produces => new() { "application/json" };

        public Model.ThirdPartySubscriptionOwnership? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                return JsonSerializer.Deserialize<Model.ThirdPartySubscriptionOwnership>(payload, ResponseJsonOptions);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.ThirdPartySubscriptionOwnership>(payload, ResponseJsonOptions);
            }

            var payloadString = payload.ReadToString();

            throw new HttpResponseException(code, payloadString);
        }
    }

    public class GetThirdPartyPlatformSubscriptionOwnershipByGroupIdPlatform : StringEnum<GetThirdPartyPlatformSubscriptionOwnershipByGroupIdPlatform>
    {
        public static readonly GetThirdPartyPlatformSubscriptionOwnershipByGroupIdPlatform APPLE
            = new GetThirdPartyPlatformSubscriptionOwnershipByGroupIdPlatform("APPLE");

        public static readonly GetThirdPartyPlatformSubscriptionOwnershipByGroupIdPlatform EPICGAMES
            = new GetThirdPartyPlatformSubscriptionOwnershipByGroupIdPlatform("EPICGAMES");

        public static readonly GetThirdPartyPlatformSubscriptionOwnershipByGroupIdPlatform GOOGLE
            = new GetThirdPartyPlatformSubscriptionOwnershipByGroupIdPlatform("GOOGLE");

        public static readonly GetThirdPartyPlatformSubscriptionOwnershipByGroupIdPlatform OCULUS
            = new GetThirdPartyPlatformSubscriptionOwnershipByGroupIdPlatform("OCULUS");

        public static readonly GetThirdPartyPlatformSubscriptionOwnershipByGroupIdPlatform PLAYSTATION
            = new GetThirdPartyPlatformSubscriptionOwnershipByGroupIdPlatform("PLAYSTATION");

        public static readonly GetThirdPartyPlatformSubscriptionOwnershipByGroupIdPlatform STADIA
            = new GetThirdPartyPlatformSubscriptionOwnershipByGroupIdPlatform("STADIA");

        public static readonly GetThirdPartyPlatformSubscriptionOwnershipByGroupIdPlatform STEAM
            = new GetThirdPartyPlatformSubscriptionOwnershipByGroupIdPlatform("STEAM");

        public static readonly GetThirdPartyPlatformSubscriptionOwnershipByGroupIdPlatform TWITCH
            = new GetThirdPartyPlatformSubscriptionOwnershipByGroupIdPlatform("TWITCH");

        public static readonly GetThirdPartyPlatformSubscriptionOwnershipByGroupIdPlatform XBOX
            = new GetThirdPartyPlatformSubscriptionOwnershipByGroupIdPlatform("XBOX");


        public static implicit operator GetThirdPartyPlatformSubscriptionOwnershipByGroupIdPlatform(string value)
        {
            return NewValue(value);
        }

        public GetThirdPartyPlatformSubscriptionOwnershipByGroupIdPlatform(string enumValue)
            : base(enumValue)
        {

        }
    }

}