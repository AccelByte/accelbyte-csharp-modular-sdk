// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Platform.Model;

namespace AccelByte.Sdk.Api.Platform.Operation
{
    /// <summary>
    /// getThirdPartyPlatformSubscriptionOwnershipByProductId
    ///
    /// Get user third party subscription by subscription product id.
    /// </summary>
    public class GetThirdPartyPlatformSubscriptionOwnershipByProductId : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static GetThirdPartyPlatformSubscriptionOwnershipByProductIdBuilder Builder { get => new GetThirdPartyPlatformSubscriptionOwnershipByProductIdBuilder(); }

        public class GetThirdPartyPlatformSubscriptionOwnershipByProductIdBuilder
            : OperationBuilder<GetThirdPartyPlatformSubscriptionOwnershipByProductIdBuilder>
        {





            internal GetThirdPartyPlatformSubscriptionOwnershipByProductIdBuilder() { }

            internal GetThirdPartyPlatformSubscriptionOwnershipByProductIdBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }






            public GetThirdPartyPlatformSubscriptionOwnershipByProductId Build(
                string namespace_,
                GetThirdPartyPlatformSubscriptionOwnershipByProductIdPlatform platform,
                string userId,
                string productId
            )
            {
                GetThirdPartyPlatformSubscriptionOwnershipByProductId op = new GetThirdPartyPlatformSubscriptionOwnershipByProductId(this,
                    namespace_,                    
                    platform,                    
                    userId,                    
                    productId                    
                );

                op.SetBaseFields<GetThirdPartyPlatformSubscriptionOwnershipByProductIdBuilder>(this);
                return op;
            }

            public GetThirdPartyPlatformSubscriptionOwnershipByProductId.Response Execute(
                string namespace_,
                string platform,
                string userId,
                string productId
            )
            {
                GetThirdPartyPlatformSubscriptionOwnershipByProductId op = Build(
                    namespace_,
                    platform,
                    userId,
                    productId
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
            public async Task<GetThirdPartyPlatformSubscriptionOwnershipByProductId.Response> ExecuteAsync(
                string namespace_,
                string platform,
                string userId,
                string productId
            )
            {
                GetThirdPartyPlatformSubscriptionOwnershipByProductId op = Build(
                    namespace_,
                    platform,
                    userId,
                    productId
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
        }

        private GetThirdPartyPlatformSubscriptionOwnershipByProductId(GetThirdPartyPlatformSubscriptionOwnershipByProductIdBuilder builder,
            string namespace_,
            GetThirdPartyPlatformSubscriptionOwnershipByProductIdPlatform platform,
            string userId,
            string productId
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["platform"] = platform.Value;
            PathParams["userId"] = userId;
            
            if (productId is not null) QueryParams["productId"] = productId;
            

            
            
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        #region Response Part        
        public class Response : ApiResponse<Model.ThirdPartySubscriptionOwnership>
        {


            protected override string GetFullOperationId() => "Platform::IAPSubscription::GetThirdPartyPlatformSubscriptionOwnershipByProductId";
        }

        #endregion

        public GetThirdPartyPlatformSubscriptionOwnershipByProductId(
            string namespace_,            
            GetThirdPartyPlatformSubscriptionOwnershipByProductIdPlatform platform,            
            string userId,            
            string productId            
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["platform"] = platform.Value;
            PathParams["userId"] = userId;
            
            if (productId is not null) QueryParams["productId"] = productId;
            

            
            
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/platform/admin/namespaces/{namespace}/users/{userId}/iap/subscriptions/platforms/{platform}/ownership/byProductId";

        public override HttpMethod Method => HttpMethod.Get;

        public override List<string> Consumes => new() {  };

        public override List<string> Produces => new() { "application/json" };
        
        public GetThirdPartyPlatformSubscriptionOwnershipByProductId.Response ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            var response = new GetThirdPartyPlatformSubscriptionOwnershipByProductId.Response()
            {
                StatusCode = code,
                ContentType = contentType
            };

            if (code == (HttpStatusCode)204)
            {
                response.IsSuccess = true;
            }
            else if ((code == (HttpStatusCode)201) || (code == (HttpStatusCode)202) || (code == (HttpStatusCode)200))
            {
                response.Data = JsonSerializer.Deserialize<Model.ThirdPartySubscriptionOwnership>(payload, ResponseJsonOptions);
                response.IsSuccess = true;
            }

            return response;
        }
    }

    public class GetThirdPartyPlatformSubscriptionOwnershipByProductIdPlatform : StringEnum<GetThirdPartyPlatformSubscriptionOwnershipByProductIdPlatform>
    {
        public static readonly GetThirdPartyPlatformSubscriptionOwnershipByProductIdPlatform APPLE
            = new GetThirdPartyPlatformSubscriptionOwnershipByProductIdPlatform("APPLE");

        public static readonly GetThirdPartyPlatformSubscriptionOwnershipByProductIdPlatform EPICGAMES
            = new GetThirdPartyPlatformSubscriptionOwnershipByProductIdPlatform("EPICGAMES");

        public static readonly GetThirdPartyPlatformSubscriptionOwnershipByProductIdPlatform GOOGLE
            = new GetThirdPartyPlatformSubscriptionOwnershipByProductIdPlatform("GOOGLE");

        public static readonly GetThirdPartyPlatformSubscriptionOwnershipByProductIdPlatform OCULUS
            = new GetThirdPartyPlatformSubscriptionOwnershipByProductIdPlatform("OCULUS");

        public static readonly GetThirdPartyPlatformSubscriptionOwnershipByProductIdPlatform PLAYSTATION
            = new GetThirdPartyPlatformSubscriptionOwnershipByProductIdPlatform("PLAYSTATION");

        public static readonly GetThirdPartyPlatformSubscriptionOwnershipByProductIdPlatform STADIA
            = new GetThirdPartyPlatformSubscriptionOwnershipByProductIdPlatform("STADIA");

        public static readonly GetThirdPartyPlatformSubscriptionOwnershipByProductIdPlatform STEAM
            = new GetThirdPartyPlatformSubscriptionOwnershipByProductIdPlatform("STEAM");

        public static readonly GetThirdPartyPlatformSubscriptionOwnershipByProductIdPlatform TWITCH
            = new GetThirdPartyPlatformSubscriptionOwnershipByProductIdPlatform("TWITCH");

        public static readonly GetThirdPartyPlatformSubscriptionOwnershipByProductIdPlatform XBOX
            = new GetThirdPartyPlatformSubscriptionOwnershipByProductIdPlatform("XBOX");


        public static implicit operator GetThirdPartyPlatformSubscriptionOwnershipByProductIdPlatform(string value)
        {
            return NewValue(value);
        }

        public GetThirdPartyPlatformSubscriptionOwnershipByProductIdPlatform(string enumValue)
            : base(enumValue)
        {

        }
    }

}