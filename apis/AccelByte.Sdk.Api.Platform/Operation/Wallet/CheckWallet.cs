// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Platform.Model;

namespace AccelByte.Sdk.Api.Platform.Operation
{
    /// <summary>
    /// checkWallet
    ///
    ///  [SERVICE COMMUNICATION ONLY] Check wallet by balance origin and currency code whether it's inactive.
    /// </summary>
    [Obsolete(DiagnosticId ="ab_deprecated_operation")]
    public class CheckWallet : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static CheckWalletBuilder Builder { get => new CheckWalletBuilder(); }

        public class CheckWalletBuilder
            : OperationBuilder<CheckWalletBuilder>
        {





            internal CheckWalletBuilder() { }

            internal CheckWalletBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }






            public CheckWallet Build(
                string currencyCode,
                string namespace_,
                string userId,
                CheckWalletOrigin origin
            )
            {
                CheckWallet op = new CheckWallet(this,
                    currencyCode,                    
                    namespace_,                    
                    userId,                    
                    origin                    
                );

                op.SetBaseFields<CheckWalletBuilder>(this);
                return op;
            }

            [Obsolete(DiagnosticId ="ab_deprecated_operation_wrapper")]
            public void Execute(
                string currencyCode,
                string namespace_,
                string userId,
                string origin
            )
            {
                CheckWallet op = Build(
                    currencyCode,
                    namespace_,
                    userId,
                    origin
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
            public async Task ExecuteAsync(
                string currencyCode,
                string namespace_,
                string userId,
                string origin
            )
            {
                CheckWallet op = Build(
                    currencyCode,
                    namespace_,
                    userId,
                    origin
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
        }

        private CheckWallet(CheckWalletBuilder builder,
            string currencyCode,
            string namespace_,
            string userId,
            CheckWalletOrigin origin
        )
        {
            PathParams["currencyCode"] = currencyCode;
            PathParams["namespace"] = namespace_;
            PathParams["userId"] = userId;
            
            if (origin is not null) QueryParams["origin"] = origin.Value;
            

            
            
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public CheckWallet(
            string currencyCode,            
            string namespace_,            
            string userId,            
            CheckWalletOrigin origin            
        )
        {
            PathParams["currencyCode"] = currencyCode;
            PathParams["namespace"] = namespace_;
            PathParams["userId"] = userId;
            
            if (origin is not null) QueryParams["origin"] = origin.Value;
            

            
            
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/platform/admin/namespaces/{namespace}/users/{userId}/wallets/{currencyCode}/check";

        public override HttpMethod Method => HttpMethod.Get;

        public override List<string> Consumes => new() { "application/json" };

        public override List<string> Produces => new() { "application/json" };        
        
        public void ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return;
            }
            
            var payloadString = payload.ReadToString();
            
            throw new HttpResponseException(code, payloadString);
        }
    }

    public class CheckWalletOrigin : StringEnum<CheckWalletOrigin>
    {
        public static readonly CheckWalletOrigin Epic
            = new CheckWalletOrigin("Epic");

        public static readonly CheckWalletOrigin GooglePlay
            = new CheckWalletOrigin("GooglePlay");

        public static readonly CheckWalletOrigin IOS
            = new CheckWalletOrigin("IOS");

        public static readonly CheckWalletOrigin Nintendo
            = new CheckWalletOrigin("Nintendo");

        public static readonly CheckWalletOrigin Oculus
            = new CheckWalletOrigin("Oculus");

        public static readonly CheckWalletOrigin Other
            = new CheckWalletOrigin("Other");

        public static readonly CheckWalletOrigin Playstation
            = new CheckWalletOrigin("Playstation");

        public static readonly CheckWalletOrigin Steam
            = new CheckWalletOrigin("Steam");

        public static readonly CheckWalletOrigin System
            = new CheckWalletOrigin("System");

        public static readonly CheckWalletOrigin Twitch
            = new CheckWalletOrigin("Twitch");

        public static readonly CheckWalletOrigin Xbox
            = new CheckWalletOrigin("Xbox");


        public static implicit operator CheckWalletOrigin(string value)
        {
            return NewValue(value);
        }

        public CheckWalletOrigin(string enumValue)
            : base(enumValue)
        {

        }
    }

}