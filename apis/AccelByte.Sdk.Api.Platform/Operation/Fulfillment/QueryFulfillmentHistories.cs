// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Platform.Model;

namespace AccelByte.Sdk.Api.Platform.Operation
{
    /// <summary>
    /// queryFulfillmentHistories
    ///
    /// Query fulfillment histories in a namespace.
    /// Other detail info:
    /// 
    ///   * Returns : query fulfillment history
    /// </summary>
    public class QueryFulfillmentHistories : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static QueryFulfillmentHistoriesBuilder Builder { get => new QueryFulfillmentHistoriesBuilder(); }

        public class QueryFulfillmentHistoriesBuilder
            : OperationBuilder<QueryFulfillmentHistoriesBuilder>
        {

            public int? Limit { get; set; }

            public int? Offset { get; set; }

            public QueryFulfillmentHistoriesStatus? Status { get; set; }

            public string? UserId { get; set; }





            internal QueryFulfillmentHistoriesBuilder() { }

            internal QueryFulfillmentHistoriesBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }


            public QueryFulfillmentHistoriesBuilder SetLimit(int _limit)
            {
                Limit = _limit;
                return this;
            }

            public QueryFulfillmentHistoriesBuilder SetOffset(int _offset)
            {
                Offset = _offset;
                return this;
            }

            public QueryFulfillmentHistoriesBuilder SetStatus(QueryFulfillmentHistoriesStatus _status)
            {
                Status = _status;
                return this;
            }

            public QueryFulfillmentHistoriesBuilder SetUserId(string _userId)
            {
                UserId = _userId;
                return this;
            }





            public QueryFulfillmentHistories Build(
                string namespace_
            )
            {
                QueryFulfillmentHistories op = new QueryFulfillmentHistories(this,
                    namespace_
                );

                op.SetBaseFields<QueryFulfillmentHistoriesBuilder>(this);
                return op;
            }

            public QueryFulfillmentHistories.Response Execute(
                string namespace_
            )
            {
                QueryFulfillmentHistories op = Build(
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
            public async Task<QueryFulfillmentHistories.Response> ExecuteAsync(
                string namespace_
            )
            {
                QueryFulfillmentHistories op = Build(
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
        }

        private QueryFulfillmentHistories(QueryFulfillmentHistoriesBuilder builder,
            string namespace_
        )
        {
            PathParams["namespace"] = namespace_;

            if (builder.Limit != null) QueryParams["limit"] = Convert.ToString(builder.Limit)!;
            if (builder.Offset != null) QueryParams["offset"] = Convert.ToString(builder.Offset)!;
            if (builder.Status is not null) QueryParams["status"] = builder.Status.Value;
            if (builder.UserId is not null) QueryParams["userId"] = builder.UserId;






            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        #region Response Part        
        public class Response : ApiResponse<Model.FulfillmentHistoryPagingSlicedResult>
        {


            protected override string GetFullOperationId() => "Platform::Fulfillment::QueryFulfillmentHistories";
        }

        #endregion

        public QueryFulfillmentHistories(
            string namespace_,
            int? limit,
            int? offset,
            QueryFulfillmentHistoriesStatus? status,
            string? userId
        )
        {
            PathParams["namespace"] = namespace_;

            if (limit != null) QueryParams["limit"] = Convert.ToString(limit)!;
            if (offset != null) QueryParams["offset"] = Convert.ToString(offset)!;
            if (status is not null) QueryParams["status"] = status.Value;
            if (userId is not null) QueryParams["userId"] = userId;






            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/platform/admin/namespaces/{namespace}/fulfillment/history";

        public override HttpMethod Method => HttpMethod.Get;

        public override List<string> Consumes => new() { };

        public override List<string> Produces => new() { "application/json" };

        public QueryFulfillmentHistories.Response ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            var response = new QueryFulfillmentHistories.Response()
            {
                StatusCode = code,
                ContentType = contentType
            };

            if (code == (HttpStatusCode)204)
            {
                response.IsSuccess = true;
            }
            else if ((code == (HttpStatusCode)201) || (code == (HttpStatusCode)202) || (code == (HttpStatusCode)200))
            {
                response.Data = JsonSerializer.Deserialize<Model.FulfillmentHistoryPagingSlicedResult>(payload, ResponseJsonOptions);
                response.IsSuccess = true;
            }

            return response;
        }
    }

    public class QueryFulfillmentHistoriesStatus : StringEnum<QueryFulfillmentHistoriesStatus>
    {
        public static readonly QueryFulfillmentHistoriesStatus FAIL
            = new QueryFulfillmentHistoriesStatus("FAIL");

        public static readonly QueryFulfillmentHistoriesStatus SUCCESS
            = new QueryFulfillmentHistoriesStatus("SUCCESS");


        public static implicit operator QueryFulfillmentHistoriesStatus(string value)
        {
            return NewValue(value);
        }

        public QueryFulfillmentHistoriesStatus(string enumValue)
            : base(enumValue)
        {

        }
    }

}