// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Platform.Model;

namespace AccelByte.Sdk.Api.Platform.Operation
{
    /// <summary>
    /// queryFulfillments
    ///
    ///  [Not supported yet in AGS Shared Cloud] Query fulfillments in a namespace.
    /// Other detail info:
    /// 
    ///   * Returns : list of fulfillment info:
    ///     * storeId in items can be ignored
    ///     * error in successList will always be null
    /// </summary>
    public class QueryFulfillments : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static QueryFulfillmentsBuilder Builder { get => new QueryFulfillmentsBuilder(); }

        public class QueryFulfillmentsBuilder
            : OperationBuilder<QueryFulfillmentsBuilder>
        {

            public string? EndTime { get; set; }

            public int? Limit { get; set; }

            public int? Offset { get; set; }

            public string? StartTime { get; set; }

            public QueryFulfillmentsState? State { get; set; }

            public string? TransactionId { get; set; }

            public string? UserId { get; set; }





            internal QueryFulfillmentsBuilder() { }

            internal QueryFulfillmentsBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }


            public QueryFulfillmentsBuilder SetEndTime(string _endTime)
            {
                EndTime = _endTime;
                return this;
            }

            public QueryFulfillmentsBuilder SetLimit(int _limit)
            {
                Limit = _limit;
                return this;
            }

            public QueryFulfillmentsBuilder SetOffset(int _offset)
            {
                Offset = _offset;
                return this;
            }

            public QueryFulfillmentsBuilder SetStartTime(string _startTime)
            {
                StartTime = _startTime;
                return this;
            }

            public QueryFulfillmentsBuilder SetState(QueryFulfillmentsState _state)
            {
                State = _state;
                return this;
            }

            public QueryFulfillmentsBuilder SetTransactionId(string _transactionId)
            {
                TransactionId = _transactionId;
                return this;
            }

            public QueryFulfillmentsBuilder SetUserId(string _userId)
            {
                UserId = _userId;
                return this;
            }





            public QueryFulfillments Build(
                string namespace_
            )
            {
                QueryFulfillments op = new QueryFulfillments(this,
                    namespace_                    
                );

                op.SetBaseFields<QueryFulfillmentsBuilder>(this);
                return op;
            }

            public QueryFulfillments.Response Execute(
                string namespace_
            )
            {
                QueryFulfillments op = Build(
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
            public async Task<QueryFulfillments.Response> ExecuteAsync(
                string namespace_
            )
            {
                QueryFulfillments op = Build(
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
        }

        private QueryFulfillments(QueryFulfillmentsBuilder builder,
            string namespace_
        )
        {
            PathParams["namespace"] = namespace_;
            
            if (builder.EndTime is not null) QueryParams["endTime"] = builder.EndTime;
            if (builder.Limit != null) QueryParams["limit"] = Convert.ToString(builder.Limit)!;
            if (builder.Offset != null) QueryParams["offset"] = Convert.ToString(builder.Offset)!;
            if (builder.StartTime is not null) QueryParams["startTime"] = builder.StartTime;
            if (builder.State is not null) QueryParams["state"] = builder.State.Value;
            if (builder.TransactionId is not null) QueryParams["transactionId"] = builder.TransactionId;
            if (builder.UserId is not null) QueryParams["userId"] = builder.UserId;
            

            
            
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        #region Response Part        
        public class Response : ApiResponse<Model.FulfillmentPagingSlicedResult>
        {


            protected override string GetFullOperationId() => "Platform::Fulfillment::QueryFulfillments";
        }

        #endregion

        public QueryFulfillments(
            string namespace_,            
            string? endTime,            
            int? limit,            
            int? offset,            
            string? startTime,            
            QueryFulfillmentsState? state,            
            string? transactionId,            
            string? userId            
        )
        {
            PathParams["namespace"] = namespace_;
            
            if (endTime is not null) QueryParams["endTime"] = endTime;
            if (limit != null) QueryParams["limit"] = Convert.ToString(limit)!;
            if (offset != null) QueryParams["offset"] = Convert.ToString(offset)!;
            if (startTime is not null) QueryParams["startTime"] = startTime;
            if (state is not null) QueryParams["state"] = state.Value;
            if (transactionId is not null) QueryParams["transactionId"] = transactionId;
            if (userId is not null) QueryParams["userId"] = userId;
            

            
            
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/platform/v2/admin/namespaces/{namespace}/fulfillments";

        public override HttpMethod Method => HttpMethod.Get;

        public override List<string> Consumes => new() {  };

        public override List<string> Produces => new() { "application/json" };
        
        public QueryFulfillments.Response ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            var response = new QueryFulfillments.Response()
            {
                StatusCode = code,
                ContentType = contentType
            };

            if (code == (HttpStatusCode)204)
            {
                response.IsSuccess = true;
            }
            else if ((code == (HttpStatusCode)201) || (code == (HttpStatusCode)202) || (code == (HttpStatusCode)200))
            {
                response.Data = JsonSerializer.Deserialize<Model.FulfillmentPagingSlicedResult>(payload, ResponseJsonOptions);
                response.IsSuccess = true;
            }

            return response;
        }
    }

    public class QueryFulfillmentsState : StringEnum<QueryFulfillmentsState>
    {
        public static readonly QueryFulfillmentsState FULFILLED
            = new QueryFulfillmentsState("FULFILLED");

        public static readonly QueryFulfillmentsState FULFILLFAILED
            = new QueryFulfillmentsState("FULFILL_FAILED");

        public static readonly QueryFulfillmentsState REVOKED
            = new QueryFulfillmentsState("REVOKED");

        public static readonly QueryFulfillmentsState REVOKEFAILED
            = new QueryFulfillmentsState("REVOKE_FAILED");


        public static implicit operator QueryFulfillmentsState(string value)
        {
            return NewValue(value);
        }

        public QueryFulfillmentsState(string enumValue)
            : base(enumValue)
        {

        }
    }

}