// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Platform.Model;

namespace AccelByte.Sdk.Api.Platform.Operation
{
    /// <summary>
    /// getIAPItemMapping
    ///
    /// Get iap item mapping.
    /// Other detail info:
    /// </summary>
    public class GetIAPItemMapping : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static GetIAPItemMappingBuilder Builder { get => new GetIAPItemMappingBuilder(); }

        public class GetIAPItemMappingBuilder
            : OperationBuilder<GetIAPItemMappingBuilder>
        {

            public GetIAPItemMappingPlatform? Platform { get; set; }





            internal GetIAPItemMappingBuilder() { }

            internal GetIAPItemMappingBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }


            public GetIAPItemMappingBuilder SetPlatform(GetIAPItemMappingPlatform _platform)
            {
                Platform = _platform;
                return this;
            }





            public GetIAPItemMapping Build(
                string namespace_
            )
            {
                GetIAPItemMapping op = new GetIAPItemMapping(this,
                    namespace_
                );

                op.SetBaseFields<GetIAPItemMappingBuilder>(this);
                return op;
            }

            public Model.IAPItemMappingInfo? Execute(
                string namespace_
            )
            {
                GetIAPItemMapping op = Build(
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
            public async Task<Model.IAPItemMappingInfo?> ExecuteAsync(
                string namespace_
            )
            {
                GetIAPItemMapping op = Build(
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
        }

        private GetIAPItemMapping(GetIAPItemMappingBuilder builder,
            string namespace_
        )
        {
            PathParams["namespace"] = namespace_;

            if (builder.Platform is not null) QueryParams["platform"] = builder.Platform.Value;






            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public GetIAPItemMapping(
            string namespace_,
            GetIAPItemMappingPlatform? platform
        )
        {
            PathParams["namespace"] = namespace_;

            if (platform is not null) QueryParams["platform"] = platform.Value;






            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/platform/public/namespaces/{namespace}/iap/item/mapping";

        public override HttpMethod Method => HttpMethod.Get;

        public override List<string> Consumes => new() { };

        public override List<string> Produces => new() { };

        public Model.IAPItemMappingInfo? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                return JsonSerializer.Deserialize<Model.IAPItemMappingInfo>(payload, ResponseJsonOptions);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.IAPItemMappingInfo>(payload, ResponseJsonOptions);
            }

            var payloadString = payload.ReadToString();

            throw new HttpResponseException(code, payloadString);
        }
    }

    public class GetIAPItemMappingPlatform : StringEnum<GetIAPItemMappingPlatform>
    {
        public static readonly GetIAPItemMappingPlatform APPLE
            = new GetIAPItemMappingPlatform("APPLE");

        public static readonly GetIAPItemMappingPlatform EPICGAMES
            = new GetIAPItemMappingPlatform("EPICGAMES");

        public static readonly GetIAPItemMappingPlatform GOOGLE
            = new GetIAPItemMappingPlatform("GOOGLE");

        public static readonly GetIAPItemMappingPlatform OCULUS
            = new GetIAPItemMappingPlatform("OCULUS");

        public static readonly GetIAPItemMappingPlatform PLAYSTATION
            = new GetIAPItemMappingPlatform("PLAYSTATION");

        public static readonly GetIAPItemMappingPlatform STADIA
            = new GetIAPItemMappingPlatform("STADIA");

        public static readonly GetIAPItemMappingPlatform STEAM
            = new GetIAPItemMappingPlatform("STEAM");

        public static readonly GetIAPItemMappingPlatform TWITCH
            = new GetIAPItemMappingPlatform("TWITCH");

        public static readonly GetIAPItemMappingPlatform XBOX
            = new GetIAPItemMappingPlatform("XBOX");


        public static implicit operator GetIAPItemMappingPlatform(string value)
        {
            return NewValue(value);
        }

        public GetIAPItemMappingPlatform(string enumValue)
            : base(enumValue)
        {

        }
    }

}