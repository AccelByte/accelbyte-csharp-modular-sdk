// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Platform.Model;

namespace AccelByte.Sdk.Api.Platform.Operation
{
    /// <summary>
    /// updateGoogleP12File
    ///
    /// Upload google play p12 file.
    /// Other detail info:
    /// 
    ///   * Returns : updated google iap config
    /// </summary>
    public class UpdateGoogleP12File : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static UpdateGoogleP12FileBuilder Builder { get => new UpdateGoogleP12FileBuilder(); }

        public class UpdateGoogleP12FileBuilder
            : OperationBuilder<UpdateGoogleP12FileBuilder>
        {



            public Stream? File { get; set; }



            internal UpdateGoogleP12FileBuilder() { }

            internal UpdateGoogleP12FileBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }




            public UpdateGoogleP12FileBuilder SetFile(Stream _file)
            {
                File = _file;
                return this;
            }



            public UpdateGoogleP12File Build(
                string namespace_
            )
            {
                UpdateGoogleP12File op = new UpdateGoogleP12File(this,
                    namespace_                    
                );

                op.SetBaseFields<UpdateGoogleP12FileBuilder>(this);
                return op;
            }

            public Model.GoogleIAPConfigInfo? Execute(
                string namespace_
            )
            {
                UpdateGoogleP12File op = Build(
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
            public async Task<Model.GoogleIAPConfigInfo?> ExecuteAsync(
                string namespace_
            )
            {
                UpdateGoogleP12File op = Build(
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
        }

        private UpdateGoogleP12File(UpdateGoogleP12FileBuilder builder,
            string namespace_
        )
        {
            PathParams["namespace"] = namespace_;
            
            
            if (builder.File is not null) FormParams["file"] = builder.File;

            
            
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public UpdateGoogleP12File(
            string namespace_,            
            Stream? file            
        )
        {
            PathParams["namespace"] = namespace_;
            
            
            if (file is not null) FormParams["file"] = file;

            
            
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/platform/admin/namespaces/{namespace}/iap/config/google/cert";

        public override HttpMethod Method => HttpMethod.Put;

        public override List<string> Consumes => new() { "multipart/form-data" };

        public override List<string> Produces => new() { "application/json" };        
        
        public Model.GoogleIAPConfigInfo? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {            
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                return JsonSerializer.Deserialize<Model.GoogleIAPConfigInfo>(payload, ResponseJsonOptions);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.GoogleIAPConfigInfo>(payload, ResponseJsonOptions);
            }
            
            var payloadString = payload.ReadToString();
            
            throw new HttpResponseException(code, payloadString);
        }
    }

}