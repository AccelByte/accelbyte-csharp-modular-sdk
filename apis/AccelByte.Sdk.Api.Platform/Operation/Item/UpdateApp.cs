// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Platform.Model;

namespace AccelByte.Sdk.Api.Platform.Operation
{
    /// <summary>
    /// updateApp
    ///
    /// This API is used to update an app.
    /// 
    /// An app update example:
    /// 
    /// 
    ///     {
    /// 
    ///       "developer": "accelbyte",
    /// 
    ///       "publisher": "accelbyte",
    /// 
    ///       "websiteUrl": "http://accelbyte.io",
    /// 
    ///       "forumUrl": "http://accelbyte.io",
    /// 
    ///       "platforms": ["Windows(allowed values: Windows, MacOS, Linux, IOS, Android)"],
    /// 
    ///       "platformRequirements": {
    /// 
    ///         "Windows": [
    /// 
    ///           {
    /// 
    ///             "label":"minimum(can be minimum or recommended)",
    /// 
    ///             "osVersion":"os version",
    /// 
    ///             "processor":"processor",
    /// 
    ///             "ram":"RAM",
    /// 
    ///             "graphics":"graphics",
    /// 
    ///             "directXVersion":"directXVersion",
    /// 
    ///             "diskSpace":"diskSpace",
    /// 
    ///             "soundCard":"soundCard",
    /// 
    ///             "additionals":"additionals"
    /// 
    ///           }
    /// 
    ///          ]
    /// 
    ///       },
    /// 
    ///       "carousel": [
    /// 
    ///         {
    /// 
    ///           "type":"image(allowed values: image, video)",
    /// 
    ///           "videoSource":"generic(allowed values:generic, youtube, viemo)",
    /// 
    ///           "url":"url",
    /// 
    ///           "alt":"alternative url or text",
    /// 
    ///           "thumbnailUrl":"thumbnail url",
    /// 
    ///           "previewUrl":"preview url",
    /// 
    ///         }
    /// 
    ///       ],
    /// 
    ///       "localizations": {
    /// 
    ///         "en": {
    /// 
    ///           "slogan":"slogan",
    /// 
    ///           "announcement":"announcement",
    /// 
    ///         }
    /// 
    ///       },
    /// 
    ///       "primaryGenre": "Action",
    /// 
    ///       "genres": ["Action", "Adventure"],
    /// 
    ///       "players": ["Single"],
    /// 
    ///       "releaseDate": "optional yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"
    /// 
    ///     }
    /// 
    /// Other detail info:
    /// 
    ///   * Returns : updated app data
    /// </summary>
    public class UpdateApp : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static UpdateAppBuilder Builder { get => new UpdateAppBuilder(); }

        public class UpdateAppBuilder
            : OperationBuilder<UpdateAppBuilder>
        {





            internal UpdateAppBuilder() { }

            internal UpdateAppBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }






            public UpdateApp Build(
                AppUpdate body,
                string itemId,
                string namespace_,
                string storeId
            )
            {
                UpdateApp op = new UpdateApp(this,
                    body,
                    itemId,
                    namespace_,
                    storeId
                );

                op.SetBaseFields<UpdateAppBuilder>(this);
                return op;
            }

            public UpdateApp.Response Execute(
                AppUpdate body,
                string itemId,
                string namespace_,
                string storeId
            )
            {
                UpdateApp op = Build(
                    body,
                    itemId,
                    namespace_,
                    storeId
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
            public async Task<UpdateApp.Response> ExecuteAsync(
                AppUpdate body,
                string itemId,
                string namespace_,
                string storeId
            )
            {
                UpdateApp op = Build(
                    body,
                    itemId,
                    namespace_,
                    storeId
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
        }

        private UpdateApp(UpdateAppBuilder builder,
            AppUpdate body,
            string itemId,
            string namespace_,
            string storeId
        )
        {
            PathParams["itemId"] = itemId;
            PathParams["namespace"] = namespace_;

            if (storeId is not null) QueryParams["storeId"] = storeId;




            BodyParams = body;


            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        #region Response Part        
        public class Response : ApiResponse<Model.FullAppInfo>
        {

            public ErrorEntity? Error404 { get; set; } = null;

            public ErrorEntity? Error409 { get; set; } = null;

            public ValidationErrorEntity? Error422 { get; set; } = null;


            protected override string GetFullOperationId() => "Platform::Item::UpdateApp";
        }

        #endregion

        public UpdateApp(
            string itemId,
            string namespace_,
            string storeId,
            Model.AppUpdate body
        )
        {
            PathParams["itemId"] = itemId;
            PathParams["namespace"] = namespace_;

            if (storeId is not null) QueryParams["storeId"] = storeId;




            BodyParams = body;


            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/platform/admin/namespaces/{namespace}/items/{itemId}/app";

        public override HttpMethod Method => HttpMethod.Put;

        public override List<string> Consumes => new() { "application/json" };

        public override List<string> Produces => new() { "application/json" };

        public UpdateApp.Response ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            var response = new UpdateApp.Response()
            {
                StatusCode = code,
                ContentType = contentType
            };

            if (code == (HttpStatusCode)204)
            {
                response.IsSuccess = true;
            }
            else if ((code == (HttpStatusCode)201) || (code == (HttpStatusCode)202) || (code == (HttpStatusCode)200))
            {
                response.Data = JsonSerializer.Deserialize<Model.FullAppInfo>(payload, ResponseJsonOptions);
                response.IsSuccess = true;
            }
            else if (code == (HttpStatusCode)404)
            {
                response.Error404 = JsonSerializer.Deserialize<ErrorEntity>(payload, ResponseJsonOptions);
                response.Error = response.Error404!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)409)
            {
                response.Error409 = JsonSerializer.Deserialize<ErrorEntity>(payload, ResponseJsonOptions);
                response.Error = response.Error409!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)422)
            {
                response.Error422 = JsonSerializer.Deserialize<ValidationErrorEntity>(payload, ResponseJsonOptions);
                response.Error = response.Error422!.TranslateToApiError();
            }

            return response;
        }
    }

}