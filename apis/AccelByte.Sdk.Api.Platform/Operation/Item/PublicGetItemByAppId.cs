// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Platform.Model;

namespace AccelByte.Sdk.Api.Platform.Operation
{
    /// <summary>
    /// publicGetItemByAppId
    ///
    /// This API is used to get item by appId.
    /// 
    /// Other detail info:
    /// 
    ///   * Optional permission : resource="PREVIEW", action=1(CREATE) (user with this permission can view draft store item)
    ///   *  Optional permission : resource="SANDBOX", action=1(CREATE) (user with this permission can view draft store item)
    ///   *  Returns : the item with that appId
    /// </summary>
    public class PublicGetItemByAppId : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static PublicGetItemByAppIdBuilder Builder { get => new PublicGetItemByAppIdBuilder(); }

        public class PublicGetItemByAppIdBuilder
            : OperationBuilder<PublicGetItemByAppIdBuilder>
        {

            public string? Language { get; set; }

            public string? Region { get; set; }

            public string? StoreId { get; set; }





            internal PublicGetItemByAppIdBuilder() { }

            internal PublicGetItemByAppIdBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }


            public PublicGetItemByAppIdBuilder SetLanguage(string _language)
            {
                Language = _language;
                return this;
            }

            public PublicGetItemByAppIdBuilder SetRegion(string _region)
            {
                Region = _region;
                return this;
            }

            public PublicGetItemByAppIdBuilder SetStoreId(string _storeId)
            {
                StoreId = _storeId;
                return this;
            }





            public PublicGetItemByAppId Build(
                string namespace_,
                string appId
            )
            {
                PublicGetItemByAppId op = new PublicGetItemByAppId(this,
                    namespace_,                    
                    appId                    
                );

                op.SetBaseFields<PublicGetItemByAppIdBuilder>(this);
                return op;
            }

            public PublicGetItemByAppId.Response Execute(
                string namespace_,
                string appId
            )
            {
                PublicGetItemByAppId op = Build(
                    namespace_,
                    appId
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
            public async Task<PublicGetItemByAppId.Response> ExecuteAsync(
                string namespace_,
                string appId
            )
            {
                PublicGetItemByAppId op = Build(
                    namespace_,
                    appId
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }

            public PublicGetItemByAppId.Response<T1, T2> Execute<T1, T2>(
                string namespace_,
                string appId
            )
            {
                PublicGetItemByAppId op = Build(
                    namespace_,
                    appId
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse<T1, T2>(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
            public async Task<PublicGetItemByAppId.Response<T1, T2>> ExecuteAsync<T1, T2>(
                string namespace_,
                string appId
            )
            {
                PublicGetItemByAppId op = Build(
                    namespace_,
                    appId
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse<T1, T2>(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
        }

        private PublicGetItemByAppId(PublicGetItemByAppIdBuilder builder,
            string namespace_,
            string appId
        )
        {
            PathParams["namespace"] = namespace_;
            
            if (builder.Language is not null) QueryParams["language"] = builder.Language;
            if (builder.Region is not null) QueryParams["region"] = builder.Region;
            if (builder.StoreId is not null) QueryParams["storeId"] = builder.StoreId;
            if (appId is not null) QueryParams["appId"] = appId;
            

            
            
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        #region Response Part        
        public class Response : ApiResponse<Model.ItemInfo>
        {

            public ErrorEntity? Error404 { get; set; } = null;


            protected override string GetFullOperationId() => "Platform::Item::PublicGetItemByAppId";
        }

        public class Response<T1, T2> : ApiResponse<Model.ItemInfo<T1, T2>>
        {
            public ErrorEntity? Error404 { get; set; } = null;


            protected override string GetFullOperationId() => "Platform::Item::PublicGetItemByAppId";
        }
        #endregion

        public PublicGetItemByAppId(
            string namespace_,            
            string? language,            
            string? region,            
            string? storeId,            
            string appId            
        )
        {
            PathParams["namespace"] = namespace_;
            
            if (language is not null) QueryParams["language"] = language;
            if (region is not null) QueryParams["region"] = region;
            if (storeId is not null) QueryParams["storeId"] = storeId;
            if (appId is not null) QueryParams["appId"] = appId;
            

            
            
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/platform/public/namespaces/{namespace}/items/byAppId";

        public override HttpMethod Method => HttpMethod.Get;

        public override List<string> Consumes => new() {  };

        public override List<string> Produces => new() { "application/json" };
        
        public PublicGetItemByAppId.Response ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            var response = new PublicGetItemByAppId.Response()
            {
                StatusCode = code,
                ContentType = contentType
            };

            if (code == (HttpStatusCode)204)
            {
                response.IsSuccess = true;
            }
            else if ((code == (HttpStatusCode)201) || (code == (HttpStatusCode)202) || (code == (HttpStatusCode)200))
            {
                response.Data = JsonSerializer.Deserialize<Model.ItemInfo>(payload, ResponseJsonOptions);
                response.IsSuccess = true;
            }
            else if (code == (HttpStatusCode)404)
            {
                response.Error404 = JsonSerializer.Deserialize<ErrorEntity>(payload, ResponseJsonOptions);
                response.Error = response.Error404!.TranslateToApiError();
            }

            return response;
        }

        public PublicGetItemByAppId.Response<T1, T2> ParseResponse<T1, T2>(HttpStatusCode code, string contentType, Stream payload)
        {
            var response = new PublicGetItemByAppId.Response<T1, T2>()
            {
                StatusCode = code,
                ContentType = contentType
            };

            if (code == (HttpStatusCode)204)
            {
                response.IsSuccess = true;
            }            
            else if ((code == (HttpStatusCode)201) || (code == (HttpStatusCode)202) || (code == (HttpStatusCode)200))
            {
                response.Data = JsonSerializer.Deserialize<Model.ItemInfo<T1, T2>>(payload, ResponseJsonOptions);
                response.IsSuccess = true;
            }
            else if (code == (HttpStatusCode)404)
            {
                response.Error404 = JsonSerializer.Deserialize<ErrorEntity>(payload, ResponseJsonOptions);
                response.Error = response.Error404!.TranslateToApiError();
            }
            
            return response;
        }
    }

}