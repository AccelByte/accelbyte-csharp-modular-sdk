// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Platform.Model;

namespace AccelByte.Sdk.Api.Platform.Operation
{
    /// <summary>
    /// publicGetEstimatedPrice
    ///
    /// This API is used to get estimated prices of item
    /// </summary>
    public class PublicGetEstimatedPrice : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static PublicGetEstimatedPriceBuilder Builder { get => new PublicGetEstimatedPriceBuilder(); }

        public class PublicGetEstimatedPriceBuilder
            : OperationBuilder<PublicGetEstimatedPriceBuilder>
        {

            public string? Region { get; set; }

            public string? StoreId { get; set; }





            internal PublicGetEstimatedPriceBuilder() { }

            internal PublicGetEstimatedPriceBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }


            public PublicGetEstimatedPriceBuilder SetRegion(string _region)
            {
                Region = _region;
                return this;
            }

            public PublicGetEstimatedPriceBuilder SetStoreId(string _storeId)
            {
                StoreId = _storeId;
                return this;
            }





            public PublicGetEstimatedPrice Build(
                string namespace_,
                string itemIds
            )
            {
                PublicGetEstimatedPrice op = new PublicGetEstimatedPrice(this,
                    namespace_,
                    itemIds
                );

                op.SetBaseFields<PublicGetEstimatedPriceBuilder>(this);
                return op;
            }

            public List<Model.EstimatedPriceInfo>? Execute(
                string namespace_,
                string itemIds
            )
            {
                PublicGetEstimatedPrice op = Build(
                    namespace_,
                    itemIds
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
            public async Task<List<Model.EstimatedPriceInfo>?> ExecuteAsync(
                string namespace_,
                string itemIds
            )
            {
                PublicGetEstimatedPrice op = Build(
                    namespace_,
                    itemIds
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
        }

        private PublicGetEstimatedPrice(PublicGetEstimatedPriceBuilder builder,
            string namespace_,
            string itemIds
        )
        {
            PathParams["namespace"] = namespace_;

            if (builder.Region is not null) QueryParams["region"] = builder.Region;
            if (builder.StoreId is not null) QueryParams["storeId"] = builder.StoreId;
            if (itemIds is not null) QueryParams["itemIds"] = itemIds;






            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public PublicGetEstimatedPrice(
            string namespace_,
            string? region,
            string? storeId,
            string itemIds
        )
        {
            PathParams["namespace"] = namespace_;

            if (region is not null) QueryParams["region"] = region;
            if (storeId is not null) QueryParams["storeId"] = storeId;
            if (itemIds is not null) QueryParams["itemIds"] = itemIds;






            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/platform/public/namespaces/{namespace}/items/estimatedPrice";

        public override HttpMethod Method => HttpMethod.Get;

        public override List<string> Consumes => new() { "application/json" };

        public override List<string> Produces => new() { "application/json" };

        public List<Model.EstimatedPriceInfo>? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                return JsonSerializer.Deserialize<List<Model.EstimatedPriceInfo>>(payload, ResponseJsonOptions);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<List<Model.EstimatedPriceInfo>>(payload, ResponseJsonOptions);
            }

            var payloadString = payload.ReadToString();

            throw new HttpResponseException(code, payloadString);
        }
    }

}