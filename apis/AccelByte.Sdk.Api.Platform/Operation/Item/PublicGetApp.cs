// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Platform.Model;

namespace AccelByte.Sdk.Api.Platform.Operation
{
    /// <summary>
    /// publicGetApp
    ///
    /// This API is used to get an app in locale. If app not exist in specific region, default region app will return.
    /// 
    /// Other detail info:
    /// 
    ///   * Optional permission : resource="PREVIEW", action=1(CREATE) (user with this permission can view draft store app)
    ///   *  Optional permission : resource="SANDBOX", action=1(CREATE) (user with this permission can view draft store app)
    ///   *  Returns : app data
    /// </summary>
    public class PublicGetApp : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static PublicGetAppBuilder Builder { get => new PublicGetAppBuilder(); }

        public class PublicGetAppBuilder
            : OperationBuilder<PublicGetAppBuilder>
        {

            public string? Language { get; set; }

            public string? Region { get; set; }

            public string? StoreId { get; set; }





            internal PublicGetAppBuilder() { }

            internal PublicGetAppBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }


            public PublicGetAppBuilder SetLanguage(string _language)
            {
                Language = _language;
                return this;
            }

            public PublicGetAppBuilder SetRegion(string _region)
            {
                Region = _region;
                return this;
            }

            public PublicGetAppBuilder SetStoreId(string _storeId)
            {
                StoreId = _storeId;
                return this;
            }





            public PublicGetApp Build(
                string itemId,
                string namespace_
            )
            {
                PublicGetApp op = new PublicGetApp(this,
                    itemId,
                    namespace_
                );

                op.SetBaseFields<PublicGetAppBuilder>(this);
                return op;
            }

            public PublicGetApp.Response Execute(
                string itemId,
                string namespace_
            )
            {
                PublicGetApp op = Build(
                    itemId,
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
            public async Task<PublicGetApp.Response> ExecuteAsync(
                string itemId,
                string namespace_
            )
            {
                PublicGetApp op = Build(
                    itemId,
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
        }

        private PublicGetApp(PublicGetAppBuilder builder,
            string itemId,
            string namespace_
        )
        {
            PathParams["itemId"] = itemId;
            PathParams["namespace"] = namespace_;

            if (builder.Language is not null) QueryParams["language"] = builder.Language;
            if (builder.Region is not null) QueryParams["region"] = builder.Region;
            if (builder.StoreId is not null) QueryParams["storeId"] = builder.StoreId;






        }
        #endregion

        #region Response Part        
        public class Response : ApiResponse<Model.AppInfo>
        {

            public ErrorEntity? Error404 { get; set; } = null;


            protected override string GetFullOperationId() => "Platform::Item::PublicGetApp";
        }

        #endregion

        public PublicGetApp(
            string itemId,
            string namespace_,
            string? language,
            string? region,
            string? storeId
        )
        {
            PathParams["itemId"] = itemId;
            PathParams["namespace"] = namespace_;

            if (language is not null) QueryParams["language"] = language;
            if (region is not null) QueryParams["region"] = region;
            if (storeId is not null) QueryParams["storeId"] = storeId;






        }

        public override string Path => "/platform/public/namespaces/{namespace}/items/{itemId}/app/locale";

        public override HttpMethod Method => HttpMethod.Get;

        public override List<string> Consumes => new() { };

        public override List<string> Produces => new() { "application/json" };

        public PublicGetApp.Response ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            var response = new PublicGetApp.Response()
            {
                StatusCode = code,
                ContentType = contentType
            };

            if (code == (HttpStatusCode)204)
            {
                response.IsSuccess = true;
            }
            else if ((code == (HttpStatusCode)201) || (code == (HttpStatusCode)202) || (code == (HttpStatusCode)200))
            {
                response.Data = JsonSerializer.Deserialize<Model.AppInfo>(payload, ResponseJsonOptions);
                response.IsSuccess = true;
            }
            else if (code == (HttpStatusCode)404)
            {
                response.Error404 = JsonSerializer.Deserialize<ErrorEntity>(payload, ResponseJsonOptions);
                response.Error = response.Error404!.TranslateToApiError();
            }

            return response;
        }
    }

}