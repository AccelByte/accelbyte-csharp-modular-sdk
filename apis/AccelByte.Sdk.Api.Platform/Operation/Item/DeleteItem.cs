// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Platform.Model;

namespace AccelByte.Sdk.Api.Platform.Operation
{
    /// <summary>
    /// deleteItem
    ///
    /// This API is used to delete an item permanently.
    /// 
    /// force: the default value should be: false. When the value is:
    /// * false: only the items in the draft store that have never been published yet can be removed.
    /// *  true: the item in the draft store(even been published before) can be removed.
    /// </summary>
    public class DeleteItem : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static DeleteItemBuilder Builder { get => new DeleteItemBuilder(); }

        public class DeleteItemBuilder
            : OperationBuilder<DeleteItemBuilder>
        {

            public List<DeleteItemFeaturesToCheck>? FeaturesToCheck { get; set; }

            public bool? Force { get; set; }

            public string? StoreId { get; set; }





            internal DeleteItemBuilder() { }

            internal DeleteItemBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }


            public DeleteItemBuilder SetFeaturesToCheck(List<DeleteItemFeaturesToCheck> _featuresToCheck)
            {
                FeaturesToCheck = _featuresToCheck;
                return this;
            }

            public DeleteItemBuilder SetForce(bool _force)
            {
                Force = _force;
                return this;
            }

            public DeleteItemBuilder SetStoreId(string _storeId)
            {
                StoreId = _storeId;
                return this;
            }





            public DeleteItem Build(
                string itemId,
                string namespace_
            )
            {
                DeleteItem op = new DeleteItem(this,
                    itemId,
                    namespace_
                );

                op.SetBaseFields<DeleteItemBuilder>(this);
                return op;
            }

            public DeleteItem.Response Execute(
                string itemId,
                string namespace_
            )
            {
                DeleteItem op = Build(
                    itemId,
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
            public async Task<DeleteItem.Response> ExecuteAsync(
                string itemId,
                string namespace_
            )
            {
                DeleteItem op = Build(
                    itemId,
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
        }

        private DeleteItem(DeleteItemBuilder builder,
            string itemId,
            string namespace_
        )
        {
            PathParams["itemId"] = itemId;
            PathParams["namespace"] = namespace_;

            if (builder.FeaturesToCheck is not null) QueryParams["featuresToCheck"] = builder.FeaturesToCheck;
            if (builder.Force != null) QueryParams["force"] = Convert.ToString(builder.Force)!;
            if (builder.StoreId is not null) QueryParams["storeId"] = builder.StoreId;



            CollectionFormatMap["featuresToCheck"] = "multi";



            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        #region Response Part        
        public class Response : ApiResponse
        {

            public ErrorEntity? Error404 { get; set; } = null;

            public ErrorEntity? Error409 { get; set; } = null;


            protected override string GetFullOperationId() => "Platform::Item::DeleteItem";
        }

        #endregion

        public DeleteItem(
            string itemId,
            string namespace_,
            List<DeleteItemFeaturesToCheck>? featuresToCheck,
            bool? force,
            string? storeId
        )
        {
            PathParams["itemId"] = itemId;
            PathParams["namespace"] = namespace_;

            if (featuresToCheck is not null) QueryParams["featuresToCheck"] = featuresToCheck;
            if (force != null) QueryParams["force"] = Convert.ToString(force)!;
            if (storeId is not null) QueryParams["storeId"] = storeId;



            CollectionFormatMap["featuresToCheck"] = "multi";



            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/platform/admin/namespaces/{namespace}/items/{itemId}";

        public override HttpMethod Method => HttpMethod.Delete;

        public override List<string> Consumes => new() { };

        public override List<string> Produces => new() { "application/json" };

        public DeleteItem.Response ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            var response = new DeleteItem.Response()
            {
                StatusCode = code,
                ContentType = contentType,
                IsSuccess = true
            };

            if (code == (HttpStatusCode)404)

            {
                response.Error404 = JsonSerializer.Deserialize<ErrorEntity>(payload, ResponseJsonOptions);
                response.Error = response.Error404!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)409)

            {
                response.Error409 = JsonSerializer.Deserialize<ErrorEntity>(payload, ResponseJsonOptions);
                response.Error = response.Error409!.TranslateToApiError();
            }

            return response;
        }
    }

    public class DeleteItemFeaturesToCheck : StringEnum<DeleteItemFeaturesToCheck>
    {
        public static readonly DeleteItemFeaturesToCheck CAMPAIGN
            = new DeleteItemFeaturesToCheck("CAMPAIGN");

        public static readonly DeleteItemFeaturesToCheck CATALOG
            = new DeleteItemFeaturesToCheck("CATALOG");

        public static readonly DeleteItemFeaturesToCheck DLC
            = new DeleteItemFeaturesToCheck("DLC");

        public static readonly DeleteItemFeaturesToCheck ENTITLEMENT
            = new DeleteItemFeaturesToCheck("ENTITLEMENT");

        public static readonly DeleteItemFeaturesToCheck IAP
            = new DeleteItemFeaturesToCheck("IAP");

        public static readonly DeleteItemFeaturesToCheck REWARD
            = new DeleteItemFeaturesToCheck("REWARD");


        public static implicit operator DeleteItemFeaturesToCheck(string value)
        {
            return NewValue(value);
        }

        public DeleteItemFeaturesToCheck(string enumValue)
            : base(enumValue)
        {

        }
    }

}