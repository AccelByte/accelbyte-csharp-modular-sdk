// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Platform.Model;

namespace AccelByte.Sdk.Api.Platform.Operation
{
    /// <summary>
    /// queryItemReferences
    ///
    /// This API is used to get references for an item
    /// </summary>
    public class QueryItemReferences : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static QueryItemReferencesBuilder Builder { get => new QueryItemReferencesBuilder(); }

        public class QueryItemReferencesBuilder
            : OperationBuilder<QueryItemReferencesBuilder>
        {

            public List<QueryItemReferencesFeaturesToCheck>? FeaturesToCheck { get; set; }

            public string? StoreId { get; set; }





            internal QueryItemReferencesBuilder() { }

            internal QueryItemReferencesBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }


            public QueryItemReferencesBuilder SetFeaturesToCheck(List<QueryItemReferencesFeaturesToCheck> _featuresToCheck)
            {
                FeaturesToCheck = _featuresToCheck;
                return this;
            }

            public QueryItemReferencesBuilder SetStoreId(string _storeId)
            {
                StoreId = _storeId;
                return this;
            }





            public QueryItemReferences Build(
                string itemId,
                string namespace_
            )
            {
                QueryItemReferences op = new QueryItemReferences(this,
                    itemId,                    
                    namespace_                    
                );

                op.SetBaseFields<QueryItemReferencesBuilder>(this);
                return op;
            }

            public QueryItemReferences.Response Execute(
                string itemId,
                string namespace_
            )
            {
                QueryItemReferences op = Build(
                    itemId,
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
            public async Task<QueryItemReferences.Response> ExecuteAsync(
                string itemId,
                string namespace_
            )
            {
                QueryItemReferences op = Build(
                    itemId,
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
        }

        private QueryItemReferences(QueryItemReferencesBuilder builder,
            string itemId,
            string namespace_
        )
        {
            PathParams["itemId"] = itemId;
            PathParams["namespace"] = namespace_;
            
            if (builder.FeaturesToCheck is not null) QueryParams["featuresToCheck"] = builder.FeaturesToCheck;
            if (builder.StoreId is not null) QueryParams["storeId"] = builder.StoreId;
            

            
            CollectionFormatMap["featuresToCheck"] = "multi";
            
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        #region Response Part        
        public class Response : ApiResponse<Model.ItemDependency>
        {

            public ErrorEntity? Error404 { get; set; } = null;


            protected override string GetFullOperationId() => "Platform::Item::QueryItemReferences";
        }

        #endregion

        public QueryItemReferences(
            string itemId,            
            string namespace_,            
            List<QueryItemReferencesFeaturesToCheck>? featuresToCheck,            
            string? storeId            
        )
        {
            PathParams["itemId"] = itemId;
            PathParams["namespace"] = namespace_;
            
            if (featuresToCheck is not null) QueryParams["featuresToCheck"] = featuresToCheck;
            if (storeId is not null) QueryParams["storeId"] = storeId;
            

            
            CollectionFormatMap["featuresToCheck"] = "multi";
            
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/platform/admin/namespaces/{namespace}/items/{itemId}/references";

        public override HttpMethod Method => HttpMethod.Get;

        public override List<string> Consumes => new() {  };

        public override List<string> Produces => new() { "application/json" };
        
        public QueryItemReferences.Response ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            var response = new QueryItemReferences.Response()
            {
                StatusCode = code,
                ContentType = contentType
            };

            if (code == (HttpStatusCode)204)
            {
                response.IsSuccess = true;
            }
            else if ((code == (HttpStatusCode)201) || (code == (HttpStatusCode)202) || (code == (HttpStatusCode)200))
            {
                response.Data = JsonSerializer.Deserialize<Model.ItemDependency>(payload, ResponseJsonOptions);
                response.IsSuccess = true;
            }
            else if (code == (HttpStatusCode)404)
            {
                response.Error404 = JsonSerializer.Deserialize<ErrorEntity>(payload, ResponseJsonOptions);
                response.Error = response.Error404!.TranslateToApiError();
            }

            return response;
        }
    }

    public class QueryItemReferencesFeaturesToCheck : StringEnum<QueryItemReferencesFeaturesToCheck>
    {
        public static readonly QueryItemReferencesFeaturesToCheck CAMPAIGN
            = new QueryItemReferencesFeaturesToCheck("CAMPAIGN");

        public static readonly QueryItemReferencesFeaturesToCheck CATALOG
            = new QueryItemReferencesFeaturesToCheck("CATALOG");

        public static readonly QueryItemReferencesFeaturesToCheck DLC
            = new QueryItemReferencesFeaturesToCheck("DLC");

        public static readonly QueryItemReferencesFeaturesToCheck ENTITLEMENT
            = new QueryItemReferencesFeaturesToCheck("ENTITLEMENT");

        public static readonly QueryItemReferencesFeaturesToCheck IAP
            = new QueryItemReferencesFeaturesToCheck("IAP");

        public static readonly QueryItemReferencesFeaturesToCheck REWARD
            = new QueryItemReferencesFeaturesToCheck("REWARD");


        public static implicit operator QueryItemReferencesFeaturesToCheck(string value)
        {
            return NewValue(value);
        }

        public QueryItemReferencesFeaturesToCheck(string enumValue)
            : base(enumValue)
        {

        }
    }

}