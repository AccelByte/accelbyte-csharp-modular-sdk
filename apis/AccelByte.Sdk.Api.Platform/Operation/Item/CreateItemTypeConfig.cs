// Copyright (c) 2022-2023 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Platform.Model;

namespace AccelByte.Sdk.Api.Platform.Operation
{
    /// <summary>
    /// createItemTypeConfig
    ///
    ///  [Not Supported Yet In Starter] This API is used to create an item type config.
    /// 
    /// *  Required permission : resource="ADMIN:ITEM:CONFIG", action=1 (CREATE)
    /// *  Returns : item type config data
    /// </summary>
    public class CreateItemTypeConfig : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static CreateItemTypeConfigBuilder Builder { get => new CreateItemTypeConfigBuilder(); }

        public class CreateItemTypeConfigBuilder
            : OperationBuilder<CreateItemTypeConfigBuilder>
        {


            public Model.ItemTypeConfigCreate? Body { get; set; }




            internal CreateItemTypeConfigBuilder() { }

            internal CreateItemTypeConfigBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }



            public CreateItemTypeConfigBuilder SetBody(Model.ItemTypeConfigCreate _body)
            {
                Body = _body;
                return this;
            }




            public CreateItemTypeConfig Build(
            )
            {
                CreateItemTypeConfig op = new CreateItemTypeConfig(this
                );
                op.PreferredSecurityMethod = PreferredSecurityMethod;
                op.RequestJsonOptions = RequestJsonOptions;
                op.ResponseJsonOptions = ResponseJsonOptions;

                return op;
            }

            public void Execute(
            )
            {
                CreateItemTypeConfig op = Build(
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
        }

        private CreateItemTypeConfig(CreateItemTypeConfigBuilder builder
        )
        {





            BodyParams = builder.Body;


            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public CreateItemTypeConfig(
            Model.ItemTypeConfigCreate body
        )
        {





            BodyParams = body;


            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/platform/admin/items/configs";

        public override HttpMethod Method => HttpMethod.Post;

        public override List<string> Consumes => new() { "application/json" };

        public override List<string> Produces => new() { "application/json" };

        public void ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)201)
            {
                return;
            }

            var payloadString = payload.ReadToString();

            throw new HttpResponseException(code, payloadString);
        }
    }

}