// Copyright (c) 2022-2023 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Platform.Model;

namespace AccelByte.Sdk.Api.Platform.Operation
{
    /// <summary>
    /// updateUserEntitlement
    ///
    /// Update user entitlement. If update CONSUMABLE entitlement useCount to 0, the status will be CONSUMED.
    /// Other detail info:
    /// 
    ///   * Required permission : resource="ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT", action=4 (UPDATE)
    ///   *  Returns : updated entitlement
    /// </summary>
    public class UpdateUserEntitlement : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static UpdateUserEntitlementBuilder Builder { get => new UpdateUserEntitlementBuilder(); }

        public class UpdateUserEntitlementBuilder
            : OperationBuilder<UpdateUserEntitlementBuilder>
        {


            public Model.EntitlementUpdate? Body { get; set; }




            internal UpdateUserEntitlementBuilder() { }

            internal UpdateUserEntitlementBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }



            public UpdateUserEntitlementBuilder SetBody(Model.EntitlementUpdate _body)
            {
                Body = _body;
                return this;
            }




            public UpdateUserEntitlement Build(
                string entitlementId,
                string namespace_,
                string userId
            )
            {
                UpdateUserEntitlement op = new UpdateUserEntitlement(this,
                    entitlementId,                    
                    namespace_,                    
                    userId                    
                );
                op.PreferredSecurityMethod = PreferredSecurityMethod;

                return op;
            }

            public Model.EntitlementInfo? Execute(
                string entitlementId,
                string namespace_,
                string userId
            )
            {
                UpdateUserEntitlement op = Build(
                    entitlementId,
                    namespace_,
                    userId
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
        }

        private UpdateUserEntitlement(UpdateUserEntitlementBuilder builder,
            string entitlementId,
            string namespace_,
            string userId
        )
        {
            PathParams["entitlementId"] = entitlementId;
            PathParams["namespace"] = namespace_;
            PathParams["userId"] = userId;
            
            

            
            
            BodyParams = builder.Body;
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public UpdateUserEntitlement(
            string entitlementId,            
            string namespace_,            
            string userId,            
            Model.EntitlementUpdate body            
        )
        {
            PathParams["entitlementId"] = entitlementId;
            PathParams["namespace"] = namespace_;
            PathParams["userId"] = userId;
            
            

            
            
            BodyParams = body;
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/platform/admin/namespaces/{namespace}/users/{userId}/entitlements/{entitlementId}";

        public override HttpMethod Method => HttpMethod.Put;

        public override List<string> Consumes => new() { "application/json" };

        public override List<string> Produces => new() { "application/json" };        
        
        public Model.EntitlementInfo? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {            
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                return JsonSerializer.Deserialize<Model.EntitlementInfo>(payload);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.EntitlementInfo>(payload);
            }
            
            var payloadString = payload.ReadToString();
            
            throw new HttpResponseException(code, payloadString);
        }
    }

}