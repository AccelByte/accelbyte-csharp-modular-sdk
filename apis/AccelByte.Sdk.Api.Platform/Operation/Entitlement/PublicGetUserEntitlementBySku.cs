// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Platform.Model;

namespace AccelByte.Sdk.Api.Platform.Operation
{
    /// <summary>
    /// publicGetUserEntitlementBySku
    ///
    /// Get user entitlement by sku.
    /// </summary>
    [Obsolete(DiagnosticId ="ab_deprecated_operation")]
    public class PublicGetUserEntitlementBySku : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static PublicGetUserEntitlementBySkuBuilder Builder { get => new PublicGetUserEntitlementBySkuBuilder(); }

        public class PublicGetUserEntitlementBySkuBuilder
            : OperationBuilder<PublicGetUserEntitlementBySkuBuilder>
        {

            public PublicGetUserEntitlementBySkuEntitlementClazz? EntitlementClazz { get; set; }





            internal PublicGetUserEntitlementBySkuBuilder() { }

            internal PublicGetUserEntitlementBySkuBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }


            public PublicGetUserEntitlementBySkuBuilder SetEntitlementClazz(PublicGetUserEntitlementBySkuEntitlementClazz _entitlementClazz)
            {
                EntitlementClazz = _entitlementClazz;
                return this;
            }





            public PublicGetUserEntitlementBySku Build(
                string namespace_,
                string userId,
                string sku
            )
            {
                PublicGetUserEntitlementBySku op = new PublicGetUserEntitlementBySku(this,
                    namespace_,                    
                    userId,                    
                    sku                    
                );

                op.SetBaseFields<PublicGetUserEntitlementBySkuBuilder>(this);
                return op;
            }

            [Obsolete(DiagnosticId ="ab_deprecated_operation_wrapper")]
            public PublicGetUserEntitlementBySku.Response Execute(
                string namespace_,
                string userId,
                string sku
            )
            {
                PublicGetUserEntitlementBySku op = Build(
                    namespace_,
                    userId,
                    sku
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
            public async Task<PublicGetUserEntitlementBySku.Response> ExecuteAsync(
                string namespace_,
                string userId,
                string sku
            )
            {
                PublicGetUserEntitlementBySku op = Build(
                    namespace_,
                    userId,
                    sku
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
        }

        private PublicGetUserEntitlementBySku(PublicGetUserEntitlementBySkuBuilder builder,
            string namespace_,
            string userId,
            string sku
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["userId"] = userId;
            
            if (builder.EntitlementClazz is not null) QueryParams["entitlementClazz"] = builder.EntitlementClazz.Value;
            if (sku is not null) QueryParams["sku"] = sku;
            

            
            
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        #region Response Part        
        public class Response : ApiResponse<Model.EntitlementInfo>
        {

            public ErrorEntity? Error404 { get; set; } = null;


            protected override string GetFullOperationId() => "Platform::Entitlement::PublicGetUserEntitlementBySku";
        }

        #endregion

        public PublicGetUserEntitlementBySku(
            string namespace_,            
            string userId,            
            PublicGetUserEntitlementBySkuEntitlementClazz? entitlementClazz,            
            string sku            
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["userId"] = userId;
            
            if (entitlementClazz is not null) QueryParams["entitlementClazz"] = entitlementClazz.Value;
            if (sku is not null) QueryParams["sku"] = sku;
            

            
            
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/platform/public/namespaces/{namespace}/users/{userId}/entitlements/bySku";

        public override HttpMethod Method => HttpMethod.Get;

        public override List<string> Consumes => new() {  };

        public override List<string> Produces => new() { "application/json" };
        
        public PublicGetUserEntitlementBySku.Response ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            var response = new PublicGetUserEntitlementBySku.Response()
            {
                StatusCode = code,
                ContentType = contentType
            };

            if (code == (HttpStatusCode)204)
            {
                response.IsSuccess = true;
            }
            else if ((code == (HttpStatusCode)201) || (code == (HttpStatusCode)202) || (code == (HttpStatusCode)200))
            {
                response.Data = JsonSerializer.Deserialize<Model.EntitlementInfo>(payload, ResponseJsonOptions);
                response.IsSuccess = true;
            }
            else if (code == (HttpStatusCode)404)
            {
                response.Error404 = JsonSerializer.Deserialize<ErrorEntity>(payload, ResponseJsonOptions);
                response.Error = response.Error404!.TranslateToApiError();
            }

            return response;
        }
    }

    public class PublicGetUserEntitlementBySkuEntitlementClazz : StringEnum<PublicGetUserEntitlementBySkuEntitlementClazz>
    {
        public static readonly PublicGetUserEntitlementBySkuEntitlementClazz APP
            = new PublicGetUserEntitlementBySkuEntitlementClazz("APP");

        public static readonly PublicGetUserEntitlementBySkuEntitlementClazz CODE
            = new PublicGetUserEntitlementBySkuEntitlementClazz("CODE");

        public static readonly PublicGetUserEntitlementBySkuEntitlementClazz ENTITLEMENT
            = new PublicGetUserEntitlementBySkuEntitlementClazz("ENTITLEMENT");

        public static readonly PublicGetUserEntitlementBySkuEntitlementClazz LOOTBOX
            = new PublicGetUserEntitlementBySkuEntitlementClazz("LOOTBOX");

        public static readonly PublicGetUserEntitlementBySkuEntitlementClazz MEDIA
            = new PublicGetUserEntitlementBySkuEntitlementClazz("MEDIA");

        public static readonly PublicGetUserEntitlementBySkuEntitlementClazz OPTIONBOX
            = new PublicGetUserEntitlementBySkuEntitlementClazz("OPTIONBOX");

        public static readonly PublicGetUserEntitlementBySkuEntitlementClazz SUBSCRIPTION
            = new PublicGetUserEntitlementBySkuEntitlementClazz("SUBSCRIPTION");


        public static implicit operator PublicGetUserEntitlementBySkuEntitlementClazz(string value)
        {
            return NewValue(value);
        }

        public PublicGetUserEntitlementBySkuEntitlementClazz(string enumValue)
            : base(enumValue)
        {

        }
    }

}