// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Platform.Model;

namespace AccelByte.Sdk.Api.Platform.Operation
{
    /// <summary>
    /// publicGetUserAppEntitlementByAppId
    ///
    /// Get user app entitlement by appId.
    /// </summary>
    public class PublicGetUserAppEntitlementByAppId : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static PublicGetUserAppEntitlementByAppIdBuilder Builder { get => new PublicGetUserAppEntitlementByAppIdBuilder(); }

        public class PublicGetUserAppEntitlementByAppIdBuilder
            : OperationBuilder<PublicGetUserAppEntitlementByAppIdBuilder>
        {





            internal PublicGetUserAppEntitlementByAppIdBuilder() { }

            internal PublicGetUserAppEntitlementByAppIdBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }






            public PublicGetUserAppEntitlementByAppId Build(
                string namespace_,
                string userId,
                string appId
            )
            {
                PublicGetUserAppEntitlementByAppId op = new PublicGetUserAppEntitlementByAppId(this,
                    namespace_,                    
                    userId,                    
                    appId                    
                );

                op.SetBaseFields<PublicGetUserAppEntitlementByAppIdBuilder>(this);
                return op;
            }

            public Model.AppEntitlementInfo? Execute(
                string namespace_,
                string userId,
                string appId
            )
            {
                PublicGetUserAppEntitlementByAppId op = Build(
                    namespace_,
                    userId,
                    appId
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
            public async Task<Model.AppEntitlementInfo?> ExecuteAsync(
                string namespace_,
                string userId,
                string appId
            )
            {
                PublicGetUserAppEntitlementByAppId op = Build(
                    namespace_,
                    userId,
                    appId
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
        }

        private PublicGetUserAppEntitlementByAppId(PublicGetUserAppEntitlementByAppIdBuilder builder,
            string namespace_,
            string userId,
            string appId
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["userId"] = userId;
            
            if (appId is not null) QueryParams["appId"] = appId;
            

            
            
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public PublicGetUserAppEntitlementByAppId(
            string namespace_,            
            string userId,            
            string appId            
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["userId"] = userId;
            
            if (appId is not null) QueryParams["appId"] = appId;
            

            
            
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/platform/public/namespaces/{namespace}/users/{userId}/entitlements/byAppId";

        public override HttpMethod Method => HttpMethod.Get;

        public override List<string> Consumes => new() {  };

        public override List<string> Produces => new() { "application/json" };        
        
        public Model.AppEntitlementInfo? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {            
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                return JsonSerializer.Deserialize<Model.AppEntitlementInfo>(payload, ResponseJsonOptions);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.AppEntitlementInfo>(payload, ResponseJsonOptions);
            }
            
            var payloadString = payload.ReadToString();
            
            throw new HttpResponseException(code, payloadString);
        }
    }

}