// Copyright (c) 2022-2023 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Platform.Model;

namespace AccelByte.Sdk.Api.Platform.Operation
{
    /// <summary>
    /// grantEntitlements
    ///
    /// Grant entitlements to multiple users, skipped granting will be treated as fail.
    /// Other detail info:
    /// 
    ///   * Required permission : resource="ADMIN:NAMESPACE:{namespace}:ENTITLEMENT", action=4 (UPDATE)
    ///   *  Returns : bulk grant entitlements result
    /// </summary>
    public class GrantEntitlements : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static GrantEntitlementsBuilder Builder { get => new GrantEntitlementsBuilder(); }

        public class GrantEntitlementsBuilder
            : OperationBuilder<GrantEntitlementsBuilder>
        {


            public Model.BulkEntitlementGrantRequest? Body { get; set; }




            internal GrantEntitlementsBuilder() { }

            internal GrantEntitlementsBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }



            public GrantEntitlementsBuilder SetBody(Model.BulkEntitlementGrantRequest _body)
            {
                Body = _body;
                return this;
            }




            public GrantEntitlements Build(
                string namespace_
            )
            {
                GrantEntitlements op = new GrantEntitlements(this,
                    namespace_                    
                );
                op.PreferredSecurityMethod = PreferredSecurityMethod;

                return op;
            }

            public Model.BulkEntitlementGrantResult? Execute(
                string namespace_
            )
            {
                GrantEntitlements op = Build(
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
        }

        private GrantEntitlements(GrantEntitlementsBuilder builder,
            string namespace_
        )
        {
            PathParams["namespace"] = namespace_;
            
            

            
            
            BodyParams = builder.Body;
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public GrantEntitlements(
            string namespace_,            
            Model.BulkEntitlementGrantRequest body            
        )
        {
            PathParams["namespace"] = namespace_;
            
            

            
            
            BodyParams = body;
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/platform/admin/namespaces/{namespace}/entitlements/grant";

        public override HttpMethod Method => HttpMethod.Post;

        public override List<string> Consumes => new() { "application/json" };

        public override List<string> Produces => new() { "application/json" };        
        
        public Model.BulkEntitlementGrantResult? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {            
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                return JsonSerializer.Deserialize<Model.BulkEntitlementGrantResult>(payload);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.BulkEntitlementGrantResult>(payload);
            }
            
            var payloadString = payload.ReadToString();
            
            throw new HttpResponseException(code, payloadString);
        }
    }

}