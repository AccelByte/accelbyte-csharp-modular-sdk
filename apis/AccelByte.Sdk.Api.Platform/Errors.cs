// Copyright (c) 2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

/*
serviceName: Platform

*/
using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json.Serialization;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Converters;

using AccelByte.Sdk.Api.Platform.Model;
using AccelByte.Sdk.Api.Platform.Operation;

namespace AccelByte.Sdk.Api.Platform
{
    public static class PlatformErrors
    {
        public static readonly ApiError Error20002 = new ApiError("20002", "validation error");
        public static readonly ApiError Error20006 = new ApiError("20006", "optimistic lock");
        public static readonly ApiError Error20007 = new ApiError("20007", "too many requests");
        public static readonly ApiError Error20008 = new ApiError("20008", "user [{userId}] does not exist in namespace [{namespace}]");
        public static readonly ApiError Error20016 = new ApiError("20016", "action is banned");
        public static readonly ApiError Error20018 = new ApiError("20018", "ecommerce item type not supported");
        public static readonly ApiError Error20024 = new ApiError("20024", "insufficient inventory capacity (max. slots)");
        public static readonly ApiError Error20027 = new ApiError("20027", "Invalid time range");
        public static readonly ApiError Error30021 = new ApiError("30021", "Default language [{language}] required");
        public static readonly ApiError Error30022 = new ApiError("30022", "Default region [{region}] is required");
        public static readonly ApiError Error30023 = new ApiError("30023", "Catalog plugin grpc server address required");
        public static readonly ApiError Error30024 = new ApiError("30024", "Unable to parse CSV cell [{content}]");
        public static readonly ApiError Error30025 = new ApiError("30025", "[{header}] is required by CSV import/export for catalogType [{catalogType}]");
        public static readonly ApiError Error30041 = new ApiError("30041", "Changelog [{changelogId}] does not exist in namespace [{namespace}]");
        public static readonly ApiError Error30071 = new ApiError("30071", "Can't unselect item [{itemId}] when the item which is bound to is already selected in namespace [{namespace}]");
        public static readonly ApiError Error30072 = new ApiError("30072", "Can't unselect category [{categoryPath}] when item with this category is already selected in namespace [{namespace}]");
        public static readonly ApiError Error30073 = new ApiError("30073", "Can't unselect store change");
        public static readonly ApiError Error30074 = new ApiError("30074", "Can't unselect subscription's content [{itemId}] when subscription is already selected in namespace [{namespace}]");
        public static readonly ApiError Error30076 = new ApiError("30076", "CSV header [{headerName}] is not supported for CatalogType [{catalogType}]");
        public static readonly ApiError Error30121 = new ApiError("30121", "Store data is invalid");
        public static readonly ApiError Error30122 = new ApiError("30122", "Store's meta mismatch");
        public static readonly ApiError Error30141 = new ApiError("30141", "Store [{storeId}] does not exist in namespace [{namespace}]");
        public static readonly ApiError Error30142 = new ApiError("30142", "Published store does not exist in namespace [{namespace}]");
        public static readonly ApiError Error30143 = new ApiError("30143", "Published store [{storeId}] backup does not exist in namespace [{namespace}]");
        public static readonly ApiError Error30171 = new ApiError("30171", "Store [{store}] can't change default language to [{language}]");
        public static readonly ApiError Error30172 = new ApiError("30172", "Store [{store}] can't change default region to [{region}]");
        public static readonly ApiError Error30173 = new ApiError("30173", "Published store can't modify content");
        public static readonly ApiError Error30174 = new ApiError("30174", "Draft store already exists in namespace [{namespace}]");
        public static readonly ApiError Error30175 = new ApiError("30175", "Duplicated currencyCode [{currencyCode}] in Region [{region}]");
        public static readonly ApiError Error30241 = new ApiError("30241", "Category [{categoryPath}] does not exist in namespace [{namespace}]");
        public static readonly ApiError Error30271 = new ApiError("30271", "Category [{categoryPath}] already exists in namespace [{namespace}]");
        public static readonly ApiError Error30272 = new ApiError("30272", "Category [{categoryPath}] is not empty in namespace [{namespace}]");
        public static readonly ApiError Error30301 = new ApiError("30301", "Unsupported Item Type [{itemType}] for box item [{itemId}] with expiration");
        public static readonly ApiError Error30321 = new ApiError("30321", "Invalid item discount amount");
        public static readonly ApiError Error30322 = new ApiError("30322", "Bundle item [{itemId}] can't be bundled");
        public static readonly ApiError Error30323 = new ApiError("30323", "Target namespace is required");
        public static readonly ApiError Error30324 = new ApiError("30324", "Invalid namespace [{namespace}]");
        public static readonly ApiError Error30325 = new ApiError("30325", "Code item [{itemId}] can't be bundled");
        public static readonly ApiError Error30326 = new ApiError("30326", "Subscription item [{itemId}] can't be bundled");
        public static readonly ApiError Error30327 = new ApiError("30327", "Invalid item trial price");
        public static readonly ApiError Error30329 = new ApiError("30329", "Invalid bundled item [{itemId}] quantity");
        public static readonly ApiError Error30330 = new ApiError("30330", "Invalid item region price currency namespace [{namespace}]");
        public static readonly ApiError Error30331 = new ApiError("30331", "Invalid purchase condition");
        public static readonly ApiError Error30332 = new ApiError("30332", "Invalid option box item [{itemId}] quantity");
        public static readonly ApiError Error30333 = new ApiError("30333", "Item [{itemId}] item type [{itemType}] can't be bundled into option box");
        public static readonly ApiError Error30334 = new ApiError("30334", "Option box item [{itemId}] can't be bundled");
        public static readonly ApiError Error30335 = new ApiError("30335", "Item [{itemId}] can't be deleted in non-forced mode if item has been published");
        public static readonly ApiError Error30336 = new ApiError("30336", "Item type [{itemType}] does not support");
        public static readonly ApiError Error30337 = new ApiError("30337", "Invalid loot box item [{itemId}] quantity");
        public static readonly ApiError Error30338 = new ApiError("30338", "Item [{itemId}] item type [{itemType}] can't be bundled into loot box");
        public static readonly ApiError Error30339 = new ApiError("30339", "Loot box item [{itemId}] can't be bundled");
        public static readonly ApiError Error30341 = new ApiError("30341", "Item [{itemId}] does not exist in namespace [{namespace}]");
        public static readonly ApiError Error30342 = new ApiError("30342", "Item of appId [{appId}] does not exist");
        public static readonly ApiError Error30343 = new ApiError("30343", "Item of sku [{sku}] does not exist");
        public static readonly ApiError Error30371 = new ApiError("30371", "Item maxCount not allow reduce");
        public static readonly ApiError Error30372 = new ApiError("30372", "ItemType is not updatable");
        public static readonly ApiError Error30373 = new ApiError("30373", "ItemType [{itemType}] is not allowed in namespace [{namespace}]");
        public static readonly ApiError Error30374 = new ApiError("30374", "Item sku [{sku}] already exists in namespace [{namespace}]");
        public static readonly ApiError Error30375 = new ApiError("30375", "Item id [{itemId}] of sku [{sku}] is duplicate with un-published deleted item in namespace [{namespace}]");
        public static readonly ApiError Error30376 = new ApiError("30376", "Publisher namespace don’t allow sellback item");
        public static readonly ApiError Error30377 = new ApiError("30377", "This item type [{itemType}] don’t allow sellback");
        public static readonly ApiError Error30378 = new ApiError("30378", "Sale price don’t allow real currency [{currencyCode}]");
        public static readonly ApiError Error30379 = new ApiError("30379", "Item sku is not updatable");
        public static readonly ApiError Error30380 = new ApiError("30380", "Box item [{itemId}] duration and end date can’t be set at the same time");
        public static readonly ApiError Error30381 = new ApiError("30381", "Currency [{currency}] is not set for bundle Item [{itemId}] in region [{region}]");
        public static readonly ApiError Error30382 = new ApiError("30382", "Duplicated Item sku [{sku}]");
        public static readonly ApiError Error30383 = new ApiError("30383", "Item app id [{appId}] already exists in namespace [{namespace}] item [{itemId}]");
        public static readonly ApiError Error30386 = new ApiError("30386", "The item [{itemId}] is currently associated and cannot be deleted in namespace [{namespace}], Feature {featureName}, Module {moduleName}, and Reference ID {referenceId} are using this item ID");
        public static readonly ApiError Error30387 = new ApiError("30387", "The item [{itemId}] is currently associated and cannot be disabled in namespace [{namespace}], Feature {featureName}, Module {moduleName}, and Reference ID {referenceId} are using this item ID");
        public static readonly ApiError Error30541 = new ApiError("30541", "Item type config [{id}] doesn't exist");
        public static readonly ApiError Error30641 = new ApiError("30641", "View [{viewId}] does not exist in namespace [{namespace}]");
        public static readonly ApiError Error30741 = new ApiError("30741", "Section [{sectionId}] does not exist in namespace [{namespace}]");
        public static readonly ApiError Error30771 = new ApiError("30771", "Item [{itemId}] not found in User Section [{sectionId}], UserId [{userId}], Namespace [{namespace}]");
        public static readonly ApiError Error30772 = new ApiError("30772", "Section [{sectionId}] is not available or expired");
        public static readonly ApiError Error31121 = new ApiError("31121", "OptionBox entitlement [{entitlementId}] use count is not 1");
        public static readonly ApiError Error31122 = new ApiError("31122", "OptionBox entitlement [{entitlementId}] options size is not 1");
        public static readonly ApiError Error31123 = new ApiError("31123", "Unable to acquire box item, box item [{itemId}] expired");
        public static readonly ApiError Error31141 = new ApiError("31141", "Entitlement [{entitlementId}] does not exist in namespace [{namespace}]");
        public static readonly ApiError Error31142 = new ApiError("31142", "Entitlement with appId [{appId}] does not exist in namespace [{namespace}]");
        public static readonly ApiError Error31143 = new ApiError("31143", "Entitlement with sku [{sku}] does not exist in namespace [{namespace}]");
        public static readonly ApiError Error31144 = new ApiError("31144", "Entitlement with itemId [{itemId}] does not exist in namespace [{namespace}]");
        public static readonly ApiError Error31145 = new ApiError("31145", "Option [{option}] doesn't exist in OptionBox entitlement [{entitlementId}]");
        public static readonly ApiError Error31147 = new ApiError("31147", "Origin [Steam] and System need exist in allowPlatformOrigin");
        public static readonly ApiError Error31171 = new ApiError("31171", "Entitlement [{entitlementId}] already revoked");
        public static readonly ApiError Error31172 = new ApiError("31172", "Entitlement [{entitlementId}] not active");
        public static readonly ApiError Error31173 = new ApiError("31173", "Entitlement [{entitlementId}] is not consumable");
        public static readonly ApiError Error31174 = new ApiError("31174", "Entitlement [{entitlementId}] already consumed");
        public static readonly ApiError Error31176 = new ApiError("31176", "Entitlement [{entitlementId}] use count is insufficient");
        public static readonly ApiError Error31177 = new ApiError("31177", "Permanent item already owned");
        public static readonly ApiError Error31178 = new ApiError("31178", "Entitlement [{entitlementId}] out of time range");
        public static readonly ApiError Error31179 = new ApiError("31179", "Duplicate entitlement exists");
        public static readonly ApiError Error31180 = new ApiError("31180", "Duplicate request id: [{requestId}]");
        public static readonly ApiError Error31181 = new ApiError("31181", "Entitlement [{entitlementId}] is not sellable");
        public static readonly ApiError Error31182 = new ApiError("31182", "Entitlement [{entitlementId}] already sold");
        public static readonly ApiError Error31183 = new ApiError("31183", "Entitlement [{entitlementId}] origin [{origin}] not allowed be operated at [{platform}]");
        public static readonly ApiError Error31184 = new ApiError("31184", "Source entitlement [{sourceEntitlementId}] and target entitlement [{targetEntitlementId}] should have same collectionId, timeRange, origin and itemId");
        public static readonly ApiError Error31185 = new ApiError("31185", "Transferred source entitlement [{sourceEntitlementId}] and target entitlement [{targetEntitlementId}] can not be set to same");
        public static readonly ApiError Error32121 = new ApiError("32121", "Order price mismatch");
        public static readonly ApiError Error32122 = new ApiError("32122", "Item type [{itemType}] does not support");
        public static readonly ApiError Error32123 = new ApiError("32123", "Item is not purchasable");
        public static readonly ApiError Error32124 = new ApiError("32124", "Invalid currency namespace");
        public static readonly ApiError Error32125 = new ApiError("32125", "The user does not meet the purchase conditions");
        public static readonly ApiError Error32126 = new ApiError("32126", "Section ID is required for placing this order");
        public static readonly ApiError Error32127 = new ApiError("32127", "Discount code [{code}] can't be used on this item: {tips}");
        public static readonly ApiError Error32128 = new ApiError("32128", "Discount code [{code}] can not be used with other code together");
        public static readonly ApiError Error32129 = new ApiError("32129", "Can't use discount code on free order");
        public static readonly ApiError Error32130 = new ApiError("32130", "The total discount amount cannot exceed the order price");
        public static readonly ApiError Error32141 = new ApiError("32141", "Order [{orderNo}] does not exist");
        public static readonly ApiError Error32171 = new ApiError("32171", "Order [{orderNo}] is not refundable");
        public static readonly ApiError Error32172 = new ApiError("32172", "Invalid order status [{status}] for order [{orderNo}]");
        public static readonly ApiError Error32173 = new ApiError("32173", "Receipt of order [{orderNo}] is not downloadable");
        public static readonly ApiError Error32175 = new ApiError("32175", "Exceed item [{itemId}] max count [{maxCount}] per user");
        public static readonly ApiError Error32176 = new ApiError("32176", "Exceed item [{itemId}] max count [{maxCount}]");
        public static readonly ApiError Error32177 = new ApiError("32177", "Order [{orderNo}] is not cancelable");
        public static readonly ApiError Error32178 = new ApiError("32178", "User [{userId}] already owned all durable items in flexible bundle [{bundleId}], namespace: [{namespace}]");
        public static readonly ApiError Error33045 = new ApiError("33045", "errors.net.accelbyte.platform.payment.payment_merchant_config_not_found");
        public static readonly ApiError Error33121 = new ApiError("33121", "Recurring payment failed with code: [{errorCode}] and message: [{errorMessage}] by provider: [{provider}]");
        public static readonly ApiError Error33122 = new ApiError("33122", "Subscription not match when create payment order");
        public static readonly ApiError Error33123 = new ApiError("33123", "Invalid zipcode");
        public static readonly ApiError Error33141 = new ApiError("33141", "Payment Order [{paymentOrderNo}] does not exist");
        public static readonly ApiError Error33145 = new ApiError("33145", "Recurring token not found");
        public static readonly ApiError Error33171 = new ApiError("33171", "Invalid payment order status [{status}] for payment order [{paymentOrderNo}]");
        public static readonly ApiError Error33172 = new ApiError("33172", "Payment order [{paymentOrderNo}] is not refundable");
        public static readonly ApiError Error33173 = new ApiError("33173", "ExtOrderNo [{extOrderNo}] already exists in namespace [{namespace}]");
        public static readonly ApiError Error33221 = new ApiError("33221", "TaxJar api token required");
        public static readonly ApiError Error33241 = new ApiError("33241", "Payment provider config [{id}] does not exist");
        public static readonly ApiError Error33242 = new ApiError("33242", "Payment merchant config [{id}] does not exist");
        public static readonly ApiError Error33243 = new ApiError("33243", "Payment callback config for [{namespace}] does not exist");
        public static readonly ApiError Error33271 = new ApiError("33271", "Payment provider config for namespace [{namespace}] and region [{region}] already exists");
        public static readonly ApiError Error33321 = new ApiError("33321", "Payment provider [{paymentProvider}] not support currency [{currency}]");
        public static readonly ApiError Error33322 = new ApiError("33322", "Payment provider [{paymentProvider}] not supported");
        public static readonly ApiError Error33332 = new ApiError("33332", "Amount too small, please contact administrator");
        public static readonly ApiError Error33333 = new ApiError("33333", "Neon Pay checkout payment order [{paymentOrderNo}] failed with message [{errMsg}]");
        public static readonly ApiError Error34021 = new ApiError("34021", "Reward data for namespace [{namespace}] is invalid");
        public static readonly ApiError Error34023 = new ApiError("34023", "Reward Item [{itemId}] with item type [{itemType}] is not supported for duration or endDate");
        public static readonly ApiError Error34027 = new ApiError("34027", "Reward Item [{sku}] with item type [{itemType}] is not supported for duration or endDate");
        public static readonly ApiError Error34041 = new ApiError("34041", "Reward [{rewardId}] does not exist in namespace [{namespace}]");
        public static readonly ApiError Error34042 = new ApiError("34042", "Reward item [{itemId}] does not exist in namespace [{namespace}]");
        public static readonly ApiError Error34043 = new ApiError("34043", "Reward with code [{rewardCode}] does not exist in namespace [{namespace}]");
        public static readonly ApiError Error34044 = new ApiError("34044", "Reward item [{sku}] does not exist in namespace [{namespace}]");
        public static readonly ApiError Error34071 = new ApiError("34071", "Reward with code [{rewardCode}] already exists in namespace [{namespace}]");
        public static readonly ApiError Error34072 = new ApiError("34072", "Duplicate reward condition [{rewardConditionName}] found in reward [{rewardCode}]");
        public static readonly ApiError Error34074 = new ApiError("34074", "Reward Item [{itemId}] duration and end date can’t be set at the same time");
        public static readonly ApiError Error34076 = new ApiError("34076", "Reward Item [{sku}] duration and end date can’t be set at the same time");
        public static readonly ApiError Error35123 = new ApiError("35123", "Wallet [{walletId}] is inactive");
        public static readonly ApiError Error35124 = new ApiError("35124", "Wallet [{currencyCode}] has insufficient balance");
        public static readonly ApiError Error35141 = new ApiError("35141", "Wallet [{walletId}] does not exist");
        public static readonly ApiError Error36141 = new ApiError("36141", "Currency [{currencyCode}] does not exist in namespace [{namespace}]");
        public static readonly ApiError Error36171 = new ApiError("36171", "Currency [{currencyCode}] already exists in namespace [{namespace}]");
        public static readonly ApiError Error36172 = new ApiError("36172", "Real Currency [{currencyCode}] not allowed in game namespace [{namespace}]");
        public static readonly ApiError Error37041 = new ApiError("37041", "Ticket booth [{boothName}] does not exist in namespace [{namespace}]");
        public static readonly ApiError Error37071 = new ApiError("37071", "Insufficient ticket in booth [{boothName}] in namespace [{namespace}]");
        public static readonly ApiError Error37121 = new ApiError("37121", "Invalid currency namespace [{namespace}] in discount config: {tips}");
        public static readonly ApiError Error37141 = new ApiError("37141", "Campaign [{campaignId}] does not exist in namespace [{namespace}]");
        public static readonly ApiError Error37142 = new ApiError("37142", "Code [{code}] does not exist in namespace [{namespace}]");
        public static readonly ApiError Error37143 = new ApiError("37143", "Batch name [{batchName}] does not exist for campaign [{campaignId}] in namespace [{namespace}].");
        public static readonly ApiError Error37144 = new ApiError("37144", "Campaign batch name does not exist for batch number [{batchNo}] campaign [{campaignId}] in namespace [{namespace}].");
        public static readonly ApiError Error37171 = new ApiError("37171", "Campaign [{name}] already exists in namespace [{namespace}]");
        public static readonly ApiError Error37172 = new ApiError("37172", "Campaign [{campaignId}] is inactive in namespace [{namespace}]");
        public static readonly ApiError Error37173 = new ApiError("37173", "Code [{code}] is inactive in namespace [{namespace}]");
        public static readonly ApiError Error37174 = new ApiError("37174", "Exceeded max redeem count per code [{maxCount}]");
        public static readonly ApiError Error37175 = new ApiError("37175", "Exceeded max redeem count per code per user [{maxCount}]");
        public static readonly ApiError Error37176 = new ApiError("37176", "Code [{code}] has been redeemed in namespace [{namespace}]");
        public static readonly ApiError Error37177 = new ApiError("37177", "Code redemption not started");
        public static readonly ApiError Error37178 = new ApiError("37178", "Code redemption already ended");
        public static readonly ApiError Error37179 = new ApiError("37179", "Exceeded max redeem count per campaign per user [{maxCount}]");
        public static readonly ApiError Error37180 = new ApiError("37180", "Code [{code}] already exists in namespace [{namespace}]");
        public static readonly ApiError Error37221 = new ApiError("37221", "Invalid key file");
        public static readonly ApiError Error37241 = new ApiError("37241", "Key group [{keyGroupId}] does not exist in namespace [{namespace}]");
        public static readonly ApiError Error37271 = new ApiError("37271", "Key group [{name}] already exists in namespace [{namespace}]");
        public static readonly ApiError Error38121 = new ApiError("38121", "Duplicate permanent item exists");
        public static readonly ApiError Error38122 = new ApiError("38122", "Subscription endDate required");
        public static readonly ApiError Error38128 = new ApiError("38128", "Cannot retry fulfillment with different payload. Please check the items list.");
        public static readonly ApiError Error38129 = new ApiError("38129", "Cannot combine same item [{itemId}] with different [{fieldName}] value");
        public static readonly ApiError Error38130 = new ApiError("38130", "Cannot fulfill item with type [{itemType}] in item [{itemIdentity}]");
        public static readonly ApiError Error38141 = new ApiError("38141", "Fulfillment script does not exist");
        public static readonly ApiError Error38145 = new ApiError("38145", "Fulfillment with transactionId [{transactionId}] does not exist");
        public static readonly ApiError Error38171 = new ApiError("38171", "Fulfillment script already exists");
        public static readonly ApiError Error39121 = new ApiError("39121", "Apple iap receipt verify failed with status code [{statusCode}]");
        public static readonly ApiError Error39122 = new ApiError("39122", "Google iap receipt is invalid with status code [{statusCode}] and error message [{message}]");
        public static readonly ApiError Error39123 = new ApiError("39123", "IAP request is not in valid application");
        public static readonly ApiError Error39124 = new ApiError("39124", "IAP request platform [{platformId}] user id is not linked with current user");
        public static readonly ApiError Error39125 = new ApiError("39125", "Invalid platform [{platformId}] user token");
        public static readonly ApiError Error39126 = new ApiError("39126", "User id [{}] in namespace [{}] doesn't link platform [{}]");
        public static readonly ApiError Error39127 = new ApiError("39127", "Invalid service label [{serviceLabel}]");
        public static readonly ApiError Error39128 = new ApiError("39128", "Steam publisher key is invalid");
        public static readonly ApiError Error39129 = new ApiError("39129", "Steam app id is invalid");
        public static readonly ApiError Error39130 = new ApiError("39130", "Invalid playstation config: [{message}]");
        public static readonly ApiError Error39131 = new ApiError("39131", "Invalid Apple IAP config under namespace [{namespace}]: [{message}]");
        public static readonly ApiError Error39132 = new ApiError("39132", "Bad request for playstation under namespace [{namespace}], reason: [{reason}].");
        public static readonly ApiError Error39133 = new ApiError("39133", "Bad request for Oculus: [{reason}]");
        public static readonly ApiError Error39134 = new ApiError("39134", "Invalid Oculus IAP config under namespace [{namespace}]: [{message}]");
        public static readonly ApiError Error39135 = new ApiError("39135", "Invalid Google IAP config under namespace [{namespace}]: [{message}]");
        public static readonly ApiError Error39136 = new ApiError("39136", "Request Apple API failed with status code [{statusCode}] and error message [{message}]");
        public static readonly ApiError Error39137 = new ApiError("39137", "Verify Apple transaction failed with status [{status}] and error message [{message}]");
        public static readonly ApiError Error39138 = new ApiError("39138", "Apple IAP version mismatch detected: The current configuration is set to  [{configVersion}], but the API version is [{apiVersion}]. Please ensure that both the configuration and API versions are aligned");
        public static readonly ApiError Error39141 = new ApiError("39141", "Apple iap receipt of transaction [{transactionId}] for productId [{}] does not exist");
        public static readonly ApiError Error39142 = new ApiError("39142", "Apple IAP config not found in namespace [{namespace}]");
        public static readonly ApiError Error39143 = new ApiError("39143", "PlayStation IAP config not found in namespace [{namespace}]");
        public static readonly ApiError Error39144 = new ApiError("39144", "Steam IAP config not found in namespace [{namespace}].");
        public static readonly ApiError Error39145 = new ApiError("39145", "XBox IAP config not found in namespace [{namespace}].");
        public static readonly ApiError Error39146 = new ApiError("39146", "Oculus IAP config not found in namespace [{namespace}].");
        public static readonly ApiError Error39147 = new ApiError("39147", "Epic IAP config not found in namespace [{namespace}].");
        public static readonly ApiError Error39148 = new ApiError("39148", "Google IAP config not found in namespace [{namespace}].");
        public static readonly ApiError Error39149 = new ApiError("39149", "Third Party Subscription Transaction [{id}] not found for user [{userId}] in the namespace [{namespace}].");
        public static readonly ApiError Error39150 = new ApiError("39150", "Third Party User Subscription [{id}] not found for user [{userId}] in the namespace [{namespace}]..");
        public static readonly ApiError Error39151 = new ApiError("39151", "IAP order no [{iapOrderNo}] not found in namespace [{namespace}].");
        public static readonly ApiError Error39171 = new ApiError("39171", "The bundle id in namespace [{namespace}] expect [{expected}] but was [{actual}]");
        public static readonly ApiError Error39172 = new ApiError("39172", "The order id in namespace [{namespace}] expect [{expected}] but was [{actual}]");
        public static readonly ApiError Error39173 = new ApiError("39173", "The purchase status of google play order [{orderId}] in namespace [{namespace}] expect [{expected}] but was [{actual}]");
        public static readonly ApiError Error39174 = new ApiError("39174", "The google iap purchase time of order [{orderId}] in namespace [{namespace}] expect [{expected}] but was [{actual}]");
        public static readonly ApiError Error39175 = new ApiError("39175", "Duplicate IAP item mapping, IAPType: [{iapType}] and id: [{iapId}]");
        public static readonly ApiError Error39183 = new ApiError("39183", "Steam transaction [{orderId}] is still pending or failed, status [{status}], please try it later");
        public static readonly ApiError Error39184 = new ApiError("39184", "Steam api exception with error code [{errorCode}] and error message [{message}]");
        public static readonly ApiError Error39185 = new ApiError("39185", "This endpoint only works on sync mode [{workSyncMode}], but current steam iap config sync mode is [{currentSyncMode}] under namespace [{namespace}]");
        public static readonly ApiError Error39221 = new ApiError("39221", "Invalid Xbox Business Partner Certificate or password: [{message}]");
        public static readonly ApiError Error39244 = new ApiError("39244", "Steam config does not exist");
        public static readonly ApiError Error39245 = new ApiError("39245", "Steam app id does not exist");
        public static readonly ApiError Error39321 = new ApiError("39321", "Invalid IAP item config namespace [{namespace}]: [{message}]");
        public static readonly ApiError Error39341 = new ApiError("39341", "IAP item config cannot be found in namespace [{namespace}]");
        public static readonly ApiError Error39441 = new ApiError("39441", "Platform dlc config cannot be found in namespace [{namespace}]");
        public static readonly ApiError Error39442 = new ApiError("39442", "DLC item config cannot be found in namespace [{namespace}]");
        public static readonly ApiError Error39471 = new ApiError("39471", "Duplicated dlc reward id [{dlcRewardId}] in namespace [{namespace}] ");
        public static readonly ApiError Error39621 = new ApiError("39621", "Steam api common exception with status code [statusCode] details: [details]");
        public static readonly ApiError Error40121 = new ApiError("40121", "Item type [{itemType}] does not support");
        public static readonly ApiError Error40122 = new ApiError("40122", "Subscription already been subscribed by user");
        public static readonly ApiError Error40123 = new ApiError("40123", "Currency [{currencyCode}] does not support");
        public static readonly ApiError Error40125 = new ApiError("40125", "Subscription [{subscriptionId}] has no real currency billing account");
        public static readonly ApiError Error40141 = new ApiError("40141", "Subscription [{subscriptionId}] does not exist");
        public static readonly ApiError Error40171 = new ApiError("40171", "Subscription [{subscriptionId}] is not active");
        public static readonly ApiError Error40172 = new ApiError("40172", "Subscription [{subscriptionId}] is charging, waiting for payment notification");
        public static readonly ApiError Error40173 = new ApiError("40173", "Subscription [{subscriptionId}] current currency [{currentCurrency}] not match request currency [{requestCurrency}]");
        public static readonly ApiError Error41171 = new ApiError("41171", "Request has different payload on previous call");
        public static readonly ApiError Error41172 = new ApiError("41172", "Request has different user id on previous call");
        public static readonly ApiError Error49147 = new ApiError("49147", "Published season does not exist");
        public static readonly ApiError Error49183 = new ApiError("49183", "Pass item does not match published season pass");
        public static readonly ApiError Error49184 = new ApiError("49184", "Tier item does not match published season tier");
        public static readonly ApiError Error49185 = new ApiError("49185", "Season has not started");
        public static readonly ApiError Error49186 = new ApiError("49186", "Pass already owned");
        public static readonly ApiError Error49187 = new ApiError("49187", "Exceed max tier count");
        public static readonly ApiError Error394721 = new ApiError("394721", "Invalid platform DLC config namespace [{namespace}]: [{message}]");
        public static readonly ApiError Error1100001 = new ApiError("1100001", "record not found: inventory");
    }

    public class ErrorEntity : AccelByte.Sdk.Core.Model
    {
        [JsonPropertyName("devStackTrace")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? DevStackTrace { get; set; }

        [JsonPropertyName("errorCode")]
        public int? ErrorCode { get; set; }

        [JsonPropertyName("errorMessage")]
        public string? ErrorMessage { get; set; }

        [JsonPropertyName("messageVariables")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public Dictionary<string, string>? MessageVariables { get; set; }

        [JsonPropertyName("requiredPermission")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public Permission? RequiredPermission { get; set; }


        public ApiError TranslateToApiError()
        {
            string errorCode =
                ErrorCode != null ? ErrorCode.Value.ToString() :
                "";

            string errorMessage =
                ErrorMessage != null ? ErrorMessage.ToString() :
                "";

            return new ApiError(errorCode, errorMessage);
        }
    }

    public class FulfillmentV2Result : AccelByte.Sdk.Core.Model
    {
        [JsonPropertyName("creditSummaries")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public List<CreditSummary>? CreditSummaries { get; set; }

        [JsonPropertyName("entitlementSummaries")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public List<EntitlementSummary>? EntitlementSummaries { get; set; }

        [JsonPropertyName("id")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? Id { get; set; }

        [JsonPropertyName("items")]
        public List<FulfillmentItem>? Items { get; set; }

        [JsonPropertyName("namespace")]
        public string? Namespace { get; set; }

        [JsonPropertyName("state")]
        [JsonStringEnum]
        public FulfillmentV2ResultState? State { get; set; }

        [JsonPropertyName("stateInfo")]
        public FulfillmentStateInfo? StateInfo { get; set; }

        [JsonPropertyName("subscriptionSummaries")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public List<SubscriptionSummary>? SubscriptionSummaries { get; set; }

        [JsonPropertyName("transactionId")]
        public string? TransactionId { get; set; }

        [JsonPropertyName("userId")]
        public string? UserId { get; set; }


        public ApiError TranslateToApiError()
        {
            string errorCode =
                "";

            string errorMessage =
                "";

            return new ApiError(errorCode, errorMessage);
        }
    }

    public class RevokeFulfillmentV2Result : AccelByte.Sdk.Core.Model
    {
        [JsonPropertyName("creditRevocations")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public List<CreditRevocation>? CreditRevocations { get; set; }

        [JsonPropertyName("entitlementRevocations")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public List<EntitlementRevocation>? EntitlementRevocations { get; set; }

        [JsonPropertyName("id")]
        public string? Id { get; set; }

        [JsonPropertyName("itemRevocations")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public List<ItemRevocation>? ItemRevocations { get; set; }

        [JsonPropertyName("items")]
        public List<FulfillmentItem>? Items { get; set; }

        [JsonPropertyName("namespace")]
        public string? Namespace { get; set; }

        [JsonPropertyName("state")]
        [JsonStringEnum]
        public RevokeFulfillmentV2ResultState? State { get; set; }

        [JsonPropertyName("stateInfo")]
        public FulfillmentStateInfo? StateInfo { get; set; }

        [JsonPropertyName("transactionId")]
        public string? TransactionId { get; set; }

        [JsonPropertyName("userId")]
        public string? UserId { get; set; }


        public ApiError TranslateToApiError()
        {
            string errorCode =
                "";

            string errorMessage =
                "";

            return new ApiError(errorCode, errorMessage);
        }
    }

    public class ValidationErrorEntity : AccelByte.Sdk.Core.Model
    {
        [JsonPropertyName("errorCode")]
        public int? ErrorCode { get; set; }

        [JsonPropertyName("errorMessage")]
        public string? ErrorMessage { get; set; }

        [JsonPropertyName("errors")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public List<FieldValidationError>? Errors { get; set; }


        public ApiError TranslateToApiError()
        {
            string errorCode =
                ErrorCode != null ? ErrorCode.Value.ToString() :
                "";

            string errorMessage =
                ErrorMessage != null ? ErrorMessage.ToString() :
                "";

            return new ApiError(errorCode, errorMessage);
        }
    }

}