// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;

using AccelByte.Sdk.Api.Csm.Model;
using AccelByte.Sdk.Api.Csm.Operation;

namespace AccelByte.Sdk.Api.Csm.Wrapper
{
    public class NotificationSubscription
    {
        private readonly IAccelByteSdk _sdk;

        private string _CustomBasePath = String.Empty;

        public NotificationSubscription(IAccelByteSdk sdk)
        {
            _sdk = sdk;
        }

        public NotificationSubscription(IAccelByteSdk sdk, string customBasePath)
        {
            _sdk = sdk;
            _CustomBasePath = customBasePath;
        }

        #region Operation Builders
        public GetNotificationSubscriberListV2.GetNotificationSubscriberListV2Builder GetNotificationSubscriberListV2Op
        {
            get
            {
                var opBuilder = new Operation.GetNotificationSubscriberListV2.GetNotificationSubscriberListV2Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public BulkSaveSubscriptionAppNotificationV2.BulkSaveSubscriptionAppNotificationV2Builder BulkSaveSubscriptionAppNotificationV2Op
        {
            get
            {
                var opBuilder = new Operation.BulkSaveSubscriptionAppNotificationV2.BulkSaveSubscriptionAppNotificationV2Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public SubscribeAppNotificationV2.SubscribeAppNotificationV2Builder SubscribeAppNotificationV2Op
        {
            get
            {
                var opBuilder = new Operation.SubscribeAppNotificationV2.SubscribeAppNotificationV2Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public GetSubscriptionV2Handler.GetSubscriptionV2HandlerBuilder GetSubscriptionV2HandlerOp
        {
            get
            {
                var opBuilder = new Operation.GetSubscriptionV2Handler.GetSubscriptionV2HandlerBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public SubscribeV2Handler.SubscribeV2HandlerBuilder SubscribeV2HandlerOp
        {
            get
            {
                var opBuilder = new Operation.SubscribeV2Handler.SubscribeV2HandlerBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public UnsubscribeV2Handler.UnsubscribeV2HandlerBuilder UnsubscribeV2HandlerOp
        {
            get
            {
                var opBuilder = new Operation.UnsubscribeV2Handler.UnsubscribeV2HandlerBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public DeleteSubscriptionAppNotificationByUserIDV2.DeleteSubscriptionAppNotificationByUserIDV2Builder DeleteSubscriptionAppNotificationByUserIDV2Op
        {
            get
            {
                var opBuilder = new Operation.DeleteSubscriptionAppNotificationByUserIDV2.DeleteSubscriptionAppNotificationByUserIDV2Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        [Obsolete(DiagnosticId = "ab_deprecated_operation_wrapper")]
        public DeleteSubscriptionAppNotificationV2.DeleteSubscriptionAppNotificationV2Builder DeleteSubscriptionAppNotificationV2Op
        {
            get
            {
                var opBuilder = new Operation.DeleteSubscriptionAppNotificationV2.DeleteSubscriptionAppNotificationV2Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        #endregion

        public GetNotificationSubscriberListV2.Response GetNotificationSubscriberListV2(GetNotificationSubscriberListV2 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<GetNotificationSubscriberListV2.Response> GetNotificationSubscriberListV2Async(GetNotificationSubscriberListV2 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public BulkSaveSubscriptionAppNotificationV2.Response BulkSaveSubscriptionAppNotificationV2(BulkSaveSubscriptionAppNotificationV2 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<BulkSaveSubscriptionAppNotificationV2.Response> BulkSaveSubscriptionAppNotificationV2Async(BulkSaveSubscriptionAppNotificationV2 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public SubscribeAppNotificationV2.Response SubscribeAppNotificationV2(SubscribeAppNotificationV2 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<SubscribeAppNotificationV2.Response> SubscribeAppNotificationV2Async(SubscribeAppNotificationV2 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public GetSubscriptionV2Handler.Response GetSubscriptionV2Handler(GetSubscriptionV2Handler input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<GetSubscriptionV2Handler.Response> GetSubscriptionV2HandlerAsync(GetSubscriptionV2Handler input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public SubscribeV2Handler.Response SubscribeV2Handler(SubscribeV2Handler input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<SubscribeV2Handler.Response> SubscribeV2HandlerAsync(SubscribeV2Handler input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public UnsubscribeV2Handler.Response UnsubscribeV2Handler(UnsubscribeV2Handler input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<UnsubscribeV2Handler.Response> UnsubscribeV2HandlerAsync(UnsubscribeV2Handler input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public DeleteSubscriptionAppNotificationByUserIDV2.Response DeleteSubscriptionAppNotificationByUserIDV2(DeleteSubscriptionAppNotificationByUserIDV2 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<DeleteSubscriptionAppNotificationByUserIDV2.Response> DeleteSubscriptionAppNotificationByUserIDV2Async(DeleteSubscriptionAppNotificationByUserIDV2 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
#pragma warning disable ab_deprecated_operation
        [Obsolete(DiagnosticId = "ab_deprecated_operation_wrapper")]
        public DeleteSubscriptionAppNotificationV2.Response DeleteSubscriptionAppNotificationV2(DeleteSubscriptionAppNotificationV2 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<DeleteSubscriptionAppNotificationV2.Response> DeleteSubscriptionAppNotificationV2Async(DeleteSubscriptionAppNotificationV2 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
#pragma warning restore ab_deprecated_operation
    }
}