// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Csm.Model;

namespace AccelByte.Sdk.Api.Csm.Operation
{
    /// <summary>
    /// DeleteSubscriptionAppNotificationV3
    ///
    /// Required permission : `ADMIN:NAMESPACE:{namespace}:EXTEND:APP:ALERT:SUBSCRIPTION [DELETE]`
    /// 
    /// Remove a user from the notification subscription using either user ID or email address.
    /// Only one of them should be provided.
    /// </summary>
    public class DeleteSubscriptionAppNotificationV3 : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static DeleteSubscriptionAppNotificationV3Builder Builder { get => new DeleteSubscriptionAppNotificationV3Builder(); }

        public class DeleteSubscriptionAppNotificationV3Builder
            : OperationBuilder<DeleteSubscriptionAppNotificationV3Builder>
        {

            public string? EmailAddress { get; set; }

            public string? UserId { get; set; }





            internal DeleteSubscriptionAppNotificationV3Builder() { }

            internal DeleteSubscriptionAppNotificationV3Builder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }


            public DeleteSubscriptionAppNotificationV3Builder SetEmailAddress(string _emailAddress)
            {
                EmailAddress = _emailAddress;
                return this;
            }

            public DeleteSubscriptionAppNotificationV3Builder SetUserId(string _userId)
            {
                UserId = _userId;
                return this;
            }





            public DeleteSubscriptionAppNotificationV3 Build(
                string app,
                string namespace_
            )
            {
                DeleteSubscriptionAppNotificationV3 op = new DeleteSubscriptionAppNotificationV3(this,
                    app,                    
                    namespace_                    
                );

                op.SetBaseFields<DeleteSubscriptionAppNotificationV3Builder>(this);
                return op;
            }

            public DeleteSubscriptionAppNotificationV3.Response Execute(
                string app,
                string namespace_
            )
            {
                DeleteSubscriptionAppNotificationV3 op = Build(
                    app,
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
            public async Task<DeleteSubscriptionAppNotificationV3.Response> ExecuteAsync(
                string app,
                string namespace_
            )
            {
                DeleteSubscriptionAppNotificationV3 op = Build(
                    app,
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
        }

        private DeleteSubscriptionAppNotificationV3(DeleteSubscriptionAppNotificationV3Builder builder,
            string app,
            string namespace_
        )
        {
            PathParams["app"] = app;
            PathParams["namespace"] = namespace_;
            
            if (builder.EmailAddress is not null) QueryParams["emailAddress"] = builder.EmailAddress;
            if (builder.UserId is not null) QueryParams["userId"] = builder.UserId;
            

            
            
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        #region Response Part        
        public class Response : ApiResponse
        {

            public ResponseErrorResponse? Error401 { get; set; } = null;

            public ResponseErrorResponse? Error403 { get; set; } = null;

            public ResponseErrorResponse? Error404 { get; set; } = null;

            public ResponseErrorResponse? Error500 { get; set; } = null;


            protected override string GetFullOperationId() => "Csm::NotificationSubscriptionV3::DeleteSubscriptionAppNotificationV3";
        }

        #endregion

        public DeleteSubscriptionAppNotificationV3(
            string app,            
            string namespace_,            
            string? emailAddress,            
            string? userId            
        )
        {
            PathParams["app"] = app;
            PathParams["namespace"] = namespace_;
            
            if (emailAddress is not null) QueryParams["emailAddress"] = emailAddress;
            if (userId is not null) QueryParams["userId"] = userId;
            

            
            
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/csm/v3/admin/namespaces/{namespace}/apps/{app}/subscriptions";

        public override HttpMethod Method => HttpMethod.Delete;

        public override List<string> Consumes => new() { "application/json" };

        public override List<string> Produces => new() { "application/json" };
        
        public DeleteSubscriptionAppNotificationV3.Response ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            var response = new DeleteSubscriptionAppNotificationV3.Response()
            {
                StatusCode = code,
                ContentType = contentType
            };

            int statusCode = (int)code;
            if (statusCode >= 200 && statusCode < 300)
            {
                response.IsSuccess = true;
            }
            else if (code == (HttpStatusCode)401)
            {
                response.Error401 = JsonSerializer.Deserialize<ResponseErrorResponse>(payload, ResponseJsonOptions);
                response.Error = response.Error401!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)403)
            {
                response.Error403 = JsonSerializer.Deserialize<ResponseErrorResponse>(payload, ResponseJsonOptions);
                response.Error = response.Error403!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)404)
            {
                response.Error404 = JsonSerializer.Deserialize<ResponseErrorResponse>(payload, ResponseJsonOptions);
                response.Error = response.Error404!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)500)
            {
                response.Error500 = JsonSerializer.Deserialize<ResponseErrorResponse>(payload, ResponseJsonOptions);
                response.Error = response.Error500!.TranslateToApiError();
            }

            return response;
        }
    }

}