// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;

using AccelByte.Sdk.Api.Seasonpass.Model;
using AccelByte.Sdk.Api.Seasonpass.Operation;

namespace AccelByte.Sdk.Api.Seasonpass.Wrapper
{
    public class Pass
    {
        private readonly IAccelByteSdk _sdk;

        public Pass(IAccelByteSdk sdk)
        {
            _sdk = sdk;
        }

        #region Operation Builders
        public QueryPasses.QueryPassesBuilder QueryPassesOp
        {
            get { return new Operation.QueryPasses.QueryPassesBuilder(_sdk); }
        }
        public CreatePass.CreatePassBuilder CreatePassOp
        {
            get { return new Operation.CreatePass.CreatePassBuilder(_sdk); }
        }
        public GetPass.GetPassBuilder GetPassOp
        {
            get { return new Operation.GetPass.GetPassBuilder(_sdk); }
        }
        public DeletePass.DeletePassBuilder DeletePassOp
        {
            get { return new Operation.DeletePass.DeletePassBuilder(_sdk); }
        }
        public UpdatePass.UpdatePassBuilder UpdatePassOp
        {
            get { return new Operation.UpdatePass.UpdatePassBuilder(_sdk); }
        }
        public GrantUserPass.GrantUserPassBuilder GrantUserPassOp
        {
            get { return new Operation.GrantUserPass.GrantUserPassBuilder(_sdk); }
        }
        #endregion

        public List<Model.PassInfo>? QueryPasses(QueryPasses input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<List<Model.PassInfo>?> QueryPassesAsync(QueryPasses input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.PassInfo? CreatePass(CreatePass input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.PassInfo?> CreatePassAsync(CreatePass input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.PassInfo? GetPass(GetPass input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.PassInfo?> GetPassAsync(GetPass input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public void DeletePass(DeletePass input)
        {
            var response = _sdk.RunRequest(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task DeletePassAsync(DeletePass input)
        {
            var response = await _sdk.RunRequestAsync(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.PassInfo? UpdatePass(UpdatePass input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.PassInfo?> UpdatePassAsync(UpdatePass input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.UserSeasonSummary? GrantUserPass(GrantUserPass input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.UserSeasonSummary?> GrantUserPassAsync(GrantUserPass input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
    }
}