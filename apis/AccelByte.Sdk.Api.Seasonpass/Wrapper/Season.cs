// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;

using AccelByte.Sdk.Api.Seasonpass.Model;
using AccelByte.Sdk.Api.Seasonpass.Operation;

namespace AccelByte.Sdk.Api.Seasonpass.Wrapper
{
    public class Season
    {
        private readonly IAccelByteSdk _sdk;

        public Season(IAccelByteSdk sdk)
        {
            _sdk = sdk;
        }

        #region Operation Builders
        public QuerySeasons.QuerySeasonsBuilder QuerySeasonsOp
        {
            get { return new Operation.QuerySeasons.QuerySeasonsBuilder(_sdk); }
        }
        public CreateSeason.CreateSeasonBuilder CreateSeasonOp
        {
            get { return new Operation.CreateSeason.CreateSeasonBuilder(_sdk); }
        }
        public GetCurrentSeason.GetCurrentSeasonBuilder GetCurrentSeasonOp
        {
            get { return new Operation.GetCurrentSeason.GetCurrentSeasonBuilder(_sdk); }
        }
        public BulkGetUserSeasonProgression.BulkGetUserSeasonProgressionBuilder BulkGetUserSeasonProgressionOp
        {
            get { return new Operation.BulkGetUserSeasonProgression.BulkGetUserSeasonProgressionBuilder(_sdk); }
        }
        public GetSeason.GetSeasonBuilder GetSeasonOp
        {
            get { return new Operation.GetSeason.GetSeasonBuilder(_sdk); }
        }
        public DeleteSeason.DeleteSeasonBuilder DeleteSeasonOp
        {
            get { return new Operation.DeleteSeason.DeleteSeasonBuilder(_sdk); }
        }
        public UpdateSeason.UpdateSeasonBuilder UpdateSeasonOp
        {
            get { return new Operation.UpdateSeason.UpdateSeasonBuilder(_sdk); }
        }
        public CloneSeason.CloneSeasonBuilder CloneSeasonOp
        {
            get { return new Operation.CloneSeason.CloneSeasonBuilder(_sdk); }
        }
        public GetFullSeason.GetFullSeasonBuilder GetFullSeasonOp
        {
            get { return new Operation.GetFullSeason.GetFullSeasonBuilder(_sdk); }
        }
        public PublishSeason.PublishSeasonBuilder PublishSeasonOp
        {
            get { return new Operation.PublishSeason.PublishSeasonBuilder(_sdk); }
        }
        public RetireSeason.RetireSeasonBuilder RetireSeasonOp
        {
            get { return new Operation.RetireSeason.RetireSeasonBuilder(_sdk); }
        }
        public UnpublishSeason.UnpublishSeasonBuilder UnpublishSeasonOp
        {
            get { return new Operation.UnpublishSeason.UnpublishSeasonBuilder(_sdk); }
        }
        public GetUserParticipatedSeasons.GetUserParticipatedSeasonsBuilder GetUserParticipatedSeasonsOp
        {
            get { return new Operation.GetUserParticipatedSeasons.GetUserParticipatedSeasonsBuilder(_sdk); }
        }
        public ExistsAnyPassByPassCodes.ExistsAnyPassByPassCodesBuilder ExistsAnyPassByPassCodesOp
        {
            get { return new Operation.ExistsAnyPassByPassCodes.ExistsAnyPassByPassCodesBuilder(_sdk); }
        }
        public GetCurrentUserSeasonProgression.GetCurrentUserSeasonProgressionBuilder GetCurrentUserSeasonProgressionOp
        {
            get { return new Operation.GetCurrentUserSeasonProgression.GetCurrentUserSeasonProgressionBuilder(_sdk); }
        }
        public CheckSeasonPurchasable.CheckSeasonPurchasableBuilder CheckSeasonPurchasableOp
        {
            get { return new Operation.CheckSeasonPurchasable.CheckSeasonPurchasableBuilder(_sdk); }
        }
        public ResetUserSeason.ResetUserSeasonBuilder ResetUserSeasonOp
        {
            get { return new Operation.ResetUserSeason.ResetUserSeasonBuilder(_sdk); }
        }
        public QueryUserExpGrantHistory.QueryUserExpGrantHistoryBuilder QueryUserExpGrantHistoryOp
        {
            get { return new Operation.QueryUserExpGrantHistory.QueryUserExpGrantHistoryBuilder(_sdk); }
        }
        public QueryUserExpGrantHistoryTag.QueryUserExpGrantHistoryTagBuilder QueryUserExpGrantHistoryTagOp
        {
            get { return new Operation.QueryUserExpGrantHistoryTag.QueryUserExpGrantHistoryTagBuilder(_sdk); }
        }
        public GetUserSeason.GetUserSeasonBuilder GetUserSeasonOp
        {
            get { return new Operation.GetUserSeason.GetUserSeasonBuilder(_sdk); }
        }
        public PublicGetCurrentSeason.PublicGetCurrentSeasonBuilder PublicGetCurrentSeasonOp
        {
            get { return new Operation.PublicGetCurrentSeason.PublicGetCurrentSeasonBuilder(_sdk); }
        }
        public PublicGetCurrentUserSeason.PublicGetCurrentUserSeasonBuilder PublicGetCurrentUserSeasonOp
        {
            get { return new Operation.PublicGetCurrentUserSeason.PublicGetCurrentUserSeasonBuilder(_sdk); }
        }
        public PublicGetUserSeason.PublicGetUserSeasonBuilder PublicGetUserSeasonOp
        {
            get { return new Operation.PublicGetUserSeason.PublicGetUserSeasonBuilder(_sdk); }
        }
        #endregion

        public Model.ListSeasonInfoPagingSlicedResult? QuerySeasons(QuerySeasons input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ListSeasonInfoPagingSlicedResult?> QuerySeasonsAsync(QuerySeasons input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.SeasonInfo? CreateSeason(CreateSeason input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.SeasonInfo?> CreateSeasonAsync(CreateSeason input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.SeasonSummary? GetCurrentSeason(GetCurrentSeason input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.SeasonSummary?> GetCurrentSeasonAsync(GetCurrentSeason input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public List<Model.UserSeasonSummary>? BulkGetUserSeasonProgression(BulkGetUserSeasonProgression input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<List<Model.UserSeasonSummary>?> BulkGetUserSeasonProgressionAsync(BulkGetUserSeasonProgression input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.SeasonInfo? GetSeason(GetSeason input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.SeasonInfo?> GetSeasonAsync(GetSeason input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public void DeleteSeason(DeleteSeason input)
        {
            var response = _sdk.RunRequest(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task DeleteSeasonAsync(DeleteSeason input)
        {
            var response = await _sdk.RunRequestAsync(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.SeasonInfo? UpdateSeason(UpdateSeason input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.SeasonInfo?> UpdateSeasonAsync(UpdateSeason input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.SeasonInfo? CloneSeason(CloneSeason input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.SeasonInfo?> CloneSeasonAsync(CloneSeason input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.FullSeasonInfo? GetFullSeason(GetFullSeason input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.FullSeasonInfo?> GetFullSeasonAsync(GetFullSeason input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.SeasonInfo? PublishSeason(PublishSeason input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.SeasonInfo?> PublishSeasonAsync(PublishSeason input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.SeasonInfo? RetireSeason(RetireSeason input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.SeasonInfo?> RetireSeasonAsync(RetireSeason input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.SeasonInfo? UnpublishSeason(UnpublishSeason input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.SeasonInfo?> UnpublishSeasonAsync(UnpublishSeason input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ListUserSeasonInfoPagingSlicedResult? GetUserParticipatedSeasons(GetUserParticipatedSeasons input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ListUserSeasonInfoPagingSlicedResult?> GetUserParticipatedSeasonsAsync(GetUserParticipatedSeasons input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.Ownership? ExistsAnyPassByPassCodes(ExistsAnyPassByPassCodes input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.Ownership?> ExistsAnyPassByPassCodesAsync(ExistsAnyPassByPassCodes input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.UserSeasonSummary? GetCurrentUserSeasonProgression(GetCurrentUserSeasonProgression input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.UserSeasonSummary?> GetCurrentUserSeasonProgressionAsync(GetCurrentUserSeasonProgression input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public void CheckSeasonPurchasable(CheckSeasonPurchasable input)
        {
            var response = _sdk.RunRequest(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task CheckSeasonPurchasableAsync(CheckSeasonPurchasable input)
        {
            var response = await _sdk.RunRequestAsync(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public void ResetUserSeason(ResetUserSeason input)
        {
            var response = _sdk.RunRequest(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task ResetUserSeasonAsync(ResetUserSeason input)
        {
            var response = await _sdk.RunRequestAsync(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ExpGrantHistoryPagingSlicedResult? QueryUserExpGrantHistory(QueryUserExpGrantHistory input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ExpGrantHistoryPagingSlicedResult?> QueryUserExpGrantHistoryAsync(QueryUserExpGrantHistory input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ReasonTagsResult? QueryUserExpGrantHistoryTag(QueryUserExpGrantHistoryTag input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ReasonTagsResult?> QueryUserExpGrantHistoryTagAsync(QueryUserExpGrantHistoryTag input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ClaimableUserSeasonInfo? GetUserSeason(GetUserSeason input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ClaimableUserSeasonInfo?> GetUserSeasonAsync(GetUserSeason input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public Model.ClaimableUserSeasonInfo<T1, T2>? GetUserSeason<T1, T2>(GetUserSeason input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1, T2>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ClaimableUserSeasonInfo<T1, T2>?> GetUserSeasonAsync<T1, T2>(GetUserSeason input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1, T2>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.LocalizedSeasonInfo? PublicGetCurrentSeason(PublicGetCurrentSeason input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.LocalizedSeasonInfo?> PublicGetCurrentSeasonAsync(PublicGetCurrentSeason input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ClaimableUserSeasonInfo? PublicGetCurrentUserSeason(PublicGetCurrentUserSeason input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ClaimableUserSeasonInfo?> PublicGetCurrentUserSeasonAsync(PublicGetCurrentUserSeason input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public Model.ClaimableUserSeasonInfo<T1, T2>? PublicGetCurrentUserSeason<T1, T2>(PublicGetCurrentUserSeason input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1, T2>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ClaimableUserSeasonInfo<T1, T2>?> PublicGetCurrentUserSeasonAsync<T1, T2>(PublicGetCurrentUserSeason input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1, T2>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ClaimableUserSeasonInfo? PublicGetUserSeason(PublicGetUserSeason input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ClaimableUserSeasonInfo?> PublicGetUserSeasonAsync(PublicGetUserSeason input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public Model.ClaimableUserSeasonInfo<T1, T2>? PublicGetUserSeason<T1, T2>(PublicGetUserSeason input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1, T2>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ClaimableUserSeasonInfo<T1, T2>?> PublicGetUserSeasonAsync<T1, T2>(PublicGetUserSeason input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1, T2>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
    }
}