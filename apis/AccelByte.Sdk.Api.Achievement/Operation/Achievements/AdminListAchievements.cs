// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Achievement.Model;

namespace AccelByte.Sdk.Api.Achievement.Operation
{
    /// <summary>
    /// AdminListAchievements
    ///
    /// Required permission
    /// `ADMIN:NAMESPACE:{namespace}:ACHIEVEMENT [READ]` and scope `social`
    /// </summary>
    public class AdminListAchievements : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static AdminListAchievementsBuilder Builder { get => new AdminListAchievementsBuilder(); }

        public class AdminListAchievementsBuilder
            : OperationBuilder<AdminListAchievementsBuilder>
        {

            public bool? Global { get; set; }

            public long? Limit { get; set; }

            public long? Offset { get; set; }

            public AdminListAchievementsSortBy? SortBy { get; set; }

            public List<string>? Tags { get; set; }





            internal AdminListAchievementsBuilder() { }

            internal AdminListAchievementsBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }


            public AdminListAchievementsBuilder SetGlobal(bool _global)
            {
                Global = _global;
                return this;
            }

            public AdminListAchievementsBuilder SetLimit(long _limit)
            {
                Limit = _limit;
                return this;
            }

            public AdminListAchievementsBuilder SetOffset(long _offset)
            {
                Offset = _offset;
                return this;
            }

            public AdminListAchievementsBuilder SetSortBy(AdminListAchievementsSortBy _sortBy)
            {
                SortBy = _sortBy;
                return this;
            }

            public AdminListAchievementsBuilder SetTags(List<string> _tags)
            {
                Tags = _tags;
                return this;
            }





            public AdminListAchievements Build(
                string namespace_
            )
            {
                AdminListAchievements op = new AdminListAchievements(this,
                    namespace_                    
                );

                op.SetBaseFields<AdminListAchievementsBuilder>(this);
                return op;
            }

            public AdminListAchievements.Response Execute(
                string namespace_
            )
            {
                AdminListAchievements op = Build(
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
            public async Task<AdminListAchievements.Response> ExecuteAsync(
                string namespace_
            )
            {
                AdminListAchievements op = Build(
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
        }

        private AdminListAchievements(AdminListAchievementsBuilder builder,
            string namespace_
        )
        {
            PathParams["namespace"] = namespace_;
            
            if (builder.Global != null) QueryParams["global"] = Convert.ToString(builder.Global)!;
            if (builder.Limit != null) QueryParams["limit"] = Convert.ToString(builder.Limit)!;
            if (builder.Offset != null) QueryParams["offset"] = Convert.ToString(builder.Offset)!;
            if (builder.SortBy is not null) QueryParams["sortBy"] = builder.SortBy.Value;
            if (builder.Tags is not null) QueryParams["tags"] = builder.Tags;
            

            
            CollectionFormatMap["tags"] = "csv";
            
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        #region Response Part        
        public class Response : ApiResponse<Model.ModelsPaginatedAchievementResponse>
        {

            public ResponseError? Error400 { get; set; } = null;

            public ResponseError? Error401 { get; set; } = null;

            public ResponseError? Error404 { get; set; } = null;

            public ResponseError? Error500 { get; set; } = null;


            protected override string GetFullOperationId() => "Achievement::Achievements::AdminListAchievements";
        }

        #endregion

        public AdminListAchievements(
            string namespace_,            
            bool? global,            
            long? limit,            
            long? offset,            
            AdminListAchievementsSortBy? sortBy,            
            List<string>? tags            
        )
        {
            PathParams["namespace"] = namespace_;
            
            if (global != null) QueryParams["global"] = Convert.ToString(global)!;
            if (limit != null) QueryParams["limit"] = Convert.ToString(limit)!;
            if (offset != null) QueryParams["offset"] = Convert.ToString(offset)!;
            if (sortBy is not null) QueryParams["sortBy"] = sortBy.Value;
            if (tags is not null) QueryParams["tags"] = tags;
            

            
            CollectionFormatMap["tags"] = "csv";
            
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/achievement/v1/admin/namespaces/{namespace}/achievements";

        public override HttpMethod Method => HttpMethod.Get;

        public override List<string> Consumes => new() { "application/json" };

        public override List<string> Produces => new() { "application/json" };
        
        public AdminListAchievements.Response ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            var response = new AdminListAchievements.Response()
            {
                StatusCode = code,
                ContentType = contentType
            };

            if (code == (HttpStatusCode)204)
            {
                response.IsSuccess = true;
            }
            else if ((code == (HttpStatusCode)201) || (code == (HttpStatusCode)202) || (code == (HttpStatusCode)200))
            {
                response.Data = JsonSerializer.Deserialize<Model.ModelsPaginatedAchievementResponse>(payload, ResponseJsonOptions);
                response.IsSuccess = true;
            }
            else if (code == (HttpStatusCode)400)
            {
                response.Error400 = JsonSerializer.Deserialize<ResponseError>(payload, ResponseJsonOptions);
                response.Error = response.Error400!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)401)
            {
                response.Error401 = JsonSerializer.Deserialize<ResponseError>(payload, ResponseJsonOptions);
                response.Error = response.Error401!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)404)
            {
                response.Error404 = JsonSerializer.Deserialize<ResponseError>(payload, ResponseJsonOptions);
                response.Error = response.Error404!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)500)
            {
                response.Error500 = JsonSerializer.Deserialize<ResponseError>(payload, ResponseJsonOptions);
                response.Error = response.Error500!.TranslateToApiError();
            }

            return response;
        }
    }

    public class AdminListAchievementsSortBy : StringEnum<AdminListAchievementsSortBy>
    {
        public static readonly AdminListAchievementsSortBy ListOrder
            = new AdminListAchievementsSortBy("listOrder");

        public static readonly AdminListAchievementsSortBy ListOrderasc
            = new AdminListAchievementsSortBy("listOrder:asc");

        public static readonly AdminListAchievementsSortBy ListOrderdesc
            = new AdminListAchievementsSortBy("listOrder:desc");

        public static readonly AdminListAchievementsSortBy CreatedAt
            = new AdminListAchievementsSortBy("createdAt");

        public static readonly AdminListAchievementsSortBy CreatedAtasc
            = new AdminListAchievementsSortBy("createdAt:asc");

        public static readonly AdminListAchievementsSortBy CreatedAtdesc
            = new AdminListAchievementsSortBy("createdAt:desc");

        public static readonly AdminListAchievementsSortBy UpdatedAt
            = new AdminListAchievementsSortBy("updatedAt");

        public static readonly AdminListAchievementsSortBy UpdatedAtasc
            = new AdminListAchievementsSortBy("updatedAt:asc");

        public static readonly AdminListAchievementsSortBy UpdatedAtdesc
            = new AdminListAchievementsSortBy("updatedAt:desc");


        public static implicit operator AdminListAchievementsSortBy(string value)
        {
            return NewValue(value);
        }

        public AdminListAchievementsSortBy(string enumValue)
            : base(enumValue)
        {

        }
    }

}