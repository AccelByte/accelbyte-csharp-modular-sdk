// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;

using AccelByte.Sdk.Api.Achievement.Model;
using AccelByte.Sdk.Api.Achievement.Operation;

namespace AccelByte.Sdk.Api.Achievement.Wrapper
{
    public class UserAchievements
    {
        private readonly IAccelByteSdk _sdk;

        private string _CustomBasePath = String.Empty;

        public UserAchievements(IAccelByteSdk sdk)
        {
            _sdk = sdk;
        }

        public UserAchievements(IAccelByteSdk sdk, string customBasePath)
        {
            _sdk = sdk;
            _CustomBasePath = customBasePath;
        }

        #region Operation Builders
        public AdminListUserAchievements.AdminListUserAchievementsBuilder AdminListUserAchievementsOp
        {
            get
            {
                var opBuilder = new Operation.AdminListUserAchievements.AdminListUserAchievementsBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminBulkUnlockAchievement.AdminBulkUnlockAchievementBuilder AdminBulkUnlockAchievementOp
        {
            get
            {
                var opBuilder = new Operation.AdminBulkUnlockAchievement.AdminBulkUnlockAchievementBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminResetAchievement.AdminResetAchievementBuilder AdminResetAchievementOp
        {
            get
            {
                var opBuilder = new Operation.AdminResetAchievement.AdminResetAchievementBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminUnlockAchievement.AdminUnlockAchievementBuilder AdminUnlockAchievementOp
        {
            get
            {
                var opBuilder = new Operation.AdminUnlockAchievement.AdminUnlockAchievementBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public PublicListUserAchievements.PublicListUserAchievementsBuilder PublicListUserAchievementsOp
        {
            get
            {
                var opBuilder = new Operation.PublicListUserAchievements.PublicListUserAchievementsBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public PublicBulkUnlockAchievement.PublicBulkUnlockAchievementBuilder PublicBulkUnlockAchievementOp
        {
            get
            {
                var opBuilder = new Operation.PublicBulkUnlockAchievement.PublicBulkUnlockAchievementBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public PublicUnlockAchievement.PublicUnlockAchievementBuilder PublicUnlockAchievementOp
        {
            get
            {
                var opBuilder = new Operation.PublicUnlockAchievement.PublicUnlockAchievementBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        #endregion

        public AdminListUserAchievements.Response AdminListUserAchievements(AdminListUserAchievements input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminListUserAchievements.Response> AdminListUserAchievementsAsync(AdminListUserAchievements input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminBulkUnlockAchievement.Response AdminBulkUnlockAchievement(AdminBulkUnlockAchievement input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminBulkUnlockAchievement.Response> AdminBulkUnlockAchievementAsync(AdminBulkUnlockAchievement input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminResetAchievement.Response AdminResetAchievement(AdminResetAchievement input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminResetAchievement.Response> AdminResetAchievementAsync(AdminResetAchievement input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminUnlockAchievement.Response AdminUnlockAchievement(AdminUnlockAchievement input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminUnlockAchievement.Response> AdminUnlockAchievementAsync(AdminUnlockAchievement input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public PublicListUserAchievements.Response PublicListUserAchievements(PublicListUserAchievements input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<PublicListUserAchievements.Response> PublicListUserAchievementsAsync(PublicListUserAchievements input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public PublicBulkUnlockAchievement.Response PublicBulkUnlockAchievement(PublicBulkUnlockAchievement input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<PublicBulkUnlockAchievement.Response> PublicBulkUnlockAchievementAsync(PublicBulkUnlockAchievement input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public PublicUnlockAchievement.Response PublicUnlockAchievement(PublicUnlockAchievement input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<PublicUnlockAchievement.Response> PublicUnlockAchievementAsync(PublicUnlockAchievement input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
    }
}