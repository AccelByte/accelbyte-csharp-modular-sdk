// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;

using AccelByte.Sdk.Api.Achievement.Model;
using AccelByte.Sdk.Api.Achievement.Operation;

namespace AccelByte.Sdk.Api.Achievement.Wrapper
{
    public class UserAchievements
    {
        private readonly IAccelByteSdk _sdk;

        public UserAchievements(IAccelByteSdk sdk)
        {
            _sdk = sdk;
        }

        #region Operation Builders
        public AdminListUserAchievements.AdminListUserAchievementsBuilder AdminListUserAchievementsOp
        {
            get { return new Operation.AdminListUserAchievements.AdminListUserAchievementsBuilder(_sdk); }
        }
        public AdminResetAchievement.AdminResetAchievementBuilder AdminResetAchievementOp
        {
            get { return new Operation.AdminResetAchievement.AdminResetAchievementBuilder(_sdk); }
        }
        public AdminUnlockAchievement.AdminUnlockAchievementBuilder AdminUnlockAchievementOp
        {
            get { return new Operation.AdminUnlockAchievement.AdminUnlockAchievementBuilder(_sdk); }
        }
        public PublicListUserAchievements.PublicListUserAchievementsBuilder PublicListUserAchievementsOp
        {
            get { return new Operation.PublicListUserAchievements.PublicListUserAchievementsBuilder(_sdk); }
        }
        public PublicUnlockAchievement.PublicUnlockAchievementBuilder PublicUnlockAchievementOp
        {
            get { return new Operation.PublicUnlockAchievement.PublicUnlockAchievementBuilder(_sdk); }
        }
        #endregion

        public Model.ModelsPaginatedUserAchievementResponse? AdminListUserAchievements(AdminListUserAchievements input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ModelsPaginatedUserAchievementResponse?> AdminListUserAchievementsAsync(AdminListUserAchievements input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public void AdminResetAchievement(AdminResetAchievement input)
        {
            var response = _sdk.RunRequest(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task AdminResetAchievementAsync(AdminResetAchievement input)
        {
            var response = await _sdk.RunRequestAsync(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public void AdminUnlockAchievement(AdminUnlockAchievement input)
        {
            var response = _sdk.RunRequest(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task AdminUnlockAchievementAsync(AdminUnlockAchievement input)
        {
            var response = await _sdk.RunRequestAsync(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ModelsPaginatedUserAchievementResponse? PublicListUserAchievements(PublicListUserAchievements input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ModelsPaginatedUserAchievementResponse?> PublicListUserAchievementsAsync(PublicListUserAchievements input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public void PublicUnlockAchievement(PublicUnlockAchievement input)
        {
            var response = _sdk.RunRequest(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task PublicUnlockAchievementAsync(PublicUnlockAchievement input)
        {
            var response = await _sdk.RunRequestAsync(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
    }
}