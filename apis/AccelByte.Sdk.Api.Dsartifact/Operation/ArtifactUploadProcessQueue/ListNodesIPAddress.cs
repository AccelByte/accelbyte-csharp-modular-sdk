// Copyright (c) 2022-2023 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Dsartifact.Model;

namespace AccelByte.Sdk.Api.Dsartifact.Operation
{
    /// <summary>
    /// listNodesIPAddress
    ///
    /// Required permission: ADMIN:DSAM:ARTIFACT:NODES [READ]
    /// 
    /// Required scope: social
    /// 
    /// This endpoint will list IP Address of all artifact queue
    /// </summary>
    public class ListNodesIPAddress : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static ListNodesIPAddressBuilder Builder { get => new ListNodesIPAddressBuilder(); }

        public class ListNodesIPAddressBuilder
            : OperationBuilder<ListNodesIPAddressBuilder>
        {

            public long? Limit { get; set; }

            public string? Next { get; set; }

            public string? NodeIP { get; set; }

            public string? Previous { get; set; }





            internal ListNodesIPAddressBuilder() { }

            internal ListNodesIPAddressBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }


            public ListNodesIPAddressBuilder SetLimit(long _limit)
            {
                Limit = _limit;
                return this;
            }

            public ListNodesIPAddressBuilder SetNext(string _next)
            {
                Next = _next;
                return this;
            }

            public ListNodesIPAddressBuilder SetNodeIP(string _nodeIP)
            {
                NodeIP = _nodeIP;
                return this;
            }

            public ListNodesIPAddressBuilder SetPrevious(string _previous)
            {
                Previous = _previous;
                return this;
            }





            public ListNodesIPAddress Build(
            )
            {
                ListNodesIPAddress op = new ListNodesIPAddress(this
                );

                op.SetBaseFields<ListNodesIPAddressBuilder>(this);
                return op;
            }

            public Model.ModelsListNodesIPAddress? Execute(
            )
            {
                ListNodesIPAddress op = Build(
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
        }

        private ListNodesIPAddress(ListNodesIPAddressBuilder builder
        )
        {

            if (builder.Limit != null) QueryParams["limit"] = Convert.ToString(builder.Limit)!;
            if (builder.Next is not null) QueryParams["next"] = builder.Next;
            if (builder.NodeIP is not null) QueryParams["nodeIP"] = builder.NodeIP;
            if (builder.Previous is not null) QueryParams["previous"] = builder.Previous;






            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public ListNodesIPAddress(
            long? limit,
            string? next,
            string? nodeIP,
            string? previous
        )
        {

            if (limit != null) QueryParams["limit"] = Convert.ToString(limit)!;
            if (next is not null) QueryParams["next"] = next;
            if (nodeIP is not null) QueryParams["nodeIP"] = nodeIP;
            if (previous is not null) QueryParams["previous"] = previous;






            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/dsartifact/artifacts/nodes/ipaddresses";

        public override HttpMethod Method => HttpMethod.Get;

        public override List<string> Consumes => new() { "application/json" };

        public override List<string> Produces => new() { "application/json", "text/x-log" };

        public Model.ModelsListNodesIPAddress? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                return JsonSerializer.Deserialize<Model.ModelsListNodesIPAddress>(payload, ResponseJsonOptions);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.ModelsListNodesIPAddress>(payload, ResponseJsonOptions);
            }

            var payloadString = payload.ReadToString();

            throw new HttpResponseException(code, payloadString);
        }
    }

}