// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;

using AccelByte.Sdk.Api.Dsartifact.Model;
using AccelByte.Sdk.Api.Dsartifact.Operation;

namespace AccelByte.Sdk.Api.Dsartifact.Wrapper
{
    public class ArtifactUploadProcessQueue
    {
        private readonly IAccelByteSdk _sdk;

        private string _CustomBasePath = String.Empty;

        public ArtifactUploadProcessQueue(IAccelByteSdk sdk)
        {
            _sdk = sdk;
        }

        public ArtifactUploadProcessQueue(IAccelByteSdk sdk, string customBasePath)
        {
            _sdk = sdk;
            _CustomBasePath = customBasePath;
        }

        #region Operation Builders
        public ListNodesIPAddress.ListNodesIPAddressBuilder ListNodesIPAddressOp
        {
            get
            {
                var opBuilder = new Operation.ListNodesIPAddress.ListNodesIPAddressBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public DeleteNodeByID.DeleteNodeByIDBuilder DeleteNodeByIDOp
        {
            get
            {
                var opBuilder = new Operation.DeleteNodeByID.DeleteNodeByIDBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public ListQueue.ListQueueBuilder ListQueueOp
        {
            get
            {
                var opBuilder = new Operation.ListQueue.ListQueueBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public GetActiveQueue.GetActiveQueueBuilder GetActiveQueueOp
        {
            get
            {
                var opBuilder = new Operation.GetActiveQueue.GetActiveQueueBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public SetActiveQueue.SetActiveQueueBuilder SetActiveQueueOp
        {
            get
            {
                var opBuilder = new Operation.SetActiveQueue.SetActiveQueueBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public DeleteActiveQueue.DeleteActiveQueueBuilder DeleteActiveQueueOp
        {
            get
            {
                var opBuilder = new Operation.DeleteActiveQueue.DeleteActiveQueueBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public ReportFailedUpload.ReportFailedUploadBuilder ReportFailedUploadOp
        {
            get
            {
                var opBuilder = new Operation.ReportFailedUpload.ReportFailedUploadBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public DeleteQueue.DeleteQueueBuilder DeleteQueueOp
        {
            get
            {
                var opBuilder = new Operation.DeleteQueue.DeleteQueueBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public ListAllActiveQueue.ListAllActiveQueueBuilder ListAllActiveQueueOp
        {
            get
            {
                var opBuilder = new Operation.ListAllActiveQueue.ListAllActiveQueueBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public ListAllQueue.ListAllQueueBuilder ListAllQueueOp
        {
            get
            {
                var opBuilder = new Operation.ListAllQueue.ListAllQueueBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        #endregion

        public ListNodesIPAddress.Response ListNodesIPAddress(ListNodesIPAddress input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<ListNodesIPAddress.Response> ListNodesIPAddressAsync(ListNodesIPAddress input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public DeleteNodeByID.Response DeleteNodeByID(DeleteNodeByID input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<DeleteNodeByID.Response> DeleteNodeByIDAsync(DeleteNodeByID input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public ListQueue.Response ListQueue(ListQueue input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<ListQueue.Response> ListQueueAsync(ListQueue input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public GetActiveQueue.Response GetActiveQueue(GetActiveQueue input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<GetActiveQueue.Response> GetActiveQueueAsync(GetActiveQueue input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public SetActiveQueue.Response SetActiveQueue(SetActiveQueue input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<SetActiveQueue.Response> SetActiveQueueAsync(SetActiveQueue input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public DeleteActiveQueue.Response DeleteActiveQueue(DeleteActiveQueue input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<DeleteActiveQueue.Response> DeleteActiveQueueAsync(DeleteActiveQueue input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public ReportFailedUpload.Response ReportFailedUpload(ReportFailedUpload input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<ReportFailedUpload.Response> ReportFailedUploadAsync(ReportFailedUpload input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public DeleteQueue.Response DeleteQueue(DeleteQueue input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<DeleteQueue.Response> DeleteQueueAsync(DeleteQueue input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public ListAllActiveQueue.Response ListAllActiveQueue(ListAllActiveQueue input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<ListAllActiveQueue.Response> ListAllActiveQueueAsync(ListAllActiveQueue input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public ListAllQueue.Response ListAllQueue(ListAllQueue input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<ListAllQueue.Response> ListAllQueueAsync(ListAllQueue input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
    }
}