// Copyright (c) 2023 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using System;

using AccelByte.Sdk.Core;

using AccelByte.Sdk.Api.Dsartifact;

namespace AccelByte.Sdk.Api.Dsartifact
{
    public class DsartifactApi : ISdkApi
    {
        private IAccelByteSdk _Sdk;

        private string _CustomBasePath = String.Empty;

        public Wrapper.ArtifactUploadProcessQueue ArtifactUploadProcessQueue
        {
            get
            {
                if (_ArtifactUploadProcessQueue == null)
                    _ArtifactUploadProcessQueue = new Wrapper.ArtifactUploadProcessQueue(_Sdk, _CustomBasePath);
                return _ArtifactUploadProcessQueue;
            }
        }
        private Wrapper.ArtifactUploadProcessQueue? _ArtifactUploadProcessQueue = null;

        public Wrapper.TerminatedServers TerminatedServers
        {
            get
            {
                if (_TerminatedServers == null)
                    _TerminatedServers = new Wrapper.TerminatedServers(_Sdk, _CustomBasePath);
                return _TerminatedServers;
            }
        }
        private Wrapper.TerminatedServers? _TerminatedServers = null;

        public Wrapper.DownloadServerArtifact DownloadServerArtifact
        {
            get
            {
                if (_DownloadServerArtifact == null)
                    _DownloadServerArtifact = new Wrapper.DownloadServerArtifact(_Sdk, _CustomBasePath);
                return _DownloadServerArtifact;
            }
        }
        private Wrapper.DownloadServerArtifact? _DownloadServerArtifact = null;

        public Wrapper.AllTerminatedServers AllTerminatedServers
        {
            get
            {
                if (_AllTerminatedServers == null)
                    _AllTerminatedServers = new Wrapper.AllTerminatedServers(_Sdk, _CustomBasePath);
                return _AllTerminatedServers;
            }
        }
        private Wrapper.AllTerminatedServers? _AllTerminatedServers = null;

        public Wrapper.Operations Operations
        {
            get
            {
                if (_Operations == null)
                    _Operations = new Wrapper.Operations(_Sdk, _CustomBasePath);
                return _Operations;
            }
        }
        private Wrapper.Operations? _Operations = null;

        internal DsartifactApi(IAccelByteSdk sdk)
        {
            _Sdk = sdk;
        }

        public DsartifactApi WithCustomBasePath(string value)
        {
            _CustomBasePath = value;
            return this;
        }
    }
}

namespace AccelByte.Sdk.Api
{
    public static class DsartifactApi_SdkExts
    {
        public static DsartifactApi GetDsartifactApi(this IAccelByteSdk sdk)
        {
            return sdk.GetApi<DsartifactApi>("dsartifact", () =>
            {
                string customPath = sdk.Configuration.ConfigRepository.GetCustomServiceBasePath("dsartifact");
                if (customPath != "")
                    return (new DsartifactApi(sdk)).WithCustomBasePath(customPath);
                else
                    return new DsartifactApi(sdk);
            });
        }
    }
}