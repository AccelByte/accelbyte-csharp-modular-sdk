// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;

using AccelByte.Sdk.Api.Inventory.Model;
using AccelByte.Sdk.Api.Inventory.Operation;

namespace AccelByte.Sdk.Api.Inventory.Wrapper
{
    public class PublicItems
    {
        private readonly IAccelByteSdk _sdk;

        private string _CustomBasePath = String.Empty;

        public PublicItems(IAccelByteSdk sdk)
        {
            _sdk = sdk;
        }

        public PublicItems(IAccelByteSdk sdk, string customBasePath)
        {
            _sdk = sdk;
            _CustomBasePath = customBasePath;
        }

        #region Operation Builders
        public PublicConsumeMyItem.PublicConsumeMyItemBuilder PublicConsumeMyItemOp
        {
            get
            {
                var opBuilder = new Operation.PublicConsumeMyItem.PublicConsumeMyItemBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public PublicListItems.PublicListItemsBuilder PublicListItemsOp
        {
            get
            {
                var opBuilder = new Operation.PublicListItems.PublicListItemsBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public PublicBulkUpdateMyItems.PublicBulkUpdateMyItemsBuilder PublicBulkUpdateMyItemsOp
        {
            get
            {
                var opBuilder = new Operation.PublicBulkUpdateMyItems.PublicBulkUpdateMyItemsBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public PublicBulkRemoveMyItems.PublicBulkRemoveMyItemsBuilder PublicBulkRemoveMyItemsOp
        {
            get
            {
                var opBuilder = new Operation.PublicBulkRemoveMyItems.PublicBulkRemoveMyItemsBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public PublicMoveMyItems.PublicMoveMyItemsBuilder PublicMoveMyItemsOp
        {
            get
            {
                var opBuilder = new Operation.PublicMoveMyItems.PublicMoveMyItemsBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public PublicGetItem.PublicGetItemBuilder PublicGetItemOp
        {
            get
            {
                var opBuilder = new Operation.PublicGetItem.PublicGetItemBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        #endregion

        public PublicConsumeMyItem.Response PublicConsumeMyItem(PublicConsumeMyItem input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<PublicConsumeMyItem.Response> PublicConsumeMyItemAsync(PublicConsumeMyItem input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public PublicConsumeMyItem.Response<T1, T2, T3> PublicConsumeMyItem<T1, T2, T3>(PublicConsumeMyItem input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1, T2, T3>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<PublicConsumeMyItem.Response<T1, T2, T3>> PublicConsumeMyItemAsync<T1, T2, T3>(PublicConsumeMyItem input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1, T2, T3>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public PublicListItems.Response PublicListItems(PublicListItems input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<PublicListItems.Response> PublicListItemsAsync(PublicListItems input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public PublicBulkUpdateMyItems.Response PublicBulkUpdateMyItems(PublicBulkUpdateMyItems input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<PublicBulkUpdateMyItems.Response> PublicBulkUpdateMyItemsAsync(PublicBulkUpdateMyItems input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public PublicBulkRemoveMyItems.Response PublicBulkRemoveMyItems(PublicBulkRemoveMyItems input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<PublicBulkRemoveMyItems.Response> PublicBulkRemoveMyItemsAsync(PublicBulkRemoveMyItems input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public PublicMoveMyItems.Response PublicMoveMyItems(PublicMoveMyItems input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<PublicMoveMyItems.Response> PublicMoveMyItemsAsync(PublicMoveMyItems input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public PublicGetItem.Response PublicGetItem(PublicGetItem input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<PublicGetItem.Response> PublicGetItemAsync(PublicGetItem input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public PublicGetItem.Response<T1, T2, T3> PublicGetItem<T1, T2, T3>(PublicGetItem input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1, T2, T3>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<PublicGetItem.Response<T1, T2, T3>> PublicGetItemAsync<T1, T2, T3>(PublicGetItem input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1, T2, T3>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
    }
}