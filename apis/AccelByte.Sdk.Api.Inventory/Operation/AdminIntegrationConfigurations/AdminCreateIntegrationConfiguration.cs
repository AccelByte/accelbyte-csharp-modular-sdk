// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Inventory.Model;

namespace AccelByte.Sdk.Api.Inventory.Operation
{
    /// <summary>
    /// AdminCreateIntegrationConfiguration
    ///
    /// 
    /// Creating integration configuration.
    /// There cannot be one duplicate serviceName per namespace.
    /// 
    /// Permission: ADMIN:NAMESPACE:{namespace}:INVENTORY:INTEGRATIONCONFIGURATION [CREATE]
    /// </summary>
    public class AdminCreateIntegrationConfiguration : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static AdminCreateIntegrationConfigurationBuilder Builder { get => new AdminCreateIntegrationConfigurationBuilder(); }

        public class AdminCreateIntegrationConfigurationBuilder
            : OperationBuilder<AdminCreateIntegrationConfigurationBuilder>
        {





            internal AdminCreateIntegrationConfigurationBuilder() { }

            internal AdminCreateIntegrationConfigurationBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }






            public AdminCreateIntegrationConfiguration Build(
                ApimodelsCreateIntegrationConfigurationReq body,
                string namespace_
            )
            {
                AdminCreateIntegrationConfiguration op = new AdminCreateIntegrationConfiguration(this,
                    body,                    
                    namespace_                    
                );

                op.SetBaseFields<AdminCreateIntegrationConfigurationBuilder>(this);
                return op;
            }

            public AdminCreateIntegrationConfiguration.Response Execute(
                ApimodelsCreateIntegrationConfigurationReq body,
                string namespace_
            )
            {
                AdminCreateIntegrationConfiguration op = Build(
                    body,
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
            public async Task<AdminCreateIntegrationConfiguration.Response> ExecuteAsync(
                ApimodelsCreateIntegrationConfigurationReq body,
                string namespace_
            )
            {
                AdminCreateIntegrationConfiguration op = Build(
                    body,
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
        }

        private AdminCreateIntegrationConfiguration(AdminCreateIntegrationConfigurationBuilder builder,
            ApimodelsCreateIntegrationConfigurationReq body,
            string namespace_
        )
        {
            PathParams["namespace"] = namespace_;
            
            

            
            
            BodyParams = body;
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        #region Response Part        
        public class Response : ApiResponse<Model.ApimodelsIntegrationConfigurationResp>
        {

            public ApimodelsErrorResponse? Error400 { get; set; } = null;

            public ApimodelsErrorResponse? Error409 { get; set; } = null;

            public ApimodelsErrorResponse? Error500 { get; set; } = null;


            protected override string GetFullOperationId() => "Inventory::AdminIntegrationConfigurations::AdminCreateIntegrationConfiguration";
        }

        #endregion

        public AdminCreateIntegrationConfiguration(
            string namespace_,            
            Model.ApimodelsCreateIntegrationConfigurationReq body            
        )
        {
            PathParams["namespace"] = namespace_;
            
            

            
            
            BodyParams = body;
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/inventory/v1/admin/namespaces/{namespace}/integrationConfigurations";

        public override HttpMethod Method => HttpMethod.Post;

        public override List<string> Consumes => new() { "application/json" };

        public override List<string> Produces => new() { "application/json" };
        
        public AdminCreateIntegrationConfiguration.Response ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            var response = new AdminCreateIntegrationConfiguration.Response()
            {
                StatusCode = code,
                ContentType = contentType
            };

            if (code == (HttpStatusCode)204)
            {
                response.IsSuccess = true;
            }
            else if ((code == (HttpStatusCode)201) || (code == (HttpStatusCode)202) || (code == (HttpStatusCode)200))
            {
                response.Data = JsonSerializer.Deserialize<Model.ApimodelsIntegrationConfigurationResp>(payload, ResponseJsonOptions);
                response.IsSuccess = true;
            }
            else if (code == (HttpStatusCode)400)
            {
                response.Error400 = JsonSerializer.Deserialize<ApimodelsErrorResponse>(payload, ResponseJsonOptions);
                response.Error = response.Error400!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)409)
            {
                response.Error409 = JsonSerializer.Deserialize<ApimodelsErrorResponse>(payload, ResponseJsonOptions);
                response.Error = response.Error409!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)500)
            {
                response.Error500 = JsonSerializer.Deserialize<ApimodelsErrorResponse>(payload, ResponseJsonOptions);
                response.Error = response.Error500!.TranslateToApiError();
            }

            return response;
        }
    }

}