// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Inventory.Model;

namespace AccelByte.Sdk.Api.Inventory.Operation
{
    /// <summary>
    /// AdminUpdateInventoryConfiguration
    ///
    /// 
    /// Updating inventory configuration.
    /// There cannot be duplicate code per namespace.
    /// 
    /// Permission: ADMIN:NAMESPACE:{namespace}:INVENTORY:CONFIGURATION [UPDATE]
    /// </summary>
    public class AdminUpdateInventoryConfiguration : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static AdminUpdateInventoryConfigurationBuilder Builder { get => new AdminUpdateInventoryConfigurationBuilder(); }

        public class AdminUpdateInventoryConfigurationBuilder
            : OperationBuilder<AdminUpdateInventoryConfigurationBuilder>
        {





            internal AdminUpdateInventoryConfigurationBuilder() { }

            internal AdminUpdateInventoryConfigurationBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }






            public AdminUpdateInventoryConfiguration Build(
                ApimodelsInventoryConfigurationReq body,
                string inventoryConfigurationId,
                string namespace_
            )
            {
                AdminUpdateInventoryConfiguration op = new AdminUpdateInventoryConfiguration(this,
                    body,
                    inventoryConfigurationId,
                    namespace_
                );

                op.SetBaseFields<AdminUpdateInventoryConfigurationBuilder>(this);
                return op;
            }

            public AdminUpdateInventoryConfiguration.Response Execute(
                ApimodelsInventoryConfigurationReq body,
                string inventoryConfigurationId,
                string namespace_
            )
            {
                AdminUpdateInventoryConfiguration op = Build(
                    body,
                    inventoryConfigurationId,
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
            public async Task<AdminUpdateInventoryConfiguration.Response> ExecuteAsync(
                ApimodelsInventoryConfigurationReq body,
                string inventoryConfigurationId,
                string namespace_
            )
            {
                AdminUpdateInventoryConfiguration op = Build(
                    body,
                    inventoryConfigurationId,
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
        }

        private AdminUpdateInventoryConfiguration(AdminUpdateInventoryConfigurationBuilder builder,
            ApimodelsInventoryConfigurationReq body,
            string inventoryConfigurationId,
            string namespace_
        )
        {
            PathParams["inventoryConfigurationId"] = inventoryConfigurationId;
            PathParams["namespace"] = namespace_;





            BodyParams = body;


            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        #region Response Part        
        public class Response : ApiResponse<Model.ApimodelsInventoryConfigurationResp>
        {

            public ApimodelsErrorResponse? Error400 { get; set; } = null;

            public ApimodelsErrorResponse? Error404 { get; set; } = null;

            public ApimodelsErrorResponse? Error409 { get; set; } = null;

            public ApimodelsErrorResponse? Error500 { get; set; } = null;


            protected override string GetFullOperationId() => "Inventory::AdminInventoryConfigurations::AdminUpdateInventoryConfiguration";
        }

        #endregion

        public AdminUpdateInventoryConfiguration(
            string inventoryConfigurationId,
            string namespace_,
            Model.ApimodelsInventoryConfigurationReq body
        )
        {
            PathParams["inventoryConfigurationId"] = inventoryConfigurationId;
            PathParams["namespace"] = namespace_;





            BodyParams = body;


            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/inventory/v1/admin/namespaces/{namespace}/inventoryConfigurations/{inventoryConfigurationId}";

        public override HttpMethod Method => HttpMethod.Put;

        public override List<string> Consumes => new() { "application/json" };

        public override List<string> Produces => new() { "application/json" };

        public AdminUpdateInventoryConfiguration.Response ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            var response = new AdminUpdateInventoryConfiguration.Response()
            {
                StatusCode = code,
                ContentType = contentType
            };

            if (code == (HttpStatusCode)204)
            {
                response.IsSuccess = true;
            }
            else if ((code == (HttpStatusCode)201) || (code == (HttpStatusCode)202) || (code == (HttpStatusCode)200))
            {
                response.Data = JsonSerializer.Deserialize<Model.ApimodelsInventoryConfigurationResp>(payload, ResponseJsonOptions);
                response.IsSuccess = true;
            }
            else if (code == (HttpStatusCode)400)
            {
                response.Error400 = JsonSerializer.Deserialize<ApimodelsErrorResponse>(payload, ResponseJsonOptions);
                response.Error = response.Error400!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)404)
            {
                response.Error404 = JsonSerializer.Deserialize<ApimodelsErrorResponse>(payload, ResponseJsonOptions);
                response.Error = response.Error404!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)409)
            {
                response.Error409 = JsonSerializer.Deserialize<ApimodelsErrorResponse>(payload, ResponseJsonOptions);
                response.Error = response.Error409!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)500)
            {
                response.Error500 = JsonSerializer.Deserialize<ApimodelsErrorResponse>(payload, ResponseJsonOptions);
                response.Error = response.Error500!.TranslateToApiError();
            }

            return response;
        }
    }

}