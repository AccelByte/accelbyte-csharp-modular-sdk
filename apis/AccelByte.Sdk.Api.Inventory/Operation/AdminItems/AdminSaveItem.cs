// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Inventory.Model;

namespace AccelByte.Sdk.Api.Inventory.Operation
{
    /// <summary>
    /// AdminSaveItem
    ///
    /// **This endpoint is used to save items to the playerâs inventory based on the inventoryConfigurationCode with the following conditions:**
    /// - If the player doesn't have the inventory for the specified inventoryConfigurationCode, a new inventory will be created.
    /// - If the user already has one, it will be added to the existing inventory.
    /// - If the same item exists within the inventory, the quantity (qty) will be increased.
    /// - If the inventory is full, the item cannot be added and the request will return the âFailedâ response.
    /// - If a player has more than one inventory and the initial inventory is full, the service will check the available slot in the other inventory following the order of their creation date and time (createdAt).
    /// - For Ecommerce items:
    /// >- Attributes such as slotUsed, serverCustomAttributes, customAttributes, and type will be overridden by the attributes configured in the AccelByte Gaming Services (AGS) Store.
    /// >- Storing E-commerce items in a particular slot will follow its entitlement and item configuration, such as durable, consumable, stackable and non-stackable.
    /// >- The quantity is dynamically set based on an itemâs useCount configured in Store. When saving an item, the specified quantity will be multiplied by configured useCount for that particular item. For example, if an Item is configured with a useCount of 5 in the AGS Store and it is saved with a qty of 2, the itemâs quantity will be stored as 2 in the playerâs inventory.
    /// 
    /// You must have this permission to access this endpoint:
    /// **Permission:ADMIN:NAMESPACE:{namespace}:USER:{userId}:INVENTORY:ITEM [CREATE]**
    /// </summary>
    public class AdminSaveItem : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static AdminSaveItemBuilder Builder { get => new AdminSaveItemBuilder(); }

        public class AdminSaveItemBuilder
            : OperationBuilder<AdminSaveItemBuilder>
        {





            internal AdminSaveItemBuilder() { }

            internal AdminSaveItemBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }






            public AdminSaveItem Build(
                ApimodelsSaveItemReq body,
                string namespace_,
                string userId
            )
            {
                AdminSaveItem op = new AdminSaveItem(this,
                    body,                    
                    namespace_,                    
                    userId                    
                );

                op.SetBaseFields<AdminSaveItemBuilder>(this);
                return op;
            }

            public AdminSaveItem.Response Execute(
                ApimodelsSaveItemReq body,
                string namespace_,
                string userId
            )
            {
                AdminSaveItem op = Build(
                    body,
                    namespace_,
                    userId
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
            public async Task<AdminSaveItem.Response> ExecuteAsync(
                ApimodelsSaveItemReq body,
                string namespace_,
                string userId
            )
            {
                AdminSaveItem op = Build(
                    body,
                    namespace_,
                    userId
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }

            public AdminSaveItem.Response<T1, T2, T3> Execute<T1, T2, T3>(
                ApimodelsSaveItemReq body,
                string namespace_,
                string userId
            )
            {
                AdminSaveItem op = Build(
                    body,
                    namespace_,
                    userId
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse<T1, T2, T3>(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
            public async Task<AdminSaveItem.Response<T1, T2, T3>> ExecuteAsync<T1, T2, T3>(
                ApimodelsSaveItemReq body,
                string namespace_,
                string userId
            )
            {
                AdminSaveItem op = Build(
                    body,
                    namespace_,
                    userId
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse<T1, T2, T3>(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
        }

        private AdminSaveItem(AdminSaveItemBuilder builder,
            ApimodelsSaveItemReq body,
            string namespace_,
            string userId
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["userId"] = userId;
            
            

            
            
            BodyParams = body;
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        #region Response Part        
        public class Response : ApiResponse<Model.ApimodelsItemResp>
        {

            public ApimodelsErrorResponse? Error400 { get; set; } = null;

            public ApimodelsErrorResponse? Error500 { get; set; } = null;


            protected override string GetFullOperationId() => "Inventory::AdminItems::AdminSaveItem";
        }

        public class Response<T1, T2, T3> : ApiResponse<Model.ApimodelsItemResp<T1, T2, T3>>
        {
            public ApimodelsErrorResponse? Error400 { get; set; } = null;

            public ApimodelsErrorResponse? Error500 { get; set; } = null;


            protected override string GetFullOperationId() => "Inventory::AdminItems::AdminSaveItem";
        }
        #endregion

        public AdminSaveItem(
            string namespace_,            
            string userId,            
            Model.ApimodelsSaveItemReq body            
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["userId"] = userId;
            
            

            
            
            BodyParams = body;
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/inventory/v1/admin/namespaces/{namespace}/users/{userId}/items";

        public override HttpMethod Method => HttpMethod.Post;

        public override List<string> Consumes => new() { "application/json" };

        public override List<string> Produces => new() { "application/json" };
        
        public AdminSaveItem.Response ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            var response = new AdminSaveItem.Response()
            {
                StatusCode = code,
                ContentType = contentType
            };

            if (code == (HttpStatusCode)204)
            {
                response.IsSuccess = true;
            }
            else if ((code == (HttpStatusCode)201) || (code == (HttpStatusCode)202) || (code == (HttpStatusCode)200))
            {
                response.Data = JsonSerializer.Deserialize<Model.ApimodelsItemResp>(payload, ResponseJsonOptions);
                response.IsSuccess = true;
            }
            else if (code == (HttpStatusCode)400)
            {
                response.Error400 = JsonSerializer.Deserialize<ApimodelsErrorResponse>(payload, ResponseJsonOptions);
                response.Error = response.Error400!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)500)
            {
                response.Error500 = JsonSerializer.Deserialize<ApimodelsErrorResponse>(payload, ResponseJsonOptions);
                response.Error = response.Error500!.TranslateToApiError();
            }

            return response;
        }

        public AdminSaveItem.Response<T1, T2, T3> ParseResponse<T1, T2, T3>(HttpStatusCode code, string contentType, Stream payload)
        {
            var response = new AdminSaveItem.Response<T1, T2, T3>()
            {
                StatusCode = code,
                ContentType = contentType
            };

            if (code == (HttpStatusCode)204)
            {
                response.IsSuccess = true;
            }            
            else if ((code == (HttpStatusCode)201) || (code == (HttpStatusCode)202) || (code == (HttpStatusCode)200))
            {
                response.Data = JsonSerializer.Deserialize<Model.ApimodelsItemResp<T1, T2, T3>>(payload, ResponseJsonOptions);
                response.IsSuccess = true;
            }
            else if (code == (HttpStatusCode)400)
            {
                response.Error400 = JsonSerializer.Deserialize<ApimodelsErrorResponse>(payload, ResponseJsonOptions);
                response.Error = response.Error400!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)500)
            {
                response.Error500 = JsonSerializer.Deserialize<ApimodelsErrorResponse>(payload, ResponseJsonOptions);
                response.Error = response.Error500!.TranslateToApiError();
            }
            
            return response;
        }
    }

}