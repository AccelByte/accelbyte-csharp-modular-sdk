// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Inventory.Model;

namespace AccelByte.Sdk.Api.Inventory.Operation
{
    /// <summary>
    /// AdminSaveItemToInventory
    ///
    /// **This endpoint is used to save purchased items to a specific inventory of the player, with the following conditions for E-commerce items:**
    /// - Attributes such as slotUsed, serverCustomAttributes, customAttributes, and type will be overridden by the attributes configured in the AccelByte Gaming Services (AGS) Store.
    /// - Storing E-commerce items in a particular slot will follow its entitlement and item configuration, such as durable, consumable, stackable and non-stackable.
    /// - The quantity is dynamically set based on an itemâs useCount configured in Store. When saving an item, the specified quantity will be multiplied by configured useCount for that particular item. For example, if an Item is configured with a useCount of 5 in the AGS Store and it is saved with a qty of 2, the itemâs quantity will be stored as 10 in the playerâs inventory.
    /// 
    /// **When configuring your request, note the following:**
    /// - The source field is mandatory for determining the source of the item. The supported values are OTHER (for items coming from other sources) and E-commerce for items coming from the E-commerce integration.
    /// - For other-sourced items, the type can be manually defined when saving the item.
    /// You must have this permission to access this endpoint:
    /// 
    /// **Permission: ADMIN:NAMESPACE:{namespace}:USER:{userId}:INVENTORY:ITEM [CREATE]**
    /// </summary>
    public class AdminSaveItemToInventory : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static AdminSaveItemToInventoryBuilder Builder { get => new AdminSaveItemToInventoryBuilder(); }

        public class AdminSaveItemToInventoryBuilder
            : OperationBuilder<AdminSaveItemToInventoryBuilder>
        {





            internal AdminSaveItemToInventoryBuilder() { }

            internal AdminSaveItemToInventoryBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }






            public AdminSaveItemToInventory Build(
                ApimodelsSaveItemToInventoryReq body,
                string inventoryId,
                string namespace_,
                string userId
            )
            {
                AdminSaveItemToInventory op = new AdminSaveItemToInventory(this,
                    body,                    
                    inventoryId,                    
                    namespace_,                    
                    userId                    
                );

                op.SetBaseFields<AdminSaveItemToInventoryBuilder>(this);
                return op;
            }

            public AdminSaveItemToInventory.Response Execute(
                ApimodelsSaveItemToInventoryReq body,
                string inventoryId,
                string namespace_,
                string userId
            )
            {
                AdminSaveItemToInventory op = Build(
                    body,
                    inventoryId,
                    namespace_,
                    userId
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
            public async Task<AdminSaveItemToInventory.Response> ExecuteAsync(
                ApimodelsSaveItemToInventoryReq body,
                string inventoryId,
                string namespace_,
                string userId
            )
            {
                AdminSaveItemToInventory op = Build(
                    body,
                    inventoryId,
                    namespace_,
                    userId
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }

            public AdminSaveItemToInventory.Response<T1, T2, T3> Execute<T1, T2, T3>(
                ApimodelsSaveItemToInventoryReq body,
                string inventoryId,
                string namespace_,
                string userId
            )
            {
                AdminSaveItemToInventory op = Build(
                    body,
                    inventoryId,
                    namespace_,
                    userId
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse<T1, T2, T3>(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
            public async Task<AdminSaveItemToInventory.Response<T1, T2, T3>> ExecuteAsync<T1, T2, T3>(
                ApimodelsSaveItemToInventoryReq body,
                string inventoryId,
                string namespace_,
                string userId
            )
            {
                AdminSaveItemToInventory op = Build(
                    body,
                    inventoryId,
                    namespace_,
                    userId
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse<T1, T2, T3>(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
        }

        private AdminSaveItemToInventory(AdminSaveItemToInventoryBuilder builder,
            ApimodelsSaveItemToInventoryReq body,
            string inventoryId,
            string namespace_,
            string userId
        )
        {
            PathParams["inventoryId"] = inventoryId;
            PathParams["namespace"] = namespace_;
            PathParams["userId"] = userId;
            
            

            
            
            BodyParams = body;
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        #region Response Part        
        public class Response : ApiResponse<Model.ApimodelsItemResp>
        {

            public ApimodelsErrorResponse? Error400 { get; set; } = null;

            public ApimodelsErrorResponse? Error401 { get; set; } = null;

            public ApimodelsErrorResponse? Error403 { get; set; } = null;

            public ApimodelsErrorResponse? Error404 { get; set; } = null;

            public ApimodelsErrorResponse? Error500 { get; set; } = null;


            protected override string GetFullOperationId() => "Inventory::AdminItems::AdminSaveItemToInventory";
        }

        public class Response<T1, T2, T3> : ApiResponse<Model.ApimodelsItemResp<T1, T2, T3>>
        {
            public ApimodelsErrorResponse? Error400 { get; set; } = null;

            public ApimodelsErrorResponse? Error401 { get; set; } = null;

            public ApimodelsErrorResponse? Error403 { get; set; } = null;

            public ApimodelsErrorResponse? Error404 { get; set; } = null;

            public ApimodelsErrorResponse? Error500 { get; set; } = null;


            protected override string GetFullOperationId() => "Inventory::AdminItems::AdminSaveItemToInventory";
        }
        #endregion

        public AdminSaveItemToInventory(
            string inventoryId,            
            string namespace_,            
            string userId,            
            Model.ApimodelsSaveItemToInventoryReq body            
        )
        {
            PathParams["inventoryId"] = inventoryId;
            PathParams["namespace"] = namespace_;
            PathParams["userId"] = userId;
            
            

            
            
            BodyParams = body;
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/inventory/v1/admin/namespaces/{namespace}/users/{userId}/inventories/{inventoryId}/items";

        public override HttpMethod Method => HttpMethod.Post;

        public override List<string> Consumes => new() { "application/json" };

        public override List<string> Produces => new() { "application/json" };
        
        public AdminSaveItemToInventory.Response ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            var response = new AdminSaveItemToInventory.Response()
            {
                StatusCode = code,
                ContentType = contentType
            };

            if (code == (HttpStatusCode)204)
            {
                response.IsSuccess = true;
            }
            else if ((code == (HttpStatusCode)201) || (code == (HttpStatusCode)202) || (code == (HttpStatusCode)200))
            {
                response.Data = JsonSerializer.Deserialize<Model.ApimodelsItemResp>(payload, ResponseJsonOptions);
                response.IsSuccess = true;
            }
            else if (code == (HttpStatusCode)400)
            {
                response.Error400 = JsonSerializer.Deserialize<ApimodelsErrorResponse>(payload, ResponseJsonOptions);
                response.Error = response.Error400!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)401)
            {
                response.Error401 = JsonSerializer.Deserialize<ApimodelsErrorResponse>(payload, ResponseJsonOptions);
                response.Error = response.Error401!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)403)
            {
                response.Error403 = JsonSerializer.Deserialize<ApimodelsErrorResponse>(payload, ResponseJsonOptions);
                response.Error = response.Error403!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)404)
            {
                response.Error404 = JsonSerializer.Deserialize<ApimodelsErrorResponse>(payload, ResponseJsonOptions);
                response.Error = response.Error404!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)500)
            {
                response.Error500 = JsonSerializer.Deserialize<ApimodelsErrorResponse>(payload, ResponseJsonOptions);
                response.Error = response.Error500!.TranslateToApiError();
            }

            return response;
        }

        public AdminSaveItemToInventory.Response<T1, T2, T3> ParseResponse<T1, T2, T3>(HttpStatusCode code, string contentType, Stream payload)
        {
            var response = new AdminSaveItemToInventory.Response<T1, T2, T3>()
            {
                StatusCode = code,
                ContentType = contentType
            };

            if (code == (HttpStatusCode)204)
            {
                response.IsSuccess = true;
            }            
            else if ((code == (HttpStatusCode)201) || (code == (HttpStatusCode)202) || (code == (HttpStatusCode)200))
            {
                response.Data = JsonSerializer.Deserialize<Model.ApimodelsItemResp<T1, T2, T3>>(payload, ResponseJsonOptions);
                response.IsSuccess = true;
            }
            else if (code == (HttpStatusCode)400)
            {
                response.Error400 = JsonSerializer.Deserialize<ApimodelsErrorResponse>(payload, ResponseJsonOptions);
                response.Error = response.Error400!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)401)
            {
                response.Error401 = JsonSerializer.Deserialize<ApimodelsErrorResponse>(payload, ResponseJsonOptions);
                response.Error = response.Error401!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)403)
            {
                response.Error403 = JsonSerializer.Deserialize<ApimodelsErrorResponse>(payload, ResponseJsonOptions);
                response.Error = response.Error403!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)404)
            {
                response.Error404 = JsonSerializer.Deserialize<ApimodelsErrorResponse>(payload, ResponseJsonOptions);
                response.Error = response.Error404!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)500)
            {
                response.Error500 = JsonSerializer.Deserialize<ApimodelsErrorResponse>(payload, ResponseJsonOptions);
                response.Error = response.Error500!.TranslateToApiError();
            }
            
            return response;
        }
    }

}