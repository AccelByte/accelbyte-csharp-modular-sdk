// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Basic.Model;

namespace AccelByte.Sdk.Api.Basic.Operation
{
    /// <summary>
    /// publicGeneratedUserUploadContentUrl
    ///
    /// Generate an upload URL for user content. It's valid for 10 minutes.
    /// There are 2 kinds of storage limitation per user : maximum file count and maximum file size.
    /// The threshold of those limitations is different between upload category that is used.
    /// Other detail info:
    /// 
    ///   * Action code : 11102
    ///   *  Default maximum file count per user : 10 files
    ///   *  Default maximum file size per user : 104857600 bytes
    ///   *  Returns : URL data
    /// </summary>
    public class PublicGeneratedUserUploadContentUrl : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static PublicGeneratedUserUploadContentUrlBuilder Builder { get => new PublicGeneratedUserUploadContentUrlBuilder(); }

        public class PublicGeneratedUserUploadContentUrlBuilder
            : OperationBuilder<PublicGeneratedUserUploadContentUrlBuilder>
        {

            public string? Category { get; set; }





            internal PublicGeneratedUserUploadContentUrlBuilder() { }

            internal PublicGeneratedUserUploadContentUrlBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }


            public PublicGeneratedUserUploadContentUrlBuilder SetCategory(string _category)
            {
                Category = _category;
                return this;
            }





            public PublicGeneratedUserUploadContentUrl Build(
                string namespace_,
                string userId,
                string fileType
            )
            {
                PublicGeneratedUserUploadContentUrl op = new PublicGeneratedUserUploadContentUrl(this,
                    namespace_,
                    userId,
                    fileType
                );

                op.SetBaseFields<PublicGeneratedUserUploadContentUrlBuilder>(this);
                return op;
            }

            public PublicGeneratedUserUploadContentUrl.Response Execute(
                string namespace_,
                string userId,
                string fileType
            )
            {
                PublicGeneratedUserUploadContentUrl op = Build(
                    namespace_,
                    userId,
                    fileType
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
            public async Task<PublicGeneratedUserUploadContentUrl.Response> ExecuteAsync(
                string namespace_,
                string userId,
                string fileType
            )
            {
                PublicGeneratedUserUploadContentUrl op = Build(
                    namespace_,
                    userId,
                    fileType
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
        }

        private PublicGeneratedUserUploadContentUrl(PublicGeneratedUserUploadContentUrlBuilder builder,
            string namespace_,
            string userId,
            string fileType
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["userId"] = userId;

            if (builder.Category is not null) QueryParams["category"] = builder.Category;
            if (fileType is not null) QueryParams["fileType"] = fileType;






            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        #region Response Part        
        public class Response : ApiResponse<Model.FileUploadUrlInfo>
        {

            public ValidationErrorEntity? Error400 { get; set; } = null;

            public ErrorEntity? Error401 { get; set; } = null;

            public ErrorEntity? Error403 { get; set; } = null;

            public ErrorEntity? Error409 { get; set; } = null;

            public ErrorEntity? Error500 { get; set; } = null;


            protected override string GetFullOperationId() => "Basic::FileUpload::PublicGeneratedUserUploadContentUrl";
        }

        #endregion

        public PublicGeneratedUserUploadContentUrl(
            string namespace_,
            string userId,
            string? category,
            string fileType
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["userId"] = userId;

            if (category is not null) QueryParams["category"] = category;
            if (fileType is not null) QueryParams["fileType"] = fileType;






            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/basic/v1/public/namespaces/{namespace}/users/{userId}/files";

        public override HttpMethod Method => HttpMethod.Post;

        public override List<string> Consumes => new() { };

        public override List<string> Produces => new() { "application/json" };

        public PublicGeneratedUserUploadContentUrl.Response ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            var response = new PublicGeneratedUserUploadContentUrl.Response()
            {
                StatusCode = code,
                ContentType = contentType
            };

            if (code == (HttpStatusCode)204)
            {
                response.IsSuccess = true;
            }
            else if ((code == (HttpStatusCode)201) || (code == (HttpStatusCode)202) || (code == (HttpStatusCode)200))
            {
                response.Data = JsonSerializer.Deserialize<Model.FileUploadUrlInfo>(payload, ResponseJsonOptions);
                response.IsSuccess = true;
            }
            else if (code == (HttpStatusCode)400)
            {
                response.Error400 = JsonSerializer.Deserialize<ValidationErrorEntity>(payload, ResponseJsonOptions);
                response.Error = response.Error400!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)401)
            {
                response.Error401 = JsonSerializer.Deserialize<ErrorEntity>(payload, ResponseJsonOptions);
                response.Error = response.Error401!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)403)
            {
                response.Error403 = JsonSerializer.Deserialize<ErrorEntity>(payload, ResponseJsonOptions);
                response.Error = response.Error403!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)409)
            {
                response.Error409 = JsonSerializer.Deserialize<ErrorEntity>(payload, ResponseJsonOptions);
                response.Error = response.Error409!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)500)
            {
                response.Error500 = JsonSerializer.Deserialize<ErrorEntity>(payload, ResponseJsonOptions);
                response.Error = response.Error500!.TranslateToApiError();
            }

            return response;
        }
    }

}