// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Basic.Model;

namespace AccelByte.Sdk.Api.Basic.Operation
{
    /// <summary>
    /// getChildNamespaces
    ///
    /// Get child namespaces.
    /// If input namespace is publisher namespace, then it will return its all studio namespace.
    /// If input namespace is studio namespace, then it will return its all game namespace.
    /// Other detail info:
    /// 
    ///   * Required permission : resource= "ADMIN:NAMESPACE:{namespace}:NAMESPACE" , action=2 (READ)
    ///   *  Returns : list of child namespaces
    /// </summary>
    public class GetChildNamespaces : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static GetChildNamespacesBuilder Builder { get => new GetChildNamespacesBuilder(); }

        public class GetChildNamespacesBuilder
            : OperationBuilder<GetChildNamespacesBuilder>
        {

            public bool? ActiveOnly { get; set; }





            internal GetChildNamespacesBuilder() { }

            internal GetChildNamespacesBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }


            public GetChildNamespacesBuilder SetActiveOnly(bool _activeOnly)
            {
                ActiveOnly = _activeOnly;
                return this;
            }





            public GetChildNamespaces Build(
                string namespace_
            )
            {
                GetChildNamespaces op = new GetChildNamespaces(this,
                    namespace_
                );

                op.SetBaseFields<GetChildNamespacesBuilder>(this);
                return op;
            }

            public List<Model.NamespaceInfo>? Execute(
                string namespace_
            )
            {
                GetChildNamespaces op = Build(
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
            public async Task<List<Model.NamespaceInfo>?> ExecuteAsync(
                string namespace_
            )
            {
                GetChildNamespaces op = Build(
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
        }

        private GetChildNamespaces(GetChildNamespacesBuilder builder,
            string namespace_
        )
        {
            PathParams["namespace"] = namespace_;

            if (builder.ActiveOnly != null) QueryParams["activeOnly"] = Convert.ToString(builder.ActiveOnly)!;






            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public GetChildNamespaces(
            string namespace_,
            bool? activeOnly
        )
        {
            PathParams["namespace"] = namespace_;

            if (activeOnly != null) QueryParams["activeOnly"] = Convert.ToString(activeOnly)!;






            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/basic/v1/admin/namespaces/{namespace}/child";

        public override HttpMethod Method => HttpMethod.Get;

        public override List<string> Consumes => new() { };

        public override List<string> Produces => new() { "application/json" };

        public List<Model.NamespaceInfo>? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                return JsonSerializer.Deserialize<List<Model.NamespaceInfo>>(payload, ResponseJsonOptions);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<List<Model.NamespaceInfo>>(payload, ResponseJsonOptions);
            }

            var payloadString = payload.ReadToString();

            throw new HttpResponseException(code, payloadString);
        }
    }

}