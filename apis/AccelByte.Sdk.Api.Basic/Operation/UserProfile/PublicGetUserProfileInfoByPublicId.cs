// Copyright (c) 2022-2023 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Basic.Model;

namespace AccelByte.Sdk.Api.Basic.Operation
{
    /// <summary>
    /// publicGetUserProfileInfoByPublicId
    ///
    /// Get user public profile by public id.
    /// Other detail info:
    /// 
    ///   * Returns : user public profile
    /// </summary>
    public class PublicGetUserProfileInfoByPublicId : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static PublicGetUserProfileInfoByPublicIdBuilder Builder { get => new PublicGetUserProfileInfoByPublicIdBuilder(); }

        public class PublicGetUserProfileInfoByPublicIdBuilder
            : OperationBuilder<PublicGetUserProfileInfoByPublicIdBuilder>
        {





            internal PublicGetUserProfileInfoByPublicIdBuilder() { }

            internal PublicGetUserProfileInfoByPublicIdBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }






            public PublicGetUserProfileInfoByPublicId Build(
                string namespace_,
                string publicId
            )
            {
                PublicGetUserProfileInfoByPublicId op = new PublicGetUserProfileInfoByPublicId(this,
                    namespace_,
                    publicId
                );

                op.SetBaseFields<PublicGetUserProfileInfoByPublicIdBuilder>(this);
                return op;
            }

            public Model.UserProfilePublicInfo? Execute(
                string namespace_,
                string publicId
            )
            {
                PublicGetUserProfileInfoByPublicId op = Build(
                    namespace_,
                    publicId
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }

            public Model.UserProfilePublicInfo<T1>? Execute<T1>(
                string namespace_,
                string publicId
            )
            {
                PublicGetUserProfileInfoByPublicId op = Build(
                    namespace_,
                    publicId
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
        }

        private PublicGetUserProfileInfoByPublicId(PublicGetUserProfileInfoByPublicIdBuilder builder,
            string namespace_,
            string publicId
        )
        {
            PathParams["namespace"] = namespace_;

            if (publicId is not null) QueryParams["publicId"] = publicId;






        }
        #endregion

        public PublicGetUserProfileInfoByPublicId(
            string namespace_,
            string publicId
        )
        {
            PathParams["namespace"] = namespace_;

            if (publicId is not null) QueryParams["publicId"] = publicId;






        }

        public override string Path => "/basic/v1/public/namespaces/{namespace}/profiles/public/byPublicId";

        public override HttpMethod Method => HttpMethod.Get;

        public override List<string> Consumes => new() { };

        public override List<string> Produces => new() { "application/json" };

        public Model.UserProfilePublicInfo? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                return JsonSerializer.Deserialize<Model.UserProfilePublicInfo>(payload, ResponseJsonOptions);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.UserProfilePublicInfo>(payload, ResponseJsonOptions);
            }

            var payloadString = payload.ReadToString();

            throw new HttpResponseException(code, payloadString);
        }

        public Model.UserProfilePublicInfo<T1>? ParseResponse<T1>(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                return JsonSerializer.Deserialize<Model.UserProfilePublicInfo<T1>>(payload, ResponseJsonOptions);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.UserProfilePublicInfo<T1>>(payload, ResponseJsonOptions);
            }

            var payloadString = payload.ReadToString();
            throw new HttpResponseException(code, payloadString);
        }
    }

}