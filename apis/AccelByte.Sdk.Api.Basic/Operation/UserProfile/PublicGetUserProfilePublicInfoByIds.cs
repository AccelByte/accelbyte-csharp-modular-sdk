// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Basic.Model;

namespace AccelByte.Sdk.Api.Basic.Operation
{
    /// <summary>
    /// publicGetUserProfilePublicInfoByIds
    ///
    /// Get user public profile by ids.
    /// Other detail info:
    /// 
    ///   * Action code : 11405
    ///   *  Returns : user public profiles
    /// </summary>
    public class PublicGetUserProfilePublicInfoByIds : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static PublicGetUserProfilePublicInfoByIdsBuilder Builder { get => new PublicGetUserProfilePublicInfoByIdsBuilder(); }

        public class PublicGetUserProfilePublicInfoByIdsBuilder
            : OperationBuilder<PublicGetUserProfilePublicInfoByIdsBuilder>
        {





            internal PublicGetUserProfilePublicInfoByIdsBuilder() { }

            internal PublicGetUserProfilePublicInfoByIdsBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }






            public PublicGetUserProfilePublicInfoByIds Build(
                string namespace_,
                string userIds
            )
            {
                PublicGetUserProfilePublicInfoByIds op = new PublicGetUserProfilePublicInfoByIds(this,
                    namespace_,
                    userIds
                );

                op.SetBaseFields<PublicGetUserProfilePublicInfoByIdsBuilder>(this);
                return op;
            }

            public PublicGetUserProfilePublicInfoByIds.Response Execute(
                string namespace_,
                string userIds
            )
            {
                PublicGetUserProfilePublicInfoByIds op = Build(
                    namespace_,
                    userIds
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
            public async Task<PublicGetUserProfilePublicInfoByIds.Response> ExecuteAsync(
                string namespace_,
                string userIds
            )
            {
                PublicGetUserProfilePublicInfoByIds op = Build(
                    namespace_,
                    userIds
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }

            public PublicGetUserProfilePublicInfoByIds.Response<T1> Execute<T1>(
                string namespace_,
                string userIds
            )
            {
                PublicGetUserProfilePublicInfoByIds op = Build(
                    namespace_,
                    userIds
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
            public async Task<PublicGetUserProfilePublicInfoByIds.Response<T1>> ExecuteAsync<T1>(
                string namespace_,
                string userIds
            )
            {
                PublicGetUserProfilePublicInfoByIds op = Build(
                    namespace_,
                    userIds
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
        }

        private PublicGetUserProfilePublicInfoByIds(PublicGetUserProfilePublicInfoByIdsBuilder builder,
            string namespace_,
            string userIds
        )
        {
            PathParams["namespace"] = namespace_;

            if (userIds is not null) QueryParams["userIds"] = userIds;






        }
        #endregion

        #region Response Part        
        public class Response : ApiResponse<List<Model.UserProfilePublicInfo>>
        {

            public ValidationErrorEntity? Error400 { get; set; } = null;


            protected override string GetFullOperationId() => "Basic::UserProfile::PublicGetUserProfilePublicInfoByIds";
        }

        public class Response<T1> : ApiResponse<List<Model.UserProfilePublicInfo<T1>>>
        {
            public ValidationErrorEntity? Error400 { get; set; } = null;


            protected override string GetFullOperationId() => "Basic::UserProfile::PublicGetUserProfilePublicInfoByIds";
        }
        #endregion

        public PublicGetUserProfilePublicInfoByIds(
            string namespace_,
            string userIds
        )
        {
            PathParams["namespace"] = namespace_;

            if (userIds is not null) QueryParams["userIds"] = userIds;






        }

        public override string Path => "/basic/v1/public/namespaces/{namespace}/profiles/public";

        public override HttpMethod Method => HttpMethod.Get;

        public override List<string> Consumes => new() { };

        public override List<string> Produces => new() { "application/json" };

        public PublicGetUserProfilePublicInfoByIds.Response ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            var response = new PublicGetUserProfilePublicInfoByIds.Response()
            {
                StatusCode = code,
                ContentType = contentType
            };

            if (code == (HttpStatusCode)204)
            {
                response.IsSuccess = true;
            }
            else if ((code == (HttpStatusCode)201) || (code == (HttpStatusCode)202) || (code == (HttpStatusCode)200))
            {
                response.Data = JsonSerializer.Deserialize<List<Model.UserProfilePublicInfo>>(payload, ResponseJsonOptions);
                response.IsSuccess = true;
            }
            else if (code == (HttpStatusCode)400)
            {
                response.Error400 = JsonSerializer.Deserialize<ValidationErrorEntity>(payload, ResponseJsonOptions);
                response.Error = response.Error400!.TranslateToApiError();
            }

            return response;
        }

        public PublicGetUserProfilePublicInfoByIds.Response<T1> ParseResponse<T1>(HttpStatusCode code, string contentType, Stream payload)
        {
            var response = new PublicGetUserProfilePublicInfoByIds.Response<T1>()
            {
                StatusCode = code,
                ContentType = contentType
            };

            if (code == (HttpStatusCode)204)
            {
                response.IsSuccess = true;
            }
            else if ((code == (HttpStatusCode)201) || (code == (HttpStatusCode)202) || (code == (HttpStatusCode)200))
            {
                response.Data = JsonSerializer.Deserialize<List<Model.UserProfilePublicInfo<T1>>>(payload, ResponseJsonOptions);
                response.IsSuccess = true;
            }
            else if (code == (HttpStatusCode)400)
            {
                response.Error400 = JsonSerializer.Deserialize<ValidationErrorEntity>(payload, ResponseJsonOptions);
                response.Error = response.Error400!.TranslateToApiError();
            }

            return response;
        }
    }

}