// Copyright (c) 2023 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using System;

using AccelByte.Sdk.Core;

using AccelByte.Sdk.Api.Basic;

namespace AccelByte.Sdk.Api.Basic
{
    public class BasicApi : ISdkApi
    {
        private IAccelByteSdk _Sdk;

        private string _CustomBasePath = String.Empty;

        public Wrapper.Namespace Namespace
        {
            get
            {
                if (_Namespace == null)
                    _Namespace = new Wrapper.Namespace(_Sdk, _CustomBasePath);
                return _Namespace;
            }
        }
        private Wrapper.Namespace? _Namespace = null;

        public Wrapper.Config Config
        {
            get
            {
                if (_Config == null)
                    _Config = new Wrapper.Config(_Sdk, _CustomBasePath);
                return _Config;
            }
        }
        private Wrapper.Config? _Config = null;

        public Wrapper.FileUpload FileUpload
        {
            get
            {
                if (_FileUpload == null)
                    _FileUpload = new Wrapper.FileUpload(_Sdk, _CustomBasePath);
                return _FileUpload;
            }
        }
        private Wrapper.FileUpload? _FileUpload = null;

        public Wrapper.Misc Misc
        {
            get
            {
                if (_Misc == null)
                    _Misc = new Wrapper.Misc(_Sdk, _CustomBasePath);
                return _Misc;
            }
        }
        private Wrapper.Misc? _Misc = null;

        public Wrapper.UserProfile UserProfile
        {
            get
            {
                if (_UserProfile == null)
                    _UserProfile = new Wrapper.UserProfile(_Sdk, _CustomBasePath);
                return _UserProfile;
            }
        }
        private Wrapper.UserProfile? _UserProfile = null;

        public Wrapper.Anonymization Anonymization
        {
            get
            {
                if (_Anonymization == null)
                    _Anonymization = new Wrapper.Anonymization(_Sdk, _CustomBasePath);
                return _Anonymization;
            }
        }
        private Wrapper.Anonymization? _Anonymization = null;

        internal BasicApi(IAccelByteSdk sdk)
        {
            _Sdk = sdk;
        }

        public BasicApi WithCustomBasePath(string value)
        {
            _CustomBasePath = value;
            return this;
        }
    }
}

namespace AccelByte.Sdk.Api
{
    public static class BasicApi_SdkExts
    {
        public static BasicApi GetBasicApi(this IAccelByteSdk sdk)
        {
            return sdk.GetApi<BasicApi>("basic", () =>
            {
                string customPath = sdk.Configuration.ConfigRepository.GetCustomServiceBasePath("basic");
                if (customPath != "")
                    return (new BasicApi(sdk)).WithCustomBasePath(customPath);
                else
                    return new BasicApi(sdk);
            });
        }
    }
}