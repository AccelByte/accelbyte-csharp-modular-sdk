// Copyright (c) 2022-2023 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Matchmaking.Model;

namespace AccelByte.Sdk.Api.Matchmaking.Operation
{
    /// <summary>
    /// CreateChannelHandler
    ///
    /// Creates a new matchmaking channel.
    /// 
    /// Matchmaking channels is a list of pool name that is eligible for matchmaking processes.
    /// GameMode isolates each matchmaking pools.
    /// 
    /// If match timeout is set to 0, by default, incoming matchmaking requests will be timed out after 1 hour.
    /// 
    /// If max worker delay is set to 0, by default, it will wait for at max ~8 seconds during low volume.
    /// 
    /// Rule Set
    /// 
    /// Matching Rule used to classify the player. Player that has matched criteria will be grouped together within an ally.
    /// 
    /// Valid value for criteria is "distance"
    /// </summary>
    public class CreateChannelHandler : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static CreateChannelHandlerBuilder Builder { get => new CreateChannelHandlerBuilder(); }

        public class CreateChannelHandlerBuilder
            : OperationBuilder<CreateChannelHandlerBuilder>
        {





            internal CreateChannelHandlerBuilder() { }

            internal CreateChannelHandlerBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }






            public CreateChannelHandler Build(
                ModelsChannelRequest body,
                string namespace_
            )
            {
                CreateChannelHandler op = new CreateChannelHandler(this,
                    body,
                    namespace_
                );

                op.SetBaseFields<CreateChannelHandlerBuilder>(this);
                return op;
            }

            public Model.ModelsCreateChannelResponse? Execute(
                ModelsChannelRequest body,
                string namespace_
            )
            {
                CreateChannelHandler op = Build(
                    body,
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
        }

        private CreateChannelHandler(CreateChannelHandlerBuilder builder,
            ModelsChannelRequest body,
            string namespace_
        )
        {
            PathParams["namespace"] = namespace_;





            BodyParams = body;


            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public CreateChannelHandler(
            string namespace_,
            Model.ModelsChannelRequest body
        )
        {
            PathParams["namespace"] = namespace_;





            BodyParams = body;


            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/matchmaking/namespaces/{namespace}/channels";

        public override HttpMethod Method => HttpMethod.Post;

        public override List<string> Consumes => new() { "application/json" };

        public override List<string> Produces => new() { "application/json" };

        public Model.ModelsCreateChannelResponse? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                return JsonSerializer.Deserialize<Model.ModelsCreateChannelResponse>(payload, ResponseJsonOptions);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.ModelsCreateChannelResponse>(payload, ResponseJsonOptions);
            }

            var payloadString = payload.ReadToString();

            throw new HttpResponseException(code, payloadString);
        }
    }

}