// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Matchmaking.Model;

namespace AccelByte.Sdk.Api.Matchmaking.Operation
{
    /// <summary>
    /// BulkGetSessions
    ///
    /// Bulk get sessions.
    /// </summary>
    public class BulkGetSessions : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static BulkGetSessionsBuilder Builder { get => new BulkGetSessionsBuilder(); }

        public class BulkGetSessionsBuilder
            : OperationBuilder<BulkGetSessionsBuilder>
        {

            public string? MatchIDs { get; set; }





            internal BulkGetSessionsBuilder() { }

            internal BulkGetSessionsBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }


            public BulkGetSessionsBuilder SetMatchIDs(string _matchIDs)
            {
                MatchIDs = _matchIDs;
                return this;
            }





            public BulkGetSessions Build(
                string namespace_
            )
            {
                BulkGetSessions op = new BulkGetSessions(this,
                    namespace_
                );

                op.SetBaseFields<BulkGetSessionsBuilder>(this);
                return op;
            }

            public List<Model.ModelsMatchmakingResult>? Execute(
                string namespace_
            )
            {
                BulkGetSessions op = Build(
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
            public async Task<List<Model.ModelsMatchmakingResult>?> ExecuteAsync(
                string namespace_
            )
            {
                BulkGetSessions op = Build(
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }

            public List<Model.ModelsMatchmakingResult<T1>>? Execute<T1>(
                string namespace_
            )
            {
                BulkGetSessions op = Build(
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
            public async Task<List<Model.ModelsMatchmakingResult<T1>>?> ExecuteAsync<T1>(
                string namespace_
            )
            {
                BulkGetSessions op = Build(
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
        }

        private BulkGetSessions(BulkGetSessionsBuilder builder,
            string namespace_
        )
        {
            PathParams["namespace"] = namespace_;

            if (builder.MatchIDs is not null) QueryParams["matchIDs"] = builder.MatchIDs;






            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public BulkGetSessions(
            string namespace_,
            string? matchIDs
        )
        {
            PathParams["namespace"] = namespace_;

            if (matchIDs is not null) QueryParams["matchIDs"] = matchIDs;






            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/matchmaking/v1/admin/namespaces/{namespace}/channels/all/sessions/bulk";

        public override HttpMethod Method => HttpMethod.Get;

        public override List<string> Consumes => new() { "application/json" };

        public override List<string> Produces => new() { "application/json" };

        public List<Model.ModelsMatchmakingResult>? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                return JsonSerializer.Deserialize<List<Model.ModelsMatchmakingResult>>(payload, ResponseJsonOptions);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<List<Model.ModelsMatchmakingResult>>(payload, ResponseJsonOptions);
            }

            var payloadString = payload.ReadToString();

            throw new HttpResponseException(code, payloadString);
        }

        public List<Model.ModelsMatchmakingResult<T1>>? ParseResponse<T1>(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                return JsonSerializer.Deserialize<List<Model.ModelsMatchmakingResult<T1>>>(payload, ResponseJsonOptions);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<List<Model.ModelsMatchmakingResult<T1>>>(payload, ResponseJsonOptions);
            }

            var payloadString = payload.ReadToString();
            throw new HttpResponseException(code, payloadString);
        }
    }

}