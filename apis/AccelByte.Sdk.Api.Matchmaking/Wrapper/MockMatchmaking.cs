// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;

using AccelByte.Sdk.Api.Matchmaking.Model;
using AccelByte.Sdk.Api.Matchmaking.Operation;

namespace AccelByte.Sdk.Api.Matchmaking.Wrapper
{
    public class MockMatchmaking
    {
        private readonly IAccelByteSdk _sdk;

        private string _CustomBasePath = String.Empty;

        public MockMatchmaking(IAccelByteSdk sdk)
        {
            _sdk = sdk;
        }

        public MockMatchmaking(IAccelByteSdk sdk, string customBasePath)
        {
            _sdk = sdk;
            _CustomBasePath = customBasePath;
        }

        #region Operation Builders
        public CleanAllMocks.CleanAllMocksBuilder CleanAllMocksOp
        {
            get
            {
                var opBuilder = new Operation.CleanAllMocks.CleanAllMocksBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public GetAllMockMatches.GetAllMockMatchesBuilder GetAllMockMatchesOp
        {
            get
            {
                var opBuilder = new Operation.GetAllMockMatches.GetAllMockMatchesBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public GetMockMatchesByTimestamp.GetMockMatchesByTimestampBuilder GetMockMatchesByTimestampOp
        {
            get
            {
                var opBuilder = new Operation.GetMockMatchesByTimestamp.GetMockMatchesByTimestampBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public GetAllMockTickets.GetAllMockTicketsBuilder GetAllMockTicketsOp
        {
            get
            {
                var opBuilder = new Operation.GetAllMockTickets.GetAllMockTicketsBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public CreateMockTickets.CreateMockTicketsBuilder CreateMockTicketsOp
        {
            get
            {
                var opBuilder = new Operation.CreateMockTickets.CreateMockTicketsBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public BulkCreateMockTickets.BulkCreateMockTicketsBuilder BulkCreateMockTicketsOp
        {
            get
            {
                var opBuilder = new Operation.BulkCreateMockTickets.BulkCreateMockTicketsBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public GetMockTicketsByTimestamp.GetMockTicketsByTimestampBuilder GetMockTicketsByTimestampOp
        {
            get
            {
                var opBuilder = new Operation.GetMockTicketsByTimestamp.GetMockTicketsByTimestampBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        #endregion

        public void CleanAllMocks(CleanAllMocks input)
        {
            var response = _sdk.RunRequest(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task CleanAllMocksAsync(CleanAllMocks input)
        {
            var response = await _sdk.RunRequestAsync(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ModelsGetMockMatchesResponse? GetAllMockMatches(GetAllMockMatches input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ModelsGetMockMatchesResponse?> GetAllMockMatchesAsync(GetAllMockMatches input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ModelsGetMockMatchesResponse? GetMockMatchesByTimestamp(GetMockMatchesByTimestamp input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ModelsGetMockMatchesResponse?> GetMockMatchesByTimestampAsync(GetMockMatchesByTimestamp input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ModelsGetMockTicketsResponse? GetAllMockTickets(GetAllMockTickets input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ModelsGetMockTicketsResponse?> GetAllMockTicketsAsync(GetAllMockTickets input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public List<Model.ModelsMockTicket>? CreateMockTickets(CreateMockTickets input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<List<Model.ModelsMockTicket>?> CreateMockTicketsAsync(CreateMockTickets input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public List<Model.ModelsMockTicket<T1, T2>>? CreateMockTickets<T1, T2>(CreateMockTickets input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1, T2>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<List<Model.ModelsMockTicket<T1, T2>>?> CreateMockTicketsAsync<T1, T2>(CreateMockTickets input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1, T2>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public void BulkCreateMockTickets(BulkCreateMockTickets input)
        {
            var response = _sdk.RunRequest(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task BulkCreateMockTicketsAsync(BulkCreateMockTickets input)
        {
            var response = await _sdk.RunRequestAsync(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ModelsGetMockTicketsResponse? GetMockTicketsByTimestamp(GetMockTicketsByTimestamp input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ModelsGetMockTicketsResponse?> GetMockTicketsByTimestampAsync(GetMockTicketsByTimestamp input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
    }
}