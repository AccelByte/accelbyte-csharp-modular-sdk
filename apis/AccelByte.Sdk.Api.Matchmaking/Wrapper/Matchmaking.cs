// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;

using AccelByte.Sdk.Api.Matchmaking.Model;
using AccelByte.Sdk.Api.Matchmaking.Operation;

namespace AccelByte.Sdk.Api.Matchmaking.Wrapper
{
    public class Matchmaking
    {
        private readonly IAccelByteSdk _sdk;

        private string _CustomBasePath = String.Empty;

        public Matchmaking(IAccelByteSdk sdk)
        {
            _sdk = sdk;
        }

        public Matchmaking(IAccelByteSdk sdk, string customBasePath)
        {
            _sdk = sdk;
            _CustomBasePath = customBasePath;
        }

        #region Operation Builders
        public GetAllChannelsHandler.GetAllChannelsHandlerBuilder GetAllChannelsHandlerOp
        {
            get
            {
                var opBuilder = new Operation.GetAllChannelsHandler.GetAllChannelsHandlerBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public CreateChannelHandler.CreateChannelHandlerBuilder CreateChannelHandlerOp
        {
            get
            {
                var opBuilder = new Operation.CreateChannelHandler.CreateChannelHandlerBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public GetMatchPoolMetric.GetMatchPoolMetricBuilder GetMatchPoolMetricOp
        {
            get
            {
                var opBuilder = new Operation.GetMatchPoolMetric.GetMatchPoolMetricBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public DeleteChannelHandler.DeleteChannelHandlerBuilder DeleteChannelHandlerOp
        {
            get
            {
                var opBuilder = new Operation.DeleteChannelHandler.DeleteChannelHandlerBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public StoreMatchResults.StoreMatchResultsBuilder StoreMatchResultsOp
        {
            get
            {
                var opBuilder = new Operation.StoreMatchResults.StoreMatchResultsBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public Rebalance.RebalanceBuilder RebalanceOp
        {
            get
            {
                var opBuilder = new Operation.Rebalance.RebalanceBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public QueueSessionHandler.QueueSessionHandlerBuilder QueueSessionHandlerOp
        {
            get
            {
                var opBuilder = new Operation.QueueSessionHandler.QueueSessionHandlerBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public DequeueSessionHandler.DequeueSessionHandlerBuilder DequeueSessionHandlerOp
        {
            get
            {
                var opBuilder = new Operation.DequeueSessionHandler.DequeueSessionHandlerBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public QuerySessionHandler.QuerySessionHandlerBuilder QuerySessionHandlerOp
        {
            get
            {
                var opBuilder = new Operation.QuerySessionHandler.QuerySessionHandlerBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public GetAllPartyInAllChannel.GetAllPartyInAllChannelBuilder GetAllPartyInAllChannelOp
        {
            get
            {
                var opBuilder = new Operation.GetAllPartyInAllChannel.GetAllPartyInAllChannelBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public BulkGetSessions.BulkGetSessionsBuilder BulkGetSessionsOp
        {
            get
            {
                var opBuilder = new Operation.BulkGetSessions.BulkGetSessionsBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public ExportChannels.ExportChannelsBuilder ExportChannelsOp
        {
            get
            {
                var opBuilder = new Operation.ExportChannels.ExportChannelsBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public ImportChannels.ImportChannelsBuilder ImportChannelsOp
        {
            get
            {
                var opBuilder = new Operation.ImportChannels.ImportChannelsBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public GetSingleMatchmakingChannel.GetSingleMatchmakingChannelBuilder GetSingleMatchmakingChannelOp
        {
            get
            {
                var opBuilder = new Operation.GetSingleMatchmakingChannel.GetSingleMatchmakingChannelBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public UpdateMatchmakingChannel.UpdateMatchmakingChannelBuilder UpdateMatchmakingChannelOp
        {
            get
            {
                var opBuilder = new Operation.UpdateMatchmakingChannel.UpdateMatchmakingChannelBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public GetAllPartyInChannel.GetAllPartyInChannelBuilder GetAllPartyInChannelOp
        {
            get
            {
                var opBuilder = new Operation.GetAllPartyInChannel.GetAllPartyInChannelBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public GetAllSessionsInChannel.GetAllSessionsInChannelBuilder GetAllSessionsInChannelOp
        {
            get
            {
                var opBuilder = new Operation.GetAllSessionsInChannel.GetAllSessionsInChannelBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AddUserIntoSessionInChannel.AddUserIntoSessionInChannelBuilder AddUserIntoSessionInChannelOp
        {
            get
            {
                var opBuilder = new Operation.AddUserIntoSessionInChannel.AddUserIntoSessionInChannelBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public DeleteSessionInChannel.DeleteSessionInChannelBuilder DeleteSessionInChannelOp
        {
            get
            {
                var opBuilder = new Operation.DeleteSessionInChannel.DeleteSessionInChannelBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public DeleteUserFromSessionInChannel.DeleteUserFromSessionInChannelBuilder DeleteUserFromSessionInChannelOp
        {
            get
            {
                var opBuilder = new Operation.DeleteUserFromSessionInChannel.DeleteUserFromSessionInChannelBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public GetStatData.GetStatDataBuilder GetStatDataOp
        {
            get
            {
                var opBuilder = new Operation.GetStatData.GetStatDataBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        [Obsolete(DiagnosticId = "ab_deprecated_operation_wrapper")]
        public SearchSessions.SearchSessionsBuilder SearchSessionsOp
        {
            get
            {
                var opBuilder = new Operation.SearchSessions.SearchSessionsBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        [Obsolete(DiagnosticId = "ab_deprecated_operation_wrapper")]
        public GetSessionHistoryDetailed.GetSessionHistoryDetailedBuilder GetSessionHistoryDetailedOp
        {
            get
            {
                var opBuilder = new Operation.GetSessionHistoryDetailed.GetSessionHistoryDetailedBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public PublicGetAllMatchmakingChannel.PublicGetAllMatchmakingChannelBuilder PublicGetAllMatchmakingChannelOp
        {
            get
            {
                var opBuilder = new Operation.PublicGetAllMatchmakingChannel.PublicGetAllMatchmakingChannelBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public PublicGetSingleMatchmakingChannel.PublicGetSingleMatchmakingChannelBuilder PublicGetSingleMatchmakingChannelOp
        {
            get
            {
                var opBuilder = new Operation.PublicGetSingleMatchmakingChannel.PublicGetSingleMatchmakingChannelBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        [Obsolete(DiagnosticId = "ab_deprecated_operation_wrapper")]
        public SearchSessionsV2.SearchSessionsV2Builder SearchSessionsV2Op
        {
            get
            {
                var opBuilder = new Operation.SearchSessionsV2.SearchSessionsV2Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        #endregion

        public Model.ModelsGetChannelsResponse? GetAllChannelsHandler(GetAllChannelsHandler input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ModelsGetChannelsResponse?> GetAllChannelsHandlerAsync(GetAllChannelsHandler input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ModelsCreateChannelResponse? CreateChannelHandler(CreateChannelHandler input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ModelsCreateChannelResponse?> CreateChannelHandlerAsync(CreateChannelHandler input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ModelsTicketMetricResultRecord? GetMatchPoolMetric(GetMatchPoolMetric input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ModelsTicketMetricResultRecord?> GetMatchPoolMetricAsync(GetMatchPoolMetric input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public void DeleteChannelHandler(DeleteChannelHandler input)
        {
            var response = _sdk.RunRequest(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task DeleteChannelHandlerAsync(DeleteChannelHandler input)
        {
            var response = await _sdk.RunRequestAsync(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ModelsMatchResultResponse? StoreMatchResults(StoreMatchResults input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ModelsMatchResultResponse?> StoreMatchResultsAsync(StoreMatchResults input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ModelsRebalanceResponse? Rebalance(Rebalance input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ModelsRebalanceResponse?> RebalanceAsync(Rebalance input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public void QueueSessionHandler(QueueSessionHandler input)
        {
            var response = _sdk.RunRequest(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task QueueSessionHandlerAsync(QueueSessionHandler input)
        {
            var response = await _sdk.RunRequestAsync(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public void DequeueSessionHandler(DequeueSessionHandler input)
        {
            var response = _sdk.RunRequest(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task DequeueSessionHandlerAsync(DequeueSessionHandler input)
        {
            var response = await _sdk.RunRequestAsync(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ModelsMatchmakingResult? QuerySessionHandler(QuerySessionHandler input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ModelsMatchmakingResult?> QuerySessionHandlerAsync(QuerySessionHandler input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public Model.ModelsMatchmakingResult<T1>? QuerySessionHandler<T1>(QuerySessionHandler input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ModelsMatchmakingResult<T1>?> QuerySessionHandlerAsync<T1>(QuerySessionHandler input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Dictionary<string, List<Model.ModelsMatchingParty>>? GetAllPartyInAllChannel(GetAllPartyInAllChannel input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Dictionary<string, List<Model.ModelsMatchingParty>>?> GetAllPartyInAllChannelAsync(GetAllPartyInAllChannel input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public Dictionary<string, List<Model.ModelsMatchingParty<T1>>>? GetAllPartyInAllChannel<T1>(GetAllPartyInAllChannel input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Dictionary<string, List<Model.ModelsMatchingParty<T1>>>?> GetAllPartyInAllChannelAsync<T1>(GetAllPartyInAllChannel input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public List<Model.ModelsMatchmakingResult>? BulkGetSessions(BulkGetSessions input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<List<Model.ModelsMatchmakingResult>?> BulkGetSessionsAsync(BulkGetSessions input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public List<Model.ModelsMatchmakingResult<T1>>? BulkGetSessions<T1>(BulkGetSessions input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<List<Model.ModelsMatchmakingResult<T1>>?> BulkGetSessionsAsync<T1>(BulkGetSessions input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Stream? ExportChannels(ExportChannels input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Stream?> ExportChannelsAsync(ExportChannels input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ModelsImportConfigResponse? ImportChannels(ImportChannels input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ModelsImportConfigResponse?> ImportChannelsAsync(ImportChannels input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ModelsChannelV1? GetSingleMatchmakingChannel(GetSingleMatchmakingChannel input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ModelsChannelV1?> GetSingleMatchmakingChannelAsync(GetSingleMatchmakingChannel input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public void UpdateMatchmakingChannel(UpdateMatchmakingChannel input)
        {
            var response = _sdk.RunRequest(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task UpdateMatchmakingChannelAsync(UpdateMatchmakingChannel input)
        {
            var response = await _sdk.RunRequestAsync(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public List<Model.ModelsMatchingParty>? GetAllPartyInChannel(GetAllPartyInChannel input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<List<Model.ModelsMatchingParty>?> GetAllPartyInChannelAsync(GetAllPartyInChannel input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public List<Model.ModelsMatchingParty<T1>>? GetAllPartyInChannel<T1>(GetAllPartyInChannel input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<List<Model.ModelsMatchingParty<T1>>?> GetAllPartyInChannelAsync<T1>(GetAllPartyInChannel input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public List<Model.ModelsMatchmakingResult>? GetAllSessionsInChannel(GetAllSessionsInChannel input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<List<Model.ModelsMatchmakingResult>?> GetAllSessionsInChannelAsync(GetAllSessionsInChannel input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public List<Model.ModelsMatchmakingResult<T1>>? GetAllSessionsInChannel<T1>(GetAllSessionsInChannel input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<List<Model.ModelsMatchmakingResult<T1>>?> GetAllSessionsInChannelAsync<T1>(GetAllSessionsInChannel input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public void AddUserIntoSessionInChannel(AddUserIntoSessionInChannel input)
        {
            var response = _sdk.RunRequest(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task AddUserIntoSessionInChannelAsync(AddUserIntoSessionInChannel input)
        {
            var response = await _sdk.RunRequestAsync(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public void DeleteSessionInChannel(DeleteSessionInChannel input)
        {
            var response = _sdk.RunRequest(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task DeleteSessionInChannelAsync(DeleteSessionInChannel input)
        {
            var response = await _sdk.RunRequestAsync(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public void DeleteUserFromSessionInChannel(DeleteUserFromSessionInChannel input)
        {
            var response = _sdk.RunRequest(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task DeleteUserFromSessionInChannelAsync(DeleteUserFromSessionInChannel input)
        {
            var response = await _sdk.RunRequestAsync(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ModelsStatResumeResponse? GetStatData(GetStatData input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ModelsStatResumeResponse?> GetStatDataAsync(GetStatData input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
#pragma warning disable ab_deprecated_operation
        [Obsolete(DiagnosticId = "ab_deprecated_operation_wrapper")]
        public Model.ServiceGetSessionHistorySearchResponse? SearchSessions(SearchSessions input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ServiceGetSessionHistorySearchResponse?> SearchSessionsAsync(SearchSessions input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
#pragma warning restore ab_deprecated_operation
#pragma warning disable ab_deprecated_operation
        [Obsolete(DiagnosticId = "ab_deprecated_operation_wrapper")]
        public List<Model.ServiceGetSessionHistoryDetailedResponseItem>? GetSessionHistoryDetailed(GetSessionHistoryDetailed input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<List<Model.ServiceGetSessionHistoryDetailedResponseItem>?> GetSessionHistoryDetailedAsync(GetSessionHistoryDetailed input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
#pragma warning restore ab_deprecated_operation
        public List<Model.ModelsChannelV1>? PublicGetAllMatchmakingChannel(PublicGetAllMatchmakingChannel input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<List<Model.ModelsChannelV1>?> PublicGetAllMatchmakingChannelAsync(PublicGetAllMatchmakingChannel input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ModelsChannelV1? PublicGetSingleMatchmakingChannel(PublicGetSingleMatchmakingChannel input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ModelsChannelV1?> PublicGetSingleMatchmakingChannelAsync(PublicGetSingleMatchmakingChannel input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
#pragma warning disable ab_deprecated_operation
        [Obsolete(DiagnosticId = "ab_deprecated_operation_wrapper")]
        public Model.ServiceGetSessionHistorySearchResponseV2? SearchSessionsV2(SearchSessionsV2 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ServiceGetSessionHistorySearchResponseV2?> SearchSessionsV2Async(SearchSessionsV2 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
#pragma warning restore ab_deprecated_operation
    }
}