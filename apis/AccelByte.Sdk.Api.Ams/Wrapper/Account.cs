// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;

using AccelByte.Sdk.Api.Ams.Model;
using AccelByte.Sdk.Api.Ams.Operation;

namespace AccelByte.Sdk.Api.Ams.Wrapper
{
    public class Account
    {
        private readonly IAccelByteSdk _sdk;

        private string _CustomBasePath = String.Empty;

        public Account(IAccelByteSdk sdk)
        {
            _sdk = sdk;
        }

        public Account(IAccelByteSdk sdk, string customBasePath)
        {
            _sdk = sdk;
            _CustomBasePath = customBasePath;
        }

        #region Operation Builders
        public AdminAccountGet.AdminAccountGetBuilder AdminAccountGetOp
        {
            get
            {
                var opBuilder = new Operation.AdminAccountGet.AdminAccountGetBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminAccountCreate.AdminAccountCreateBuilder AdminAccountCreateOp
        {
            get
            {
                var opBuilder = new Operation.AdminAccountCreate.AdminAccountCreateBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminAccountLinkTokenGet.AdminAccountLinkTokenGetBuilder AdminAccountLinkTokenGetOp
        {
            get
            {
                var opBuilder = new Operation.AdminAccountLinkTokenGet.AdminAccountLinkTokenGetBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminAccountLinkTokenPost.AdminAccountLinkTokenPostBuilder AdminAccountLinkTokenPostOp
        {
            get
            {
                var opBuilder = new Operation.AdminAccountLinkTokenPost.AdminAccountLinkTokenPostBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AccountGet.AccountGetBuilder AccountGetOp
        {
            get
            {
                var opBuilder = new Operation.AccountGet.AccountGetBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        #endregion

        public Model.ApiAccountResponse? AdminAccountGet(AdminAccountGet input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ApiAccountResponse?> AdminAccountGetAsync(AdminAccountGet input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ApiAccountCreateResponse? AdminAccountCreate(AdminAccountCreate input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ApiAccountCreateResponse?> AdminAccountCreateAsync(AdminAccountCreate input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ApiAccountLinkTokenResponse? AdminAccountLinkTokenGet(AdminAccountLinkTokenGet input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ApiAccountLinkTokenResponse?> AdminAccountLinkTokenGetAsync(AdminAccountLinkTokenGet input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ApiAccountLinkResponse? AdminAccountLinkTokenPost(AdminAccountLinkTokenPost input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ApiAccountLinkResponse?> AdminAccountLinkTokenPostAsync(AdminAccountLinkTokenPost input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ApiAccountResponse? AccountGet(AccountGet input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ApiAccountResponse?> AccountGetAsync(AccountGet input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
    }
}