// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;

using AccelByte.Sdk.Api.Ams.Model;
using AccelByte.Sdk.Api.Ams.Operation;

namespace AccelByte.Sdk.Api.Ams.Wrapper
{
    public class Servers
    {
        private readonly IAccelByteSdk _sdk;

        private string _CustomBasePath = String.Empty;

        public Servers(IAccelByteSdk sdk)
        {
            _sdk = sdk;
        }

        public Servers(IAccelByteSdk sdk, string customBasePath)
        {
            _sdk = sdk;
            _CustomBasePath = customBasePath;
        }

        #region Operation Builders
        public FleetServerHistory.FleetServerHistoryBuilder FleetServerHistoryOp
        {
            get
            {
                var opBuilder = new Operation.FleetServerHistory.FleetServerHistoryBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public FleetServerInfo.FleetServerInfoBuilder FleetServerInfoOp
        {
            get
            {
                var opBuilder = new Operation.FleetServerInfo.FleetServerInfoBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public FleetServerConnectionInfo.FleetServerConnectionInfoBuilder FleetServerConnectionInfoOp
        {
            get
            {
                var opBuilder = new Operation.FleetServerConnectionInfo.FleetServerConnectionInfoBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public ServerHistory.ServerHistoryBuilder ServerHistoryOp
        {
            get
            {
                var opBuilder = new Operation.ServerHistory.ServerHistoryBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        #endregion

        public FleetServerHistory.Response FleetServerHistory(FleetServerHistory input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<FleetServerHistory.Response> FleetServerHistoryAsync(FleetServerHistory input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public FleetServerInfo.Response FleetServerInfo(FleetServerInfo input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<FleetServerInfo.Response> FleetServerInfoAsync(FleetServerInfo input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public FleetServerConnectionInfo.Response FleetServerConnectionInfo(FleetServerConnectionInfo input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<FleetServerConnectionInfo.Response> FleetServerConnectionInfoAsync(FleetServerConnectionInfo input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public ServerHistory.Response ServerHistory(ServerHistory input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<ServerHistory.Response> ServerHistoryAsync(ServerHistory input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
    }
}