// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;

using AccelByte.Sdk.Api.Ams.Model;
using AccelByte.Sdk.Api.Ams.Operation;

namespace AccelByte.Sdk.Api.Ams.Wrapper
{
    public class Fleets
    {
        private readonly IAccelByteSdk _sdk;

        private string _CustomBasePath = String.Empty;

        public Fleets(IAccelByteSdk sdk)
        {
            _sdk = sdk;
        }

        public Fleets(IAccelByteSdk sdk, string customBasePath)
        {
            _sdk = sdk;
            _CustomBasePath = customBasePath;
        }

        #region Operation Builders
        public FleetList.FleetListBuilder FleetListOp
        {
            get
            {
                var opBuilder = new Operation.FleetList.FleetListBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public FleetCreate.FleetCreateBuilder FleetCreateOp
        {
            get
            {
                var opBuilder = new Operation.FleetCreate.FleetCreateBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public FleetGet.FleetGetBuilder FleetGetOp
        {
            get
            {
                var opBuilder = new Operation.FleetGet.FleetGetBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public FleetUpdate.FleetUpdateBuilder FleetUpdateOp
        {
            get
            {
                var opBuilder = new Operation.FleetUpdate.FleetUpdateBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public FleetDelete.FleetDeleteBuilder FleetDeleteOp
        {
            get
            {
                var opBuilder = new Operation.FleetDelete.FleetDeleteBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public FleetServers.FleetServersBuilder FleetServersOp
        {
            get
            {
                var opBuilder = new Operation.FleetServers.FleetServersBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public FleetClaimByID.FleetClaimByIDBuilder FleetClaimByIDOp
        {
            get
            {
                var opBuilder = new Operation.FleetClaimByID.FleetClaimByIDBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public FleetClaimByKeys.FleetClaimByKeysBuilder FleetClaimByKeysOp
        {
            get
            {
                var opBuilder = new Operation.FleetClaimByKeys.FleetClaimByKeysBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        #endregion

        public FleetList.Response FleetList(FleetList input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<FleetList.Response> FleetListAsync(FleetList input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public FleetCreate.Response FleetCreate(FleetCreate input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<FleetCreate.Response> FleetCreateAsync(FleetCreate input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public FleetGet.Response FleetGet(FleetGet input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<FleetGet.Response> FleetGetAsync(FleetGet input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public FleetUpdate.Response FleetUpdate(FleetUpdate input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<FleetUpdate.Response> FleetUpdateAsync(FleetUpdate input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public FleetDelete.Response FleetDelete(FleetDelete input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<FleetDelete.Response> FleetDeleteAsync(FleetDelete input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public FleetServers.Response FleetServers(FleetServers input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<FleetServers.Response> FleetServersAsync(FleetServers input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public FleetClaimByID.Response FleetClaimByID(FleetClaimByID input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<FleetClaimByID.Response> FleetClaimByIDAsync(FleetClaimByID input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public FleetClaimByKeys.Response FleetClaimByKeys(FleetClaimByKeys input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<FleetClaimByKeys.Response> FleetClaimByKeysAsync(FleetClaimByKeys input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
    }
}