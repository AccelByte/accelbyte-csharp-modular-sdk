// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Ams.Model;

namespace AccelByte.Sdk.Api.Ams.Operation
{
    /// <summary>
    /// ImageList
    ///
    /// Returns images which exist (uploaded, uploading, or building) in the linked account. This route fails if no account is linked
    /// 
    /// Required Permission: ADMIN:NAMESPACE:{namespace}:AMS:IMAGE [READ]
    /// </summary>
    public class ImageList : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static ImageListBuilder Builder { get => new ImageListBuilder(); }

        public class ImageListBuilder
            : OperationBuilder<ImageListBuilder>
        {

            public long? Count { get; set; }

            public string? InUse { get; set; }

            public bool? IsProtected { get; set; }

            public string? Name { get; set; }

            public long? Offset { get; set; }

            public string? SortBy { get; set; }

            public string? SortDirection { get; set; }

            public string? Status { get; set; }

            public string? Tag { get; set; }

            public string? TargetArchitecture { get; set; }





            internal ImageListBuilder() { }

            internal ImageListBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }


            public ImageListBuilder SetCount(long _count)
            {
                Count = _count;
                return this;
            }

            public ImageListBuilder SetInUse(string _inUse)
            {
                InUse = _inUse;
                return this;
            }

            public ImageListBuilder SetIsProtected(bool _isProtected)
            {
                IsProtected = _isProtected;
                return this;
            }

            public ImageListBuilder SetName(string _name)
            {
                Name = _name;
                return this;
            }

            public ImageListBuilder SetOffset(long _offset)
            {
                Offset = _offset;
                return this;
            }

            public ImageListBuilder SetSortBy(string _sortBy)
            {
                SortBy = _sortBy;
                return this;
            }

            public ImageListBuilder SetSortDirection(string _sortDirection)
            {
                SortDirection = _sortDirection;
                return this;
            }

            public ImageListBuilder SetStatus(string _status)
            {
                Status = _status;
                return this;
            }

            public ImageListBuilder SetTag(string _tag)
            {
                Tag = _tag;
                return this;
            }

            public ImageListBuilder SetTargetArchitecture(string _targetArchitecture)
            {
                TargetArchitecture = _targetArchitecture;
                return this;
            }





            public ImageList Build(
                string namespace_
            )
            {
                ImageList op = new ImageList(this,
                    namespace_                    
                );

                op.SetBaseFields<ImageListBuilder>(this);
                return op;
            }

            public ImageList.Response Execute(
                string namespace_
            )
            {
                ImageList op = Build(
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
            public async Task<ImageList.Response> ExecuteAsync(
                string namespace_
            )
            {
                ImageList op = Build(
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
        }

        private ImageList(ImageListBuilder builder,
            string namespace_
        )
        {
            PathParams["namespace"] = namespace_;
            
            if (builder.Count != null) QueryParams["count"] = Convert.ToString(builder.Count)!;
            if (builder.InUse is not null) QueryParams["inUse"] = builder.InUse;
            if (builder.IsProtected != null) QueryParams["isProtected"] = Convert.ToString(builder.IsProtected)!;
            if (builder.Name is not null) QueryParams["name"] = builder.Name;
            if (builder.Offset != null) QueryParams["offset"] = Convert.ToString(builder.Offset)!;
            if (builder.SortBy is not null) QueryParams["sortBy"] = builder.SortBy;
            if (builder.SortDirection is not null) QueryParams["sortDirection"] = builder.SortDirection;
            if (builder.Status is not null) QueryParams["status"] = builder.Status;
            if (builder.Tag is not null) QueryParams["tag"] = builder.Tag;
            if (builder.TargetArchitecture is not null) QueryParams["targetArchitecture"] = builder.TargetArchitecture;
            

            
            
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        #region Response Part        
        public class Response : ApiResponse<Model.ApiImageList>
        {

            public ResponseErrorResponse? Error401 { get; set; } = null;

            public ResponseErrorResponse? Error403 { get; set; } = null;

            public ResponseErrorResponse? Error404 { get; set; } = null;

            public ResponseErrorResponse? Error500 { get; set; } = null;


            protected override string GetFullOperationId() => "Ams::Images::ImageList";
        }

        #endregion

        public ImageList(
            string namespace_,            
            long? count,            
            string? inUse,            
            bool? isProtected,            
            string? name,            
            long? offset,            
            string? sortBy,            
            string? sortDirection,            
            string? status,            
            string? tag,            
            string? targetArchitecture            
        )
        {
            PathParams["namespace"] = namespace_;
            
            if (count != null) QueryParams["count"] = Convert.ToString(count)!;
            if (inUse is not null) QueryParams["inUse"] = inUse;
            if (isProtected != null) QueryParams["isProtected"] = Convert.ToString(isProtected)!;
            if (name is not null) QueryParams["name"] = name;
            if (offset != null) QueryParams["offset"] = Convert.ToString(offset)!;
            if (sortBy is not null) QueryParams["sortBy"] = sortBy;
            if (sortDirection is not null) QueryParams["sortDirection"] = sortDirection;
            if (status is not null) QueryParams["status"] = status;
            if (tag is not null) QueryParams["tag"] = tag;
            if (targetArchitecture is not null) QueryParams["targetArchitecture"] = targetArchitecture;
            

            
            
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/ams/v1/admin/namespaces/{namespace}/images";

        public override HttpMethod Method => HttpMethod.Get;

        public override List<string> Consumes => new() { "application/json" };

        public override List<string> Produces => new() { "application/json" };
        
        public ImageList.Response ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            var response = new ImageList.Response()
            {
                StatusCode = code,
                ContentType = contentType
            };

            if (code == (HttpStatusCode)204)
            {
                response.IsSuccess = true;
            }
            else if ((code == (HttpStatusCode)201) || (code == (HttpStatusCode)202) || (code == (HttpStatusCode)200))
            {
                response.Data = JsonSerializer.Deserialize<Model.ApiImageList>(payload, ResponseJsonOptions);
                response.IsSuccess = true;
            }
            else if (code == (HttpStatusCode)401)
            {
                response.Error401 = JsonSerializer.Deserialize<ResponseErrorResponse>(payload, ResponseJsonOptions);
                response.Error = response.Error401!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)403)
            {
                response.Error403 = JsonSerializer.Deserialize<ResponseErrorResponse>(payload, ResponseJsonOptions);
                response.Error = response.Error403!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)404)
            {
                response.Error404 = JsonSerializer.Deserialize<ResponseErrorResponse>(payload, ResponseJsonOptions);
                response.Error = response.Error404!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)500)
            {
                response.Error500 = JsonSerializer.Deserialize<ResponseErrorResponse>(payload, ResponseJsonOptions);
                response.Error = response.Error500!.TranslateToApiError();
            }

            return response;
        }
    }

}