// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Ams.Model;

namespace AccelByte.Sdk.Api.Ams.Operation
{
    /// <summary>
    /// DevelopmentServerConfigurationGet
    ///
    /// Required Permission: ADMIN:NAMESPACE:{namespace}:ARMADA:FLEET [READ]
    /// </summary>
    public class DevelopmentServerConfigurationGet : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static DevelopmentServerConfigurationGetBuilder Builder { get => new DevelopmentServerConfigurationGetBuilder(); }

        public class DevelopmentServerConfigurationGetBuilder
            : OperationBuilder<DevelopmentServerConfigurationGetBuilder>
        {





            internal DevelopmentServerConfigurationGetBuilder() { }

            internal DevelopmentServerConfigurationGetBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }






            public DevelopmentServerConfigurationGet Build(
                string developmentServerConfigID,
                string namespace_
            )
            {
                DevelopmentServerConfigurationGet op = new DevelopmentServerConfigurationGet(this,
                    developmentServerConfigID,                    
                    namespace_                    
                );

                op.SetBaseFields<DevelopmentServerConfigurationGetBuilder>(this);
                return op;
            }

            public Model.ApiDevelopmentServerConfigurationGetResponse? Execute(
                string developmentServerConfigID,
                string namespace_
            )
            {
                DevelopmentServerConfigurationGet op = Build(
                    developmentServerConfigID,
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
            public async Task<Model.ApiDevelopmentServerConfigurationGetResponse?> ExecuteAsync(
                string developmentServerConfigID,
                string namespace_
            )
            {
                DevelopmentServerConfigurationGet op = Build(
                    developmentServerConfigID,
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
        }

        private DevelopmentServerConfigurationGet(DevelopmentServerConfigurationGetBuilder builder,
            string developmentServerConfigID,
            string namespace_
        )
        {
            PathParams["developmentServerConfigID"] = developmentServerConfigID;
            PathParams["namespace"] = namespace_;
            
            

            
            
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public DevelopmentServerConfigurationGet(
            string developmentServerConfigID,            
            string namespace_            
        )
        {
            PathParams["developmentServerConfigID"] = developmentServerConfigID;
            PathParams["namespace"] = namespace_;
            
            

            
            
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/ams/v1/admin/namespaces/{namespace}/development/server-configurations/{developmentServerConfigID}";

        public override HttpMethod Method => HttpMethod.Get;

        public override List<string> Consumes => new() { "application/json" };

        public override List<string> Produces => new() { "application/json" };        
        
        public Model.ApiDevelopmentServerConfigurationGetResponse? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {            
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                return JsonSerializer.Deserialize<Model.ApiDevelopmentServerConfigurationGetResponse>(payload, ResponseJsonOptions);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.ApiDevelopmentServerConfigurationGetResponse>(payload, ResponseJsonOptions);
            }
            
            var payloadString = payload.ReadToString();
            
            throw new HttpResponseException(code, payloadString);
        }
    }

}