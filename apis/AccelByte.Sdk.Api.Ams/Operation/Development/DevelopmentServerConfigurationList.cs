// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Ams.Model;

namespace AccelByte.Sdk.Api.Ams.Operation
{
    /// <summary>
    /// DevelopmentServerConfigurationList
    ///
    /// Required Permission: ADMIN:NAMESPACE:{namespace}:ARMADA:FLEET [READ]
    /// </summary>
    public class DevelopmentServerConfigurationList : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static DevelopmentServerConfigurationListBuilder Builder { get => new DevelopmentServerConfigurationListBuilder(); }

        public class DevelopmentServerConfigurationListBuilder
            : OperationBuilder<DevelopmentServerConfigurationListBuilder>
        {

            public long? Count { get; set; }

            public string? ImageId { get; set; }

            public string? Name { get; set; }

            public long? Offset { get; set; }

            public DevelopmentServerConfigurationListSortBy? SortBy { get; set; }

            public DevelopmentServerConfigurationListSortDirection? SortDirection { get; set; }





            internal DevelopmentServerConfigurationListBuilder() { }

            internal DevelopmentServerConfigurationListBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }


            public DevelopmentServerConfigurationListBuilder SetCount(long _count)
            {
                Count = _count;
                return this;
            }

            public DevelopmentServerConfigurationListBuilder SetImageId(string _imageId)
            {
                ImageId = _imageId;
                return this;
            }

            public DevelopmentServerConfigurationListBuilder SetName(string _name)
            {
                Name = _name;
                return this;
            }

            public DevelopmentServerConfigurationListBuilder SetOffset(long _offset)
            {
                Offset = _offset;
                return this;
            }

            public DevelopmentServerConfigurationListBuilder SetSortBy(DevelopmentServerConfigurationListSortBy _sortBy)
            {
                SortBy = _sortBy;
                return this;
            }

            public DevelopmentServerConfigurationListBuilder SetSortDirection(DevelopmentServerConfigurationListSortDirection _sortDirection)
            {
                SortDirection = _sortDirection;
                return this;
            }





            public DevelopmentServerConfigurationList Build(
                string namespace_
            )
            {
                DevelopmentServerConfigurationList op = new DevelopmentServerConfigurationList(this,
                    namespace_                    
                );

                op.SetBaseFields<DevelopmentServerConfigurationListBuilder>(this);
                return op;
            }

            public DevelopmentServerConfigurationList.Response Execute(
                string namespace_
            )
            {
                DevelopmentServerConfigurationList op = Build(
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
            public async Task<DevelopmentServerConfigurationList.Response> ExecuteAsync(
                string namespace_
            )
            {
                DevelopmentServerConfigurationList op = Build(
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
        }

        private DevelopmentServerConfigurationList(DevelopmentServerConfigurationListBuilder builder,
            string namespace_
        )
        {
            PathParams["namespace"] = namespace_;
            
            if (builder.Count != null) QueryParams["count"] = Convert.ToString(builder.Count)!;
            if (builder.ImageId is not null) QueryParams["imageId"] = builder.ImageId;
            if (builder.Name is not null) QueryParams["name"] = builder.Name;
            if (builder.Offset != null) QueryParams["offset"] = Convert.ToString(builder.Offset)!;
            if (builder.SortBy is not null) QueryParams["sortBy"] = builder.SortBy.Value;
            if (builder.SortDirection is not null) QueryParams["sortDirection"] = builder.SortDirection.Value;
            

            
            
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        #region Response Part        
        public class Response : ApiResponse<Model.ApiDevelopmentServerConfigurationListResponse>
        {

            public ResponseErrorResponse? Error401 { get; set; } = null;

            public ResponseErrorResponse? Error403 { get; set; } = null;

            public ResponseErrorResponse? Error500 { get; set; } = null;


            protected override string GetFullOperationId() => "Ams::Development::DevelopmentServerConfigurationList";
        }

        #endregion

        public DevelopmentServerConfigurationList(
            string namespace_,            
            long? count,            
            string? imageId,            
            string? name,            
            long? offset,            
            DevelopmentServerConfigurationListSortBy? sortBy,            
            DevelopmentServerConfigurationListSortDirection? sortDirection            
        )
        {
            PathParams["namespace"] = namespace_;
            
            if (count != null) QueryParams["count"] = Convert.ToString(count)!;
            if (imageId is not null) QueryParams["imageId"] = imageId;
            if (name is not null) QueryParams["name"] = name;
            if (offset != null) QueryParams["offset"] = Convert.ToString(offset)!;
            if (sortBy is not null) QueryParams["sortBy"] = sortBy.Value;
            if (sortDirection is not null) QueryParams["sortDirection"] = sortDirection.Value;
            

            
            
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/ams/v1/admin/namespaces/{namespace}/development/server-configurations";

        public override HttpMethod Method => HttpMethod.Get;

        public override List<string> Consumes => new() { "application/json" };

        public override List<string> Produces => new() { "application/json" };
        
        public DevelopmentServerConfigurationList.Response ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            var response = new DevelopmentServerConfigurationList.Response()
            {
                StatusCode = code,
                ContentType = contentType
            };

            if (code == (HttpStatusCode)204)
            {
                response.IsSuccess = true;
            }
            else if ((code == (HttpStatusCode)201) || (code == (HttpStatusCode)202) || (code == (HttpStatusCode)200))
            {
                response.Data = JsonSerializer.Deserialize<Model.ApiDevelopmentServerConfigurationListResponse>(payload, ResponseJsonOptions);
                response.IsSuccess = true;
            }
            else if (code == (HttpStatusCode)401)
            {
                response.Error401 = JsonSerializer.Deserialize<ResponseErrorResponse>(payload, ResponseJsonOptions);
                response.Error = response.Error401!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)403)
            {
                response.Error403 = JsonSerializer.Deserialize<ResponseErrorResponse>(payload, ResponseJsonOptions);
                response.Error = response.Error403!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)500)
            {
                response.Error500 = JsonSerializer.Deserialize<ResponseErrorResponse>(payload, ResponseJsonOptions);
                response.Error = response.Error500!.TranslateToApiError();
            }

            return response;
        }
    }

    public class DevelopmentServerConfigurationListSortBy : StringEnum<DevelopmentServerConfigurationListSortBy>
    {
        public static readonly DevelopmentServerConfigurationListSortBy CreatedAt
            = new DevelopmentServerConfigurationListSortBy("created_at");

        public static readonly DevelopmentServerConfigurationListSortBy ExpiresAt
            = new DevelopmentServerConfigurationListSortBy("expires_at");

        public static readonly DevelopmentServerConfigurationListSortBy Name
            = new DevelopmentServerConfigurationListSortBy("name");


        public static implicit operator DevelopmentServerConfigurationListSortBy(string value)
        {
            return NewValue(value);
        }

        public DevelopmentServerConfigurationListSortBy(string enumValue)
            : base(enumValue)
        {

        }
    }

    public class DevelopmentServerConfigurationListSortDirection : StringEnum<DevelopmentServerConfigurationListSortDirection>
    {
        public static readonly DevelopmentServerConfigurationListSortDirection Asc
            = new DevelopmentServerConfigurationListSortDirection("asc");

        public static readonly DevelopmentServerConfigurationListSortDirection Desc
            = new DevelopmentServerConfigurationListSortDirection("desc");


        public static implicit operator DevelopmentServerConfigurationListSortDirection(string value)
        {
            return NewValue(value);
        }

        public DevelopmentServerConfigurationListSortDirection(string enumValue)
            : base(enumValue)
        {

        }
    }

}