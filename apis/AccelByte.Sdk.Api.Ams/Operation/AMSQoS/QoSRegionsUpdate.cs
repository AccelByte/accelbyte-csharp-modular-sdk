// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Ams.Model;

namespace AccelByte.Sdk.Api.Ams.Operation
{
    /// <summary>
    /// QoSRegionsUpdate
    ///
    /// ```
    /// Required Permission: ADMIN:NAMESPACE:{namespace}:QOS:SERVER [UPDATE]
    /// 
    /// This endpoint updates the registered QoS service's configurable configuration.
    /// </summary>
    public class QoSRegionsUpdate : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static QoSRegionsUpdateBuilder Builder { get => new QoSRegionsUpdateBuilder(); }

        public class QoSRegionsUpdateBuilder
            : OperationBuilder<QoSRegionsUpdateBuilder>
        {





            internal QoSRegionsUpdateBuilder() { }

            internal QoSRegionsUpdateBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }






            public QoSRegionsUpdate Build(
                ApiUpdateServerRequest body,
                string namespace_,
                string region
            )
            {
                QoSRegionsUpdate op = new QoSRegionsUpdate(this,
                    body,
                    namespace_,
                    region
                );

                op.SetBaseFields<QoSRegionsUpdateBuilder>(this);
                return op;
            }

            public void Execute(
                ApiUpdateServerRequest body,
                string namespace_,
                string region
            )
            {
                QoSRegionsUpdate op = Build(
                    body,
                    namespace_,
                    region
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
            public async Task ExecuteAsync(
                ApiUpdateServerRequest body,
                string namespace_,
                string region
            )
            {
                QoSRegionsUpdate op = Build(
                    body,
                    namespace_,
                    region
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
        }

        private QoSRegionsUpdate(QoSRegionsUpdateBuilder builder,
            ApiUpdateServerRequest body,
            string namespace_,
            string region
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["region"] = region;





            BodyParams = body;


            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public QoSRegionsUpdate(
            string namespace_,
            string region,
            Model.ApiUpdateServerRequest body
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["region"] = region;





            BodyParams = body;


            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/ams/v1/admin/namespaces/{namespace}/qos/{region}";

        public override HttpMethod Method => HttpMethod.Patch;

        public override List<string> Consumes => new() { "application/json" };

        public override List<string> Produces => new() { "application/json" };

        public void ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return;
            }

            var payloadString = payload.ReadToString();

            throw new HttpResponseException(code, payloadString);
        }
    }

}