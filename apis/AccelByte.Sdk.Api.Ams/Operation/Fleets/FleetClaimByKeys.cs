// Copyright (c) 2022-2023 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Ams.Model;

namespace AccelByte.Sdk.Api.Ams.Operation
{
    /// <summary>
    /// FleetClaimByKeys
    ///
    /// Claim a dedicated server from fleets with matching claim keys
    /// 
    /// Required Permission: NAMESPACE:{namespace}:AMS:SERVER:CLAIM [UPDATE]
    /// </summary>
    public class FleetClaimByKeys : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static FleetClaimByKeysBuilder Builder { get => new FleetClaimByKeysBuilder(); }

        public class FleetClaimByKeysBuilder
            : OperationBuilder<FleetClaimByKeysBuilder>
        {





            internal FleetClaimByKeysBuilder() { }

            internal FleetClaimByKeysBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }






            public FleetClaimByKeys Build(
                ApiFleetClaimByKeysReq body,
                string namespace_
            )
            {
                FleetClaimByKeys op = new FleetClaimByKeys(this,
                    body,
                    namespace_
                );

                op.SetBaseFields<FleetClaimByKeysBuilder>(this);
                return op;
            }

            public Model.ApiFleetClaimResponse? Execute(
                ApiFleetClaimByKeysReq body,
                string namespace_
            )
            {
                FleetClaimByKeys op = Build(
                    body,
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
        }

        private FleetClaimByKeys(FleetClaimByKeysBuilder builder,
            ApiFleetClaimByKeysReq body,
            string namespace_
        )
        {
            PathParams["namespace"] = namespace_;





            BodyParams = body;


            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public FleetClaimByKeys(
            string namespace_,
            Model.ApiFleetClaimByKeysReq body
        )
        {
            PathParams["namespace"] = namespace_;





            BodyParams = body;


            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/ams/v1/namespaces/{namespace}/servers/claim";

        public override HttpMethod Method => HttpMethod.Put;

        public override List<string> Consumes => new() { "application/json" };

        public override List<string> Produces => new() { "application/json" };

        public Model.ApiFleetClaimResponse? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                return JsonSerializer.Deserialize<Model.ApiFleetClaimResponse>(payload, ResponseJsonOptions);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.ApiFleetClaimResponse>(payload, ResponseJsonOptions);
            }

            var payloadString = payload.ReadToString();

            throw new HttpResponseException(code, payloadString);
        }
    }

}