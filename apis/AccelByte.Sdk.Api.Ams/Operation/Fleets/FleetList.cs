// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Ams.Model;

namespace AccelByte.Sdk.Api.Ams.Operation
{
    /// <summary>
    /// FleetList
    ///
    /// Required Permission: ADMIN:NAMESPACE:{namespace}:ARMADA:FLEET [READ]
    /// </summary>
    public class FleetList : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static FleetListBuilder Builder { get => new FleetListBuilder(); }

        public class FleetListBuilder
            : OperationBuilder<FleetListBuilder>
        {

            public bool? Active { get; set; }

            public string? Name { get; set; }

            public string? Region { get; set; }





            internal FleetListBuilder() { }

            internal FleetListBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }


            public FleetListBuilder SetActive(bool _active)
            {
                Active = _active;
                return this;
            }

            public FleetListBuilder SetName(string _name)
            {
                Name = _name;
                return this;
            }

            public FleetListBuilder SetRegion(string _region)
            {
                Region = _region;
                return this;
            }





            public FleetList Build(
                string namespace_
            )
            {
                FleetList op = new FleetList(this,
                    namespace_
                );

                op.SetBaseFields<FleetListBuilder>(this);
                return op;
            }

            public FleetList.Response Execute(
                string namespace_
            )
            {
                FleetList op = Build(
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
            public async Task<FleetList.Response> ExecuteAsync(
                string namespace_
            )
            {
                FleetList op = Build(
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
        }

        private FleetList(FleetListBuilder builder,
            string namespace_
        )
        {
            PathParams["namespace"] = namespace_;

            if (builder.Active != null) QueryParams["active"] = Convert.ToString(builder.Active)!;
            if (builder.Name is not null) QueryParams["name"] = builder.Name;
            if (builder.Region is not null) QueryParams["region"] = builder.Region;






            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        #region Response Part        
        public class Response : ApiResponse<Model.ApiFleetListResponse>
        {

            public ResponseErrorResponse? Error500 { get; set; } = null;


            protected override string GetFullOperationId() => "Ams::Fleets::FleetList";
        }

        #endregion

        public FleetList(
            string namespace_,
            bool? active,
            string? name,
            string? region
        )
        {
            PathParams["namespace"] = namespace_;

            if (active != null) QueryParams["active"] = Convert.ToString(active)!;
            if (name is not null) QueryParams["name"] = name;
            if (region is not null) QueryParams["region"] = region;






            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/ams/v1/admin/namespaces/{namespace}/fleets";

        public override HttpMethod Method => HttpMethod.Get;

        public override List<string> Consumes => new() { "application/json" };

        public override List<string> Produces => new() { "application/json" };

        public FleetList.Response ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            var response = new FleetList.Response()
            {
                StatusCode = code,
                ContentType = contentType
            };

            if (code == (HttpStatusCode)204)
            {
                response.IsSuccess = true;
            }
            else if ((code == (HttpStatusCode)201) || (code == (HttpStatusCode)202) || (code == (HttpStatusCode)200))
            {
                response.Data = JsonSerializer.Deserialize<Model.ApiFleetListResponse>(payload, ResponseJsonOptions);
                response.IsSuccess = true;
            }
            else if (code == (HttpStatusCode)500)
            {
                response.Error500 = JsonSerializer.Deserialize<ResponseErrorResponse>(payload, ResponseJsonOptions);
                response.Error = response.Error500!.TranslateToApiError();
            }

            return response;
        }
    }

}