// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;

using AccelByte.Sdk.Api.Session.Model;
using AccelByte.Sdk.Api.Session.Operation;

namespace AccelByte.Sdk.Api.Session.Wrapper
{
    public class Player
    {
        private readonly IAccelByteSdk _sdk;

        private string _CustomBasePath = String.Empty;

        public Player(IAccelByteSdk sdk)
        {
            _sdk = sdk;
        }

        public Player(IAccelByteSdk sdk, string customBasePath)
        {
            _sdk = sdk;
            _CustomBasePath = customBasePath;
        }

        #region Operation Builders
        public AdminQueryPlayerAttributes.AdminQueryPlayerAttributesBuilder AdminQueryPlayerAttributesOp
        {
            get
            {
                var opBuilder = new Operation.AdminQueryPlayerAttributes.AdminQueryPlayerAttributesBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminGetPlayerAttributes.AdminGetPlayerAttributesBuilder AdminGetPlayerAttributesOp
        {
            get
            {
                var opBuilder = new Operation.AdminGetPlayerAttributes.AdminGetPlayerAttributesBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public PublicGetBulkPlayerCurrentPlatform.PublicGetBulkPlayerCurrentPlatformBuilder PublicGetBulkPlayerCurrentPlatformOp
        {
            get
            {
                var opBuilder = new Operation.PublicGetBulkPlayerCurrentPlatform.PublicGetBulkPlayerCurrentPlatformBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public PublicGetPlayerAttributes.PublicGetPlayerAttributesBuilder PublicGetPlayerAttributesOp
        {
            get
            {
                var opBuilder = new Operation.PublicGetPlayerAttributes.PublicGetPlayerAttributesBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public PublicStorePlayerAttributes.PublicStorePlayerAttributesBuilder PublicStorePlayerAttributesOp
        {
            get
            {
                var opBuilder = new Operation.PublicStorePlayerAttributes.PublicStorePlayerAttributesBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public PublicDeletePlayerAttributes.PublicDeletePlayerAttributesBuilder PublicDeletePlayerAttributesOp
        {
            get
            {
                var opBuilder = new Operation.PublicDeletePlayerAttributes.PublicDeletePlayerAttributesBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        #endregion

        public AdminQueryPlayerAttributes.Response AdminQueryPlayerAttributes(AdminQueryPlayerAttributes input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminQueryPlayerAttributes.Response> AdminQueryPlayerAttributesAsync(AdminQueryPlayerAttributes input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public AdminQueryPlayerAttributes.Response<T1> AdminQueryPlayerAttributes<T1>(AdminQueryPlayerAttributes input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminQueryPlayerAttributes.Response<T1>> AdminQueryPlayerAttributesAsync<T1>(AdminQueryPlayerAttributes input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminGetPlayerAttributes.Response AdminGetPlayerAttributes(AdminGetPlayerAttributes input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminGetPlayerAttributes.Response> AdminGetPlayerAttributesAsync(AdminGetPlayerAttributes input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public AdminGetPlayerAttributes.Response<T1> AdminGetPlayerAttributes<T1>(AdminGetPlayerAttributes input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminGetPlayerAttributes.Response<T1>> AdminGetPlayerAttributesAsync<T1>(AdminGetPlayerAttributes input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public PublicGetBulkPlayerCurrentPlatform.Response PublicGetBulkPlayerCurrentPlatform(PublicGetBulkPlayerCurrentPlatform input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<PublicGetBulkPlayerCurrentPlatform.Response> PublicGetBulkPlayerCurrentPlatformAsync(PublicGetBulkPlayerCurrentPlatform input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public PublicGetPlayerAttributes.Response PublicGetPlayerAttributes(PublicGetPlayerAttributes input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<PublicGetPlayerAttributes.Response> PublicGetPlayerAttributesAsync(PublicGetPlayerAttributes input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public PublicGetPlayerAttributes.Response<T1> PublicGetPlayerAttributes<T1>(PublicGetPlayerAttributes input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<PublicGetPlayerAttributes.Response<T1>> PublicGetPlayerAttributesAsync<T1>(PublicGetPlayerAttributes input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public PublicStorePlayerAttributes.Response PublicStorePlayerAttributes(PublicStorePlayerAttributes input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<PublicStorePlayerAttributes.Response> PublicStorePlayerAttributesAsync(PublicStorePlayerAttributes input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public PublicStorePlayerAttributes.Response<T1> PublicStorePlayerAttributes<T1>(PublicStorePlayerAttributes input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<PublicStorePlayerAttributes.Response<T1>> PublicStorePlayerAttributesAsync<T1>(PublicStorePlayerAttributes input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public PublicDeletePlayerAttributes.Response PublicDeletePlayerAttributes(PublicDeletePlayerAttributes input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<PublicDeletePlayerAttributes.Response> PublicDeletePlayerAttributesAsync(PublicDeletePlayerAttributes input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
    }
}