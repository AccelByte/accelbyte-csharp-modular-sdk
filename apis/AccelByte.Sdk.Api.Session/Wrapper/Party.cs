// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;

using AccelByte.Sdk.Api.Session.Model;
using AccelByte.Sdk.Api.Session.Operation;

namespace AccelByte.Sdk.Api.Session.Wrapper
{
    public class Party
    {
        private readonly IAccelByteSdk _sdk;

        private string _CustomBasePath = String.Empty;

        public Party(IAccelByteSdk sdk)
        {
            _sdk = sdk;
        }

        public Party(IAccelByteSdk sdk, string customBasePath)
        {
            _sdk = sdk;
            _CustomBasePath = customBasePath;
        }

        #region Operation Builders
        public AdminQueryParties.AdminQueryPartiesBuilder AdminQueryPartiesOp
        {
            get
            {
                var opBuilder = new Operation.AdminQueryParties.AdminQueryPartiesBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminSyncNativeSession.AdminSyncNativeSessionBuilder AdminSyncNativeSessionOp
        {
            get
            {
                var opBuilder = new Operation.AdminSyncNativeSession.AdminSyncNativeSessionBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public PublicPartyJoinCode.PublicPartyJoinCodeBuilder PublicPartyJoinCodeOp
        {
            get
            {
                var opBuilder = new Operation.PublicPartyJoinCode.PublicPartyJoinCodeBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public PublicGetParty.PublicGetPartyBuilder PublicGetPartyOp
        {
            get
            {
                var opBuilder = new Operation.PublicGetParty.PublicGetPartyBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public PublicUpdateParty.PublicUpdatePartyBuilder PublicUpdatePartyOp
        {
            get
            {
                var opBuilder = new Operation.PublicUpdateParty.PublicUpdatePartyBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public PublicPatchUpdateParty.PublicPatchUpdatePartyBuilder PublicPatchUpdatePartyOp
        {
            get
            {
                var opBuilder = new Operation.PublicPatchUpdateParty.PublicPatchUpdatePartyBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public PublicGeneratePartyCode.PublicGeneratePartyCodeBuilder PublicGeneratePartyCodeOp
        {
            get
            {
                var opBuilder = new Operation.PublicGeneratePartyCode.PublicGeneratePartyCodeBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public PublicRevokePartyCode.PublicRevokePartyCodeBuilder PublicRevokePartyCodeOp
        {
            get
            {
                var opBuilder = new Operation.PublicRevokePartyCode.PublicRevokePartyCodeBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public PublicPartyInvite.PublicPartyInviteBuilder PublicPartyInviteOp
        {
            get
            {
                var opBuilder = new Operation.PublicPartyInvite.PublicPartyInviteBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public PublicPromotePartyLeader.PublicPromotePartyLeaderBuilder PublicPromotePartyLeaderOp
        {
            get
            {
                var opBuilder = new Operation.PublicPromotePartyLeader.PublicPromotePartyLeaderBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public PublicPartyJoin.PublicPartyJoinBuilder PublicPartyJoinOp
        {
            get
            {
                var opBuilder = new Operation.PublicPartyJoin.PublicPartyJoinBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public PublicPartyLeave.PublicPartyLeaveBuilder PublicPartyLeaveOp
        {
            get
            {
                var opBuilder = new Operation.PublicPartyLeave.PublicPartyLeaveBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public PublicPartyReject.PublicPartyRejectBuilder PublicPartyRejectOp
        {
            get
            {
                var opBuilder = new Operation.PublicPartyReject.PublicPartyRejectBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public PublicPartyCancel.PublicPartyCancelBuilder PublicPartyCancelOp
        {
            get
            {
                var opBuilder = new Operation.PublicPartyCancel.PublicPartyCancelBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public PublicPartyKick.PublicPartyKickBuilder PublicPartyKickOp
        {
            get
            {
                var opBuilder = new Operation.PublicPartyKick.PublicPartyKickBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public PublicCreateParty.PublicCreatePartyBuilder PublicCreatePartyOp
        {
            get
            {
                var opBuilder = new Operation.PublicCreateParty.PublicCreatePartyBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public PublicQueryMyParties.PublicQueryMyPartiesBuilder PublicQueryMyPartiesOp
        {
            get
            {
                var opBuilder = new Operation.PublicQueryMyParties.PublicQueryMyPartiesBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        #endregion

        public AdminQueryParties.Response AdminQueryParties(AdminQueryParties input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminQueryParties.Response> AdminQueryPartiesAsync(AdminQueryParties input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminSyncNativeSession.Response AdminSyncNativeSession(AdminSyncNativeSession input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminSyncNativeSession.Response> AdminSyncNativeSessionAsync(AdminSyncNativeSession input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public PublicPartyJoinCode.Response PublicPartyJoinCode(PublicPartyJoinCode input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<PublicPartyJoinCode.Response> PublicPartyJoinCodeAsync(PublicPartyJoinCode input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public PublicPartyJoinCode.Response<T1, T2> PublicPartyJoinCode<T1, T2>(PublicPartyJoinCode input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1, T2>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<PublicPartyJoinCode.Response<T1, T2>> PublicPartyJoinCodeAsync<T1, T2>(PublicPartyJoinCode input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1, T2>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public PublicGetParty.Response PublicGetParty(PublicGetParty input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<PublicGetParty.Response> PublicGetPartyAsync(PublicGetParty input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public PublicGetParty.Response<T1, T2> PublicGetParty<T1, T2>(PublicGetParty input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1, T2>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<PublicGetParty.Response<T1, T2>> PublicGetPartyAsync<T1, T2>(PublicGetParty input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1, T2>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public PublicUpdateParty.Response PublicUpdateParty(PublicUpdateParty input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<PublicUpdateParty.Response> PublicUpdatePartyAsync(PublicUpdateParty input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public PublicUpdateParty.Response<T1, T2> PublicUpdateParty<T1, T2>(PublicUpdateParty input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1, T2>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<PublicUpdateParty.Response<T1, T2>> PublicUpdatePartyAsync<T1, T2>(PublicUpdateParty input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1, T2>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public PublicPatchUpdateParty.Response PublicPatchUpdateParty(PublicPatchUpdateParty input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<PublicPatchUpdateParty.Response> PublicPatchUpdatePartyAsync(PublicPatchUpdateParty input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public PublicPatchUpdateParty.Response<T1, T2> PublicPatchUpdateParty<T1, T2>(PublicPatchUpdateParty input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1, T2>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<PublicPatchUpdateParty.Response<T1, T2>> PublicPatchUpdatePartyAsync<T1, T2>(PublicPatchUpdateParty input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1, T2>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public PublicGeneratePartyCode.Response PublicGeneratePartyCode(PublicGeneratePartyCode input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<PublicGeneratePartyCode.Response> PublicGeneratePartyCodeAsync(PublicGeneratePartyCode input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public PublicGeneratePartyCode.Response<T1, T2> PublicGeneratePartyCode<T1, T2>(PublicGeneratePartyCode input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1, T2>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<PublicGeneratePartyCode.Response<T1, T2>> PublicGeneratePartyCodeAsync<T1, T2>(PublicGeneratePartyCode input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1, T2>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public PublicRevokePartyCode.Response PublicRevokePartyCode(PublicRevokePartyCode input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<PublicRevokePartyCode.Response> PublicRevokePartyCodeAsync(PublicRevokePartyCode input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public PublicPartyInvite.Response PublicPartyInvite(PublicPartyInvite input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<PublicPartyInvite.Response> PublicPartyInviteAsync(PublicPartyInvite input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public PublicPromotePartyLeader.Response PublicPromotePartyLeader(PublicPromotePartyLeader input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<PublicPromotePartyLeader.Response> PublicPromotePartyLeaderAsync(PublicPromotePartyLeader input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public PublicPromotePartyLeader.Response<T1, T2> PublicPromotePartyLeader<T1, T2>(PublicPromotePartyLeader input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1, T2>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<PublicPromotePartyLeader.Response<T1, T2>> PublicPromotePartyLeaderAsync<T1, T2>(PublicPromotePartyLeader input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1, T2>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public PublicPartyJoin.Response PublicPartyJoin(PublicPartyJoin input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<PublicPartyJoin.Response> PublicPartyJoinAsync(PublicPartyJoin input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public PublicPartyJoin.Response<T1, T2> PublicPartyJoin<T1, T2>(PublicPartyJoin input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1, T2>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<PublicPartyJoin.Response<T1, T2>> PublicPartyJoinAsync<T1, T2>(PublicPartyJoin input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1, T2>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public PublicPartyLeave.Response PublicPartyLeave(PublicPartyLeave input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<PublicPartyLeave.Response> PublicPartyLeaveAsync(PublicPartyLeave input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public PublicPartyReject.Response PublicPartyReject(PublicPartyReject input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<PublicPartyReject.Response> PublicPartyRejectAsync(PublicPartyReject input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public PublicPartyCancel.Response PublicPartyCancel(PublicPartyCancel input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<PublicPartyCancel.Response> PublicPartyCancelAsync(PublicPartyCancel input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public PublicPartyKick.Response PublicPartyKick(PublicPartyKick input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<PublicPartyKick.Response> PublicPartyKickAsync(PublicPartyKick input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public PublicCreateParty.Response PublicCreateParty(PublicCreateParty input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<PublicCreateParty.Response> PublicCreatePartyAsync(PublicCreateParty input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public PublicCreateParty.Response<T1, T2> PublicCreateParty<T1, T2>(PublicCreateParty input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1, T2>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<PublicCreateParty.Response<T1, T2>> PublicCreatePartyAsync<T1, T2>(PublicCreateParty input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1, T2>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public PublicQueryMyParties.Response PublicQueryMyParties(PublicQueryMyParties input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<PublicQueryMyParties.Response> PublicQueryMyPartiesAsync(PublicQueryMyParties input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
    }
}