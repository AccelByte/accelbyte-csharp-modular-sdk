// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;

using AccelByte.Sdk.Api.Session.Model;
using AccelByte.Sdk.Api.Session.Operation;

namespace AccelByte.Sdk.Api.Session.Wrapper
{
    public class GameSession
    {
        private readonly IAccelByteSdk _sdk;

        private string _CustomBasePath = String.Empty;

        public GameSession(IAccelByteSdk sdk)
        {
            _sdk = sdk;
        }

        public GameSession(IAccelByteSdk sdk, string customBasePath)
        {
            _sdk = sdk;
            _CustomBasePath = customBasePath;
        }

        #region Operation Builders
        public AdminQueryGameSessions.AdminQueryGameSessionsBuilder AdminQueryGameSessionsOp
        {
            get
            {
                var opBuilder = new Operation.AdminQueryGameSessions.AdminQueryGameSessionsBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminQueryGameSessionsByAttributes.AdminQueryGameSessionsByAttributesBuilder AdminQueryGameSessionsByAttributesOp
        {
            get
            {
                var opBuilder = new Operation.AdminQueryGameSessionsByAttributes.AdminQueryGameSessionsByAttributesBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminDeleteBulkGameSessions.AdminDeleteBulkGameSessionsBuilder AdminDeleteBulkGameSessionsOp
        {
            get
            {
                var opBuilder = new Operation.AdminDeleteBulkGameSessions.AdminDeleteBulkGameSessionsBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminSetDSReady.AdminSetDSReadyBuilder AdminSetDSReadyOp
        {
            get
            {
                var opBuilder = new Operation.AdminSetDSReady.AdminSetDSReadyBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminUpdateDSInformation.AdminUpdateDSInformationBuilder AdminUpdateDSInformationOp
        {
            get
            {
                var opBuilder = new Operation.AdminUpdateDSInformation.AdminUpdateDSInformationBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminKickGameSessionMember.AdminKickGameSessionMemberBuilder AdminKickGameSessionMemberOp
        {
            get
            {
                var opBuilder = new Operation.AdminKickGameSessionMember.AdminKickGameSessionMemberBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminUpdateGameSessionMember.AdminUpdateGameSessionMemberBuilder AdminUpdateGameSessionMemberOp
        {
            get
            {
                var opBuilder = new Operation.AdminUpdateGameSessionMember.AdminUpdateGameSessionMemberBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public CreateGameSession.CreateGameSessionBuilder CreateGameSessionOp
        {
            get
            {
                var opBuilder = new Operation.CreateGameSession.CreateGameSessionBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public PublicQueryGameSessionsByAttributes.PublicQueryGameSessionsByAttributesBuilder PublicQueryGameSessionsByAttributesOp
        {
            get
            {
                var opBuilder = new Operation.PublicQueryGameSessionsByAttributes.PublicQueryGameSessionsByAttributesBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public PublicSessionJoinCode.PublicSessionJoinCodeBuilder PublicSessionJoinCodeOp
        {
            get
            {
                var opBuilder = new Operation.PublicSessionJoinCode.PublicSessionJoinCodeBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public GetGameSessionByPodName.GetGameSessionByPodNameBuilder GetGameSessionByPodNameOp
        {
            get
            {
                var opBuilder = new Operation.GetGameSessionByPodName.GetGameSessionByPodNameBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public GetGameSession.GetGameSessionBuilder GetGameSessionOp
        {
            get
            {
                var opBuilder = new Operation.GetGameSession.GetGameSessionBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public UpdateGameSession.UpdateGameSessionBuilder UpdateGameSessionOp
        {
            get
            {
                var opBuilder = new Operation.UpdateGameSession.UpdateGameSessionBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public DeleteGameSession.DeleteGameSessionBuilder DeleteGameSessionOp
        {
            get
            {
                var opBuilder = new Operation.DeleteGameSession.DeleteGameSessionBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public PatchUpdateGameSession.PatchUpdateGameSessionBuilder PatchUpdateGameSessionOp
        {
            get
            {
                var opBuilder = new Operation.PatchUpdateGameSession.PatchUpdateGameSessionBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public UpdateGameSessionBackfillTicketID.UpdateGameSessionBackfillTicketIDBuilder UpdateGameSessionBackfillTicketIDOp
        {
            get
            {
                var opBuilder = new Operation.UpdateGameSessionBackfillTicketID.UpdateGameSessionBackfillTicketIDBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public GameSessionGenerateCode.GameSessionGenerateCodeBuilder GameSessionGenerateCodeOp
        {
            get
            {
                var opBuilder = new Operation.GameSessionGenerateCode.GameSessionGenerateCodeBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public PublicRevokeGameSessionCode.PublicRevokeGameSessionCodeBuilder PublicRevokeGameSessionCodeOp
        {
            get
            {
                var opBuilder = new Operation.PublicRevokeGameSessionCode.PublicRevokeGameSessionCodeBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public PublicGameSessionInvite.PublicGameSessionInviteBuilder PublicGameSessionInviteOp
        {
            get
            {
                var opBuilder = new Operation.PublicGameSessionInvite.PublicGameSessionInviteBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public JoinGameSession.JoinGameSessionBuilder JoinGameSessionOp
        {
            get
            {
                var opBuilder = new Operation.JoinGameSession.JoinGameSessionBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public PublicPromoteGameSessionLeader.PublicPromoteGameSessionLeaderBuilder PublicPromoteGameSessionLeaderOp
        {
            get
            {
                var opBuilder = new Operation.PublicPromoteGameSessionLeader.PublicPromoteGameSessionLeaderBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public LeaveGameSession.LeaveGameSessionBuilder LeaveGameSessionOp
        {
            get
            {
                var opBuilder = new Operation.LeaveGameSession.LeaveGameSessionBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public PublicKickGameSessionMember.PublicKickGameSessionMemberBuilder PublicKickGameSessionMemberOp
        {
            get
            {
                var opBuilder = new Operation.PublicKickGameSessionMember.PublicKickGameSessionMemberBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public PublicGameSessionReject.PublicGameSessionRejectBuilder PublicGameSessionRejectOp
        {
            get
            {
                var opBuilder = new Operation.PublicGameSessionReject.PublicGameSessionRejectBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public GetSessionServerSecret.GetSessionServerSecretBuilder GetSessionServerSecretOp
        {
            get
            {
                var opBuilder = new Operation.GetSessionServerSecret.GetSessionServerSecretBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        [Obsolete(DiagnosticId = "ab_deprecated_operation_wrapper")]
        public AppendTeamGameSession.AppendTeamGameSessionBuilder AppendTeamGameSessionOp
        {
            get
            {
                var opBuilder = new Operation.AppendTeamGameSession.AppendTeamGameSessionBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public PublicGameSessionCancel.PublicGameSessionCancelBuilder PublicGameSessionCancelOp
        {
            get
            {
                var opBuilder = new Operation.PublicGameSessionCancel.PublicGameSessionCancelBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public PublicQueryMyGameSessions.PublicQueryMyGameSessionsBuilder PublicQueryMyGameSessionsOp
        {
            get
            {
                var opBuilder = new Operation.PublicQueryMyGameSessions.PublicQueryMyGameSessionsBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        #endregion

        public AdminQueryGameSessions.Response AdminQueryGameSessions(AdminQueryGameSessions input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminQueryGameSessions.Response> AdminQueryGameSessionsAsync(AdminQueryGameSessions input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminQueryGameSessionsByAttributes.Response AdminQueryGameSessionsByAttributes(AdminQueryGameSessionsByAttributes input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminQueryGameSessionsByAttributes.Response> AdminQueryGameSessionsByAttributesAsync(AdminQueryGameSessionsByAttributes input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminDeleteBulkGameSessions.Response AdminDeleteBulkGameSessions(AdminDeleteBulkGameSessions input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminDeleteBulkGameSessions.Response> AdminDeleteBulkGameSessionsAsync(AdminDeleteBulkGameSessions input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminSetDSReady.Response AdminSetDSReady(AdminSetDSReady input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminSetDSReady.Response> AdminSetDSReadyAsync(AdminSetDSReady input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminUpdateDSInformation.Response AdminUpdateDSInformation(AdminUpdateDSInformation input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminUpdateDSInformation.Response> AdminUpdateDSInformationAsync(AdminUpdateDSInformation input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminKickGameSessionMember.Response AdminKickGameSessionMember(AdminKickGameSessionMember input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminKickGameSessionMember.Response> AdminKickGameSessionMemberAsync(AdminKickGameSessionMember input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminUpdateGameSessionMember.Response AdminUpdateGameSessionMember(AdminUpdateGameSessionMember input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminUpdateGameSessionMember.Response> AdminUpdateGameSessionMemberAsync(AdminUpdateGameSessionMember input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public CreateGameSession.Response CreateGameSession(CreateGameSession input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<CreateGameSession.Response> CreateGameSessionAsync(CreateGameSession input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public CreateGameSession.Response<T1, T2> CreateGameSession<T1, T2>(CreateGameSession input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1, T2>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<CreateGameSession.Response<T1, T2>> CreateGameSessionAsync<T1, T2>(CreateGameSession input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1, T2>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public PublicQueryGameSessionsByAttributes.Response PublicQueryGameSessionsByAttributes(PublicQueryGameSessionsByAttributes input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<PublicQueryGameSessionsByAttributes.Response> PublicQueryGameSessionsByAttributesAsync(PublicQueryGameSessionsByAttributes input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public PublicSessionJoinCode.Response PublicSessionJoinCode(PublicSessionJoinCode input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<PublicSessionJoinCode.Response> PublicSessionJoinCodeAsync(PublicSessionJoinCode input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public PublicSessionJoinCode.Response<T1, T2> PublicSessionJoinCode<T1, T2>(PublicSessionJoinCode input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1, T2>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<PublicSessionJoinCode.Response<T1, T2>> PublicSessionJoinCodeAsync<T1, T2>(PublicSessionJoinCode input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1, T2>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public GetGameSessionByPodName.Response GetGameSessionByPodName(GetGameSessionByPodName input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<GetGameSessionByPodName.Response> GetGameSessionByPodNameAsync(GetGameSessionByPodName input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public GetGameSessionByPodName.Response<T1, T2> GetGameSessionByPodName<T1, T2>(GetGameSessionByPodName input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1, T2>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<GetGameSessionByPodName.Response<T1, T2>> GetGameSessionByPodNameAsync<T1, T2>(GetGameSessionByPodName input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1, T2>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public GetGameSession.Response GetGameSession(GetGameSession input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<GetGameSession.Response> GetGameSessionAsync(GetGameSession input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public GetGameSession.Response<T1, T2> GetGameSession<T1, T2>(GetGameSession input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1, T2>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<GetGameSession.Response<T1, T2>> GetGameSessionAsync<T1, T2>(GetGameSession input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1, T2>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public UpdateGameSession.Response UpdateGameSession(UpdateGameSession input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<UpdateGameSession.Response> UpdateGameSessionAsync(UpdateGameSession input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public UpdateGameSession.Response<T1, T2> UpdateGameSession<T1, T2>(UpdateGameSession input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1, T2>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<UpdateGameSession.Response<T1, T2>> UpdateGameSessionAsync<T1, T2>(UpdateGameSession input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1, T2>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public DeleteGameSession.Response DeleteGameSession(DeleteGameSession input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<DeleteGameSession.Response> DeleteGameSessionAsync(DeleteGameSession input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public PatchUpdateGameSession.Response PatchUpdateGameSession(PatchUpdateGameSession input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<PatchUpdateGameSession.Response> PatchUpdateGameSessionAsync(PatchUpdateGameSession input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public PatchUpdateGameSession.Response<T1, T2> PatchUpdateGameSession<T1, T2>(PatchUpdateGameSession input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1, T2>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<PatchUpdateGameSession.Response<T1, T2>> PatchUpdateGameSessionAsync<T1, T2>(PatchUpdateGameSession input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1, T2>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public UpdateGameSessionBackfillTicketID.Response UpdateGameSessionBackfillTicketID(UpdateGameSessionBackfillTicketID input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<UpdateGameSessionBackfillTicketID.Response> UpdateGameSessionBackfillTicketIDAsync(UpdateGameSessionBackfillTicketID input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public UpdateGameSessionBackfillTicketID.Response<T1, T2> UpdateGameSessionBackfillTicketID<T1, T2>(UpdateGameSessionBackfillTicketID input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1, T2>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<UpdateGameSessionBackfillTicketID.Response<T1, T2>> UpdateGameSessionBackfillTicketIDAsync<T1, T2>(UpdateGameSessionBackfillTicketID input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1, T2>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public GameSessionGenerateCode.Response GameSessionGenerateCode(GameSessionGenerateCode input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<GameSessionGenerateCode.Response> GameSessionGenerateCodeAsync(GameSessionGenerateCode input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public GameSessionGenerateCode.Response<T1, T2> GameSessionGenerateCode<T1, T2>(GameSessionGenerateCode input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1, T2>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<GameSessionGenerateCode.Response<T1, T2>> GameSessionGenerateCodeAsync<T1, T2>(GameSessionGenerateCode input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1, T2>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public PublicRevokeGameSessionCode.Response PublicRevokeGameSessionCode(PublicRevokeGameSessionCode input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<PublicRevokeGameSessionCode.Response> PublicRevokeGameSessionCodeAsync(PublicRevokeGameSessionCode input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public PublicGameSessionInvite.Response PublicGameSessionInvite(PublicGameSessionInvite input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<PublicGameSessionInvite.Response> PublicGameSessionInviteAsync(PublicGameSessionInvite input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public JoinGameSession.Response JoinGameSession(JoinGameSession input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<JoinGameSession.Response> JoinGameSessionAsync(JoinGameSession input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public JoinGameSession.Response<T1, T2> JoinGameSession<T1, T2>(JoinGameSession input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1, T2>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<JoinGameSession.Response<T1, T2>> JoinGameSessionAsync<T1, T2>(JoinGameSession input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1, T2>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public PublicPromoteGameSessionLeader.Response PublicPromoteGameSessionLeader(PublicPromoteGameSessionLeader input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<PublicPromoteGameSessionLeader.Response> PublicPromoteGameSessionLeaderAsync(PublicPromoteGameSessionLeader input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public PublicPromoteGameSessionLeader.Response<T1, T2> PublicPromoteGameSessionLeader<T1, T2>(PublicPromoteGameSessionLeader input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1, T2>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<PublicPromoteGameSessionLeader.Response<T1, T2>> PublicPromoteGameSessionLeaderAsync<T1, T2>(PublicPromoteGameSessionLeader input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1, T2>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public LeaveGameSession.Response LeaveGameSession(LeaveGameSession input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<LeaveGameSession.Response> LeaveGameSessionAsync(LeaveGameSession input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public PublicKickGameSessionMember.Response PublicKickGameSessionMember(PublicKickGameSessionMember input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<PublicKickGameSessionMember.Response> PublicKickGameSessionMemberAsync(PublicKickGameSessionMember input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public PublicGameSessionReject.Response PublicGameSessionReject(PublicGameSessionReject input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<PublicGameSessionReject.Response> PublicGameSessionRejectAsync(PublicGameSessionReject input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public GetSessionServerSecret.Response GetSessionServerSecret(GetSessionServerSecret input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<GetSessionServerSecret.Response> GetSessionServerSecretAsync(GetSessionServerSecret input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
#pragma warning disable ab_deprecated_operation
        [Obsolete(DiagnosticId = "ab_deprecated_operation_wrapper")]
        public AppendTeamGameSession.Response AppendTeamGameSession(AppendTeamGameSession input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AppendTeamGameSession.Response> AppendTeamGameSessionAsync(AppendTeamGameSession input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public AppendTeamGameSession.Response<T1, T2> AppendTeamGameSession<T1, T2>(AppendTeamGameSession input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1, T2>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AppendTeamGameSession.Response<T1, T2>> AppendTeamGameSessionAsync<T1, T2>(AppendTeamGameSession input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1, T2>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
#pragma warning restore ab_deprecated_operation
        public PublicGameSessionCancel.Response PublicGameSessionCancel(PublicGameSessionCancel input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<PublicGameSessionCancel.Response> PublicGameSessionCancelAsync(PublicGameSessionCancel input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public PublicQueryMyGameSessions.Response PublicQueryMyGameSessions(PublicQueryMyGameSessions input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<PublicQueryMyGameSessions.Response> PublicQueryMyGameSessionsAsync(PublicQueryMyGameSessions input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
    }
}