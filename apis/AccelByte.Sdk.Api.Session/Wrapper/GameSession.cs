// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;

using AccelByte.Sdk.Api.Session.Model;
using AccelByte.Sdk.Api.Session.Operation;

namespace AccelByte.Sdk.Api.Session.Wrapper
{
    public class GameSession
    {
        private readonly IAccelByteSdk _sdk;

        private string _CustomBasePath = String.Empty;

        public GameSession(IAccelByteSdk sdk)
        {
            _sdk = sdk;
        }

        public GameSession(IAccelByteSdk sdk, string customBasePath)
        {
            _sdk = sdk;
            _CustomBasePath = customBasePath;
        }

        #region Operation Builders
        public AdminQueryGameSessions.AdminQueryGameSessionsBuilder AdminQueryGameSessionsOp
        {
            get
            {
                var opBuilder = new Operation.AdminQueryGameSessions.AdminQueryGameSessionsBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminQueryGameSessionsByAttributes.AdminQueryGameSessionsByAttributesBuilder AdminQueryGameSessionsByAttributesOp
        {
            get
            {
                var opBuilder = new Operation.AdminQueryGameSessionsByAttributes.AdminQueryGameSessionsByAttributesBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminDeleteBulkGameSessions.AdminDeleteBulkGameSessionsBuilder AdminDeleteBulkGameSessionsOp
        {
            get
            {
                var opBuilder = new Operation.AdminDeleteBulkGameSessions.AdminDeleteBulkGameSessionsBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminSetDSReady.AdminSetDSReadyBuilder AdminSetDSReadyOp
        {
            get
            {
                var opBuilder = new Operation.AdminSetDSReady.AdminSetDSReadyBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminUpdateGameSessionMember.AdminUpdateGameSessionMemberBuilder AdminUpdateGameSessionMemberOp
        {
            get
            {
                var opBuilder = new Operation.AdminUpdateGameSessionMember.AdminUpdateGameSessionMemberBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public CreateGameSession.CreateGameSessionBuilder CreateGameSessionOp
        {
            get
            {
                var opBuilder = new Operation.CreateGameSession.CreateGameSessionBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public PublicQueryGameSessionsByAttributes.PublicQueryGameSessionsByAttributesBuilder PublicQueryGameSessionsByAttributesOp
        {
            get
            {
                var opBuilder = new Operation.PublicQueryGameSessionsByAttributes.PublicQueryGameSessionsByAttributesBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public PublicSessionJoinCode.PublicSessionJoinCodeBuilder PublicSessionJoinCodeOp
        {
            get
            {
                var opBuilder = new Operation.PublicSessionJoinCode.PublicSessionJoinCodeBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public GetGameSessionByPodName.GetGameSessionByPodNameBuilder GetGameSessionByPodNameOp
        {
            get
            {
                var opBuilder = new Operation.GetGameSessionByPodName.GetGameSessionByPodNameBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public GetGameSession.GetGameSessionBuilder GetGameSessionOp
        {
            get
            {
                var opBuilder = new Operation.GetGameSession.GetGameSessionBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public UpdateGameSession.UpdateGameSessionBuilder UpdateGameSessionOp
        {
            get
            {
                var opBuilder = new Operation.UpdateGameSession.UpdateGameSessionBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public DeleteGameSession.DeleteGameSessionBuilder DeleteGameSessionOp
        {
            get
            {
                var opBuilder = new Operation.DeleteGameSession.DeleteGameSessionBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public PatchUpdateGameSession.PatchUpdateGameSessionBuilder PatchUpdateGameSessionOp
        {
            get
            {
                var opBuilder = new Operation.PatchUpdateGameSession.PatchUpdateGameSessionBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public UpdateGameSessionBackfillTicketID.UpdateGameSessionBackfillTicketIDBuilder UpdateGameSessionBackfillTicketIDOp
        {
            get
            {
                var opBuilder = new Operation.UpdateGameSessionBackfillTicketID.UpdateGameSessionBackfillTicketIDBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public GameSessionGenerateCode.GameSessionGenerateCodeBuilder GameSessionGenerateCodeOp
        {
            get
            {
                var opBuilder = new Operation.GameSessionGenerateCode.GameSessionGenerateCodeBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public PublicRevokeGameSessionCode.PublicRevokeGameSessionCodeBuilder PublicRevokeGameSessionCodeOp
        {
            get
            {
                var opBuilder = new Operation.PublicRevokeGameSessionCode.PublicRevokeGameSessionCodeBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public PublicGameSessionInvite.PublicGameSessionInviteBuilder PublicGameSessionInviteOp
        {
            get
            {
                var opBuilder = new Operation.PublicGameSessionInvite.PublicGameSessionInviteBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public JoinGameSession.JoinGameSessionBuilder JoinGameSessionOp
        {
            get
            {
                var opBuilder = new Operation.JoinGameSession.JoinGameSessionBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public PublicPromoteGameSessionLeader.PublicPromoteGameSessionLeaderBuilder PublicPromoteGameSessionLeaderOp
        {
            get
            {
                var opBuilder = new Operation.PublicPromoteGameSessionLeader.PublicPromoteGameSessionLeaderBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public LeaveGameSession.LeaveGameSessionBuilder LeaveGameSessionOp
        {
            get
            {
                var opBuilder = new Operation.LeaveGameSession.LeaveGameSessionBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public PublicGameSessionReject.PublicGameSessionRejectBuilder PublicGameSessionRejectOp
        {
            get
            {
                var opBuilder = new Operation.PublicGameSessionReject.PublicGameSessionRejectBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public GetSessionServerSecret.GetSessionServerSecretBuilder GetSessionServerSecretOp
        {
            get
            {
                var opBuilder = new Operation.GetSessionServerSecret.GetSessionServerSecretBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AppendTeamGameSession.AppendTeamGameSessionBuilder AppendTeamGameSessionOp
        {
            get
            {
                var opBuilder = new Operation.AppendTeamGameSession.AppendTeamGameSessionBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public PublicQueryMyGameSessions.PublicQueryMyGameSessionsBuilder PublicQueryMyGameSessionsOp
        {
            get
            {
                var opBuilder = new Operation.PublicQueryMyGameSessions.PublicQueryMyGameSessionsBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        #endregion

        public Model.ApimodelsGameSessionQueryResponse? AdminQueryGameSessions(AdminQueryGameSessions input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ApimodelsGameSessionQueryResponse?> AdminQueryGameSessionsAsync(AdminQueryGameSessions input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ApimodelsGameSessionQueryResponse? AdminQueryGameSessionsByAttributes(AdminQueryGameSessionsByAttributes input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ApimodelsGameSessionQueryResponse?> AdminQueryGameSessionsByAttributesAsync(AdminQueryGameSessionsByAttributes input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ApimodelsDeleteBulkGameSessionsAPIResponse? AdminDeleteBulkGameSessions(AdminDeleteBulkGameSessions input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ApimodelsDeleteBulkGameSessionsAPIResponse?> AdminDeleteBulkGameSessionsAsync(AdminDeleteBulkGameSessions input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public void AdminSetDSReady(AdminSetDSReady input)
        {
            var response = _sdk.RunRequest(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task AdminSetDSReadyAsync(AdminSetDSReady input)
        {
            var response = await _sdk.RunRequestAsync(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ApimodelsUpdateGameSessionMemberStatusResponse? AdminUpdateGameSessionMember(AdminUpdateGameSessionMember input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ApimodelsUpdateGameSessionMemberStatusResponse?> AdminUpdateGameSessionMemberAsync(AdminUpdateGameSessionMember input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ApimodelsGameSessionResponse? CreateGameSession(CreateGameSession input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ApimodelsGameSessionResponse?> CreateGameSessionAsync(CreateGameSession input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public Model.ApimodelsGameSessionResponse<T1, T2>? CreateGameSession<T1, T2>(CreateGameSession input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1, T2>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ApimodelsGameSessionResponse<T1, T2>?> CreateGameSessionAsync<T1, T2>(CreateGameSession input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1, T2>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ApimodelsGameSessionQueryResponse? PublicQueryGameSessionsByAttributes(PublicQueryGameSessionsByAttributes input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ApimodelsGameSessionQueryResponse?> PublicQueryGameSessionsByAttributesAsync(PublicQueryGameSessionsByAttributes input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ApimodelsGameSessionResponse? PublicSessionJoinCode(PublicSessionJoinCode input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ApimodelsGameSessionResponse?> PublicSessionJoinCodeAsync(PublicSessionJoinCode input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public Model.ApimodelsGameSessionResponse<T1, T2>? PublicSessionJoinCode<T1, T2>(PublicSessionJoinCode input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1, T2>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ApimodelsGameSessionResponse<T1, T2>?> PublicSessionJoinCodeAsync<T1, T2>(PublicSessionJoinCode input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1, T2>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ApimodelsGameSessionResponse? GetGameSessionByPodName(GetGameSessionByPodName input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ApimodelsGameSessionResponse?> GetGameSessionByPodNameAsync(GetGameSessionByPodName input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public Model.ApimodelsGameSessionResponse<T1, T2>? GetGameSessionByPodName<T1, T2>(GetGameSessionByPodName input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1, T2>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ApimodelsGameSessionResponse<T1, T2>?> GetGameSessionByPodNameAsync<T1, T2>(GetGameSessionByPodName input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1, T2>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ApimodelsGameSessionResponse? GetGameSession(GetGameSession input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ApimodelsGameSessionResponse?> GetGameSessionAsync(GetGameSession input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public Model.ApimodelsGameSessionResponse<T1, T2>? GetGameSession<T1, T2>(GetGameSession input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1, T2>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ApimodelsGameSessionResponse<T1, T2>?> GetGameSessionAsync<T1, T2>(GetGameSession input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1, T2>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ApimodelsGameSessionResponse? UpdateGameSession(UpdateGameSession input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ApimodelsGameSessionResponse?> UpdateGameSessionAsync(UpdateGameSession input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public Model.ApimodelsGameSessionResponse<T1, T2>? UpdateGameSession<T1, T2>(UpdateGameSession input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1, T2>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ApimodelsGameSessionResponse<T1, T2>?> UpdateGameSessionAsync<T1, T2>(UpdateGameSession input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1, T2>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public void DeleteGameSession(DeleteGameSession input)
        {
            var response = _sdk.RunRequest(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task DeleteGameSessionAsync(DeleteGameSession input)
        {
            var response = await _sdk.RunRequestAsync(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ApimodelsGameSessionResponse? PatchUpdateGameSession(PatchUpdateGameSession input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ApimodelsGameSessionResponse?> PatchUpdateGameSessionAsync(PatchUpdateGameSession input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public Model.ApimodelsGameSessionResponse<T1, T2>? PatchUpdateGameSession<T1, T2>(PatchUpdateGameSession input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1, T2>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ApimodelsGameSessionResponse<T1, T2>?> PatchUpdateGameSessionAsync<T1, T2>(PatchUpdateGameSession input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1, T2>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ApimodelsGameSessionResponse? UpdateGameSessionBackfillTicketID(UpdateGameSessionBackfillTicketID input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ApimodelsGameSessionResponse?> UpdateGameSessionBackfillTicketIDAsync(UpdateGameSessionBackfillTicketID input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public Model.ApimodelsGameSessionResponse<T1, T2>? UpdateGameSessionBackfillTicketID<T1, T2>(UpdateGameSessionBackfillTicketID input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1, T2>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ApimodelsGameSessionResponse<T1, T2>?> UpdateGameSessionBackfillTicketIDAsync<T1, T2>(UpdateGameSessionBackfillTicketID input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1, T2>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ApimodelsGameSessionResponse? GameSessionGenerateCode(GameSessionGenerateCode input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ApimodelsGameSessionResponse?> GameSessionGenerateCodeAsync(GameSessionGenerateCode input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public Model.ApimodelsGameSessionResponse<T1, T2>? GameSessionGenerateCode<T1, T2>(GameSessionGenerateCode input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1, T2>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ApimodelsGameSessionResponse<T1, T2>?> GameSessionGenerateCodeAsync<T1, T2>(GameSessionGenerateCode input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1, T2>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public void PublicRevokeGameSessionCode(PublicRevokeGameSessionCode input)
        {
            var response = _sdk.RunRequest(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task PublicRevokeGameSessionCodeAsync(PublicRevokeGameSessionCode input)
        {
            var response = await _sdk.RunRequestAsync(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public void PublicGameSessionInvite(PublicGameSessionInvite input)
        {
            var response = _sdk.RunRequest(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task PublicGameSessionInviteAsync(PublicGameSessionInvite input)
        {
            var response = await _sdk.RunRequestAsync(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ApimodelsGameSessionResponse? JoinGameSession(JoinGameSession input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ApimodelsGameSessionResponse?> JoinGameSessionAsync(JoinGameSession input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public Model.ApimodelsGameSessionResponse<T1, T2>? JoinGameSession<T1, T2>(JoinGameSession input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1, T2>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ApimodelsGameSessionResponse<T1, T2>?> JoinGameSessionAsync<T1, T2>(JoinGameSession input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1, T2>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ApimodelsGameSessionResponse? PublicPromoteGameSessionLeader(PublicPromoteGameSessionLeader input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ApimodelsGameSessionResponse?> PublicPromoteGameSessionLeaderAsync(PublicPromoteGameSessionLeader input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public Model.ApimodelsGameSessionResponse<T1, T2>? PublicPromoteGameSessionLeader<T1, T2>(PublicPromoteGameSessionLeader input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1, T2>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ApimodelsGameSessionResponse<T1, T2>?> PublicPromoteGameSessionLeaderAsync<T1, T2>(PublicPromoteGameSessionLeader input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1, T2>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public void LeaveGameSession(LeaveGameSession input)
        {
            var response = _sdk.RunRequest(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task LeaveGameSessionAsync(LeaveGameSession input)
        {
            var response = await _sdk.RunRequestAsync(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public void PublicGameSessionReject(PublicGameSessionReject input)
        {
            var response = _sdk.RunRequest(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task PublicGameSessionRejectAsync(PublicGameSessionReject input)
        {
            var response = await _sdk.RunRequestAsync(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ApimodelsServerSecret? GetSessionServerSecret(GetSessionServerSecret input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ApimodelsServerSecret?> GetSessionServerSecretAsync(GetSessionServerSecret input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ApimodelsGameSessionResponse? AppendTeamGameSession(AppendTeamGameSession input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ApimodelsGameSessionResponse?> AppendTeamGameSessionAsync(AppendTeamGameSession input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public Model.ApimodelsGameSessionResponse<T1, T2>? AppendTeamGameSession<T1, T2>(AppendTeamGameSession input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1, T2>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ApimodelsGameSessionResponse<T1, T2>?> AppendTeamGameSessionAsync<T1, T2>(AppendTeamGameSession input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1, T2>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ApimodelsGameSessionQueryResponse? PublicQueryMyGameSessions(PublicQueryMyGameSessions input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ApimodelsGameSessionQueryResponse?> PublicQueryMyGameSessionsAsync(PublicQueryMyGameSessions input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
    }
}