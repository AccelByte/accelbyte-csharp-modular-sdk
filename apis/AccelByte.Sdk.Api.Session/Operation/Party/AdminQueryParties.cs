// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Session.Model;

namespace AccelByte.Sdk.Api.Session.Operation
{
    /// <summary>
    /// adminQueryParties
    ///
    /// Query parties.
    /// </summary>
    public class AdminQueryParties : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static AdminQueryPartiesBuilder Builder { get => new AdminQueryPartiesBuilder(); }

        public class AdminQueryPartiesBuilder
            : OperationBuilder<AdminQueryPartiesBuilder>
        {

            public string? IsSoftDeleted { get; set; }

            public string? Joinability { get; set; }

            public string? Key { get; set; }

            public string? LeaderID { get; set; }

            public long? Limit { get; set; }

            public string? MemberID { get; set; }

            public string? MemberStatus { get; set; }

            public long? Offset { get; set; }

            public string? Order { get; set; }

            public string? OrderBy { get; set; }

            public string? PartyID { get; set; }

            public string? Value { get; set; }





            internal AdminQueryPartiesBuilder() { }

            internal AdminQueryPartiesBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }


            public AdminQueryPartiesBuilder SetIsSoftDeleted(string _isSoftDeleted)
            {
                IsSoftDeleted = _isSoftDeleted;
                return this;
            }

            public AdminQueryPartiesBuilder SetJoinability(string _joinability)
            {
                Joinability = _joinability;
                return this;
            }

            public AdminQueryPartiesBuilder SetKey(string _key)
            {
                Key = _key;
                return this;
            }

            public AdminQueryPartiesBuilder SetLeaderID(string _leaderID)
            {
                LeaderID = _leaderID;
                return this;
            }

            public AdminQueryPartiesBuilder SetLimit(long _limit)
            {
                Limit = _limit;
                return this;
            }

            public AdminQueryPartiesBuilder SetMemberID(string _memberID)
            {
                MemberID = _memberID;
                return this;
            }

            public AdminQueryPartiesBuilder SetMemberStatus(string _memberStatus)
            {
                MemberStatus = _memberStatus;
                return this;
            }

            public AdminQueryPartiesBuilder SetOffset(long _offset)
            {
                Offset = _offset;
                return this;
            }

            public AdminQueryPartiesBuilder SetOrder(string _order)
            {
                Order = _order;
                return this;
            }

            public AdminQueryPartiesBuilder SetOrderBy(string _orderBy)
            {
                OrderBy = _orderBy;
                return this;
            }

            public AdminQueryPartiesBuilder SetPartyID(string _partyID)
            {
                PartyID = _partyID;
                return this;
            }

            public AdminQueryPartiesBuilder SetValue(string _value)
            {
                Value = _value;
                return this;
            }





            public AdminQueryParties Build(
                string namespace_
            )
            {
                AdminQueryParties op = new AdminQueryParties(this,
                    namespace_
                );

                op.SetBaseFields<AdminQueryPartiesBuilder>(this);
                return op;
            }

            public AdminQueryParties.Response Execute(
                string namespace_
            )
            {
                AdminQueryParties op = Build(
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
            public async Task<AdminQueryParties.Response> ExecuteAsync(
                string namespace_
            )
            {
                AdminQueryParties op = Build(
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
        }

        private AdminQueryParties(AdminQueryPartiesBuilder builder,
            string namespace_
        )
        {
            PathParams["namespace"] = namespace_;

            if (builder.IsSoftDeleted is not null) QueryParams["isSoftDeleted"] = builder.IsSoftDeleted;
            if (builder.Joinability is not null) QueryParams["joinability"] = builder.Joinability;
            if (builder.Key is not null) QueryParams["key"] = builder.Key;
            if (builder.LeaderID is not null) QueryParams["leaderID"] = builder.LeaderID;
            if (builder.Limit != null) QueryParams["limit"] = Convert.ToString(builder.Limit)!;
            if (builder.MemberID is not null) QueryParams["memberID"] = builder.MemberID;
            if (builder.MemberStatus is not null) QueryParams["memberStatus"] = builder.MemberStatus;
            if (builder.Offset != null) QueryParams["offset"] = Convert.ToString(builder.Offset)!;
            if (builder.Order is not null) QueryParams["order"] = builder.Order;
            if (builder.OrderBy is not null) QueryParams["orderBy"] = builder.OrderBy;
            if (builder.PartyID is not null) QueryParams["partyID"] = builder.PartyID;
            if (builder.Value is not null) QueryParams["value"] = builder.Value;






            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        #region Response Part        
        public class Response : ApiResponse<Model.ApimodelsPartyQueryResponse>
        {

            public ResponseError? Error400 { get; set; } = null;

            public ResponseError? Error401 { get; set; } = null;

            public ResponseError? Error500 { get; set; } = null;


            protected override string GetFullOperationId() => "Session::Party::AdminQueryParties";
        }

        #endregion

        public AdminQueryParties(
            string namespace_,
            string? isSoftDeleted,
            string? joinability,
            string? key,
            string? leaderID,
            long? limit,
            string? memberID,
            string? memberStatus,
            long? offset,
            string? order,
            string? orderBy,
            string? partyID,
            string? value
        )
        {
            PathParams["namespace"] = namespace_;

            if (isSoftDeleted is not null) QueryParams["isSoftDeleted"] = isSoftDeleted;
            if (joinability is not null) QueryParams["joinability"] = joinability;
            if (key is not null) QueryParams["key"] = key;
            if (leaderID is not null) QueryParams["leaderID"] = leaderID;
            if (limit != null) QueryParams["limit"] = Convert.ToString(limit)!;
            if (memberID is not null) QueryParams["memberID"] = memberID;
            if (memberStatus is not null) QueryParams["memberStatus"] = memberStatus;
            if (offset != null) QueryParams["offset"] = Convert.ToString(offset)!;
            if (order is not null) QueryParams["order"] = order;
            if (orderBy is not null) QueryParams["orderBy"] = orderBy;
            if (partyID is not null) QueryParams["partyID"] = partyID;
            if (value is not null) QueryParams["value"] = value;






            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/session/v1/admin/namespaces/{namespace}/parties";

        public override HttpMethod Method => HttpMethod.Get;

        public override List<string> Consumes => new() { "application/json" };

        public override List<string> Produces => new() { "application/json" };

        public AdminQueryParties.Response ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            var response = new AdminQueryParties.Response()
            {
                StatusCode = code,
                ContentType = contentType
            };

            if (code == (HttpStatusCode)204)
            {
                response.IsSuccess = true;
            }
            else if ((code == (HttpStatusCode)201) || (code == (HttpStatusCode)202) || (code == (HttpStatusCode)200))
            {
                response.Data = JsonSerializer.Deserialize<Model.ApimodelsPartyQueryResponse>(payload, ResponseJsonOptions);
                response.IsSuccess = true;
            }
            else if (code == (HttpStatusCode)400)
            {
                response.Error400 = JsonSerializer.Deserialize<ResponseError>(payload, ResponseJsonOptions);
                response.Error = response.Error400!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)401)
            {
                response.Error401 = JsonSerializer.Deserialize<ResponseError>(payload, ResponseJsonOptions);
                response.Error = response.Error401!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)500)
            {
                response.Error500 = JsonSerializer.Deserialize<ResponseError>(payload, ResponseJsonOptions);
                response.Error = response.Error500!.TranslateToApiError();
            }

            return response;
        }
    }

}