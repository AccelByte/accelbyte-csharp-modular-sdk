// Copyright (c) 2022-2023 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Session.Model;

namespace AccelByte.Sdk.Api.Session.Operation
{
    /// <summary>
    /// getSessionServerSecret
    ///
    /// 
    /// Used by game Client to Get Secret
    /// constraints
    /// - EnableSecret = true
    /// - Type = "DS"
    /// - secret value will only be produced if enableSecret is true and type is DS
    /// 
    /// if enableSecret = false
    /// - empty secret will be returned as 200 OK
    /// 
    /// Expected caller of this API
    /// - Game Client to get server secret
    /// 
    /// In the Response you will get following:
    /// - 200 OK { "secret":  }
    /// 
    /// If there is error:
    /// - 400 Invalid path parameters
    /// - 401 unauthorized
    /// - 404 StatusNotFound
    /// - 500 Internal server error
    /// </summary>
    public class GetSessionServerSecret : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static GetSessionServerSecretBuilder Builder { get => new GetSessionServerSecretBuilder(); }

        public class GetSessionServerSecretBuilder
            : OperationBuilder<GetSessionServerSecretBuilder>
        {





            internal GetSessionServerSecretBuilder() { }

            internal GetSessionServerSecretBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }






            public GetSessionServerSecret Build(
                string namespace_,
                string sessionId
            )
            {
                GetSessionServerSecret op = new GetSessionServerSecret(this,
                    namespace_,
                    sessionId
                );
                op.PreferredSecurityMethod = PreferredSecurityMethod;
                op.RequestJsonOptions = RequestJsonOptions;
                op.ResponseJsonOptions = ResponseJsonOptions;

                return op;
            }

            public Model.ApimodelsServerSecret? Execute(
                string namespace_,
                string sessionId
            )
            {
                GetSessionServerSecret op = Build(
                    namespace_,
                    sessionId
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
        }

        private GetSessionServerSecret(GetSessionServerSecretBuilder builder,
            string namespace_,
            string sessionId
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["sessionId"] = sessionId;







            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public GetSessionServerSecret(
            string namespace_,
            string sessionId
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["sessionId"] = sessionId;







            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/session/v1/public/namespaces/{namespace}/gamesessions/{sessionId}/secret";

        public override HttpMethod Method => HttpMethod.Get;

        public override List<string> Consumes => new() { "application/json" };

        public override List<string> Produces => new() { "application/json" };

        public Model.ApimodelsServerSecret? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                return JsonSerializer.Deserialize<Model.ApimodelsServerSecret>(payload, ResponseJsonOptions);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.ApimodelsServerSecret>(payload, ResponseJsonOptions);
            }

            var payloadString = payload.ReadToString();

            throw new HttpResponseException(code, payloadString);
        }
    }

}