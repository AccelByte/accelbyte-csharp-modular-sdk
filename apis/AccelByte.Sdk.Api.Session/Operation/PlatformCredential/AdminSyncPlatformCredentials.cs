// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Session.Model;

namespace AccelByte.Sdk.Api.Session.Operation
{
    /// <summary>
    /// adminSyncPlatformCredentials
    ///
    /// Sync Platform Credentials.
    /// 
    /// Supported Platforms:
    /// 1. XBOX
    /// With this method, we will be performing sync to Platform Service to retrieve the existing PFX certificate which uploaded through IAP.
    /// If the API returns Not Found, alternatively what you can do is either:
    /// a. upload PFX file to IAP. You can access it from Admin Portal {BASE_URL}/admin/namespaces/{NAMESPACE}/in-app-purchase/xbox, or directly through API /platform/admin/namespaces/{NAMESPACE}/iap/config/xbl/cert.
    /// b. upload PFX file through Session API /session/v1/admin/namespaces/{namespace}/certificates/pfx/platforms/xbl
    /// We recommend approach #a, since you need to only upload the file once, and the service will do the sync.
    /// If you set the PFX through Session service, when this API is invoked, we will sync and replace the existing PFX file with the one from Platform (IAP).
    /// </summary>
    public class AdminSyncPlatformCredentials : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static AdminSyncPlatformCredentialsBuilder Builder { get => new AdminSyncPlatformCredentialsBuilder(); }

        public class AdminSyncPlatformCredentialsBuilder
            : OperationBuilder<AdminSyncPlatformCredentialsBuilder>
        {





            internal AdminSyncPlatformCredentialsBuilder() { }

            internal AdminSyncPlatformCredentialsBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }






            public AdminSyncPlatformCredentials Build(
                string namespace_,
                AdminSyncPlatformCredentialsPlatformId platformId
            )
            {
                AdminSyncPlatformCredentials op = new AdminSyncPlatformCredentials(this,
                    namespace_,
                    platformId
                );

                op.SetBaseFields<AdminSyncPlatformCredentialsBuilder>(this);
                return op;
            }

            public AdminSyncPlatformCredentials.Response Execute(
                string namespace_,
                string platformId
            )
            {
                AdminSyncPlatformCredentials op = Build(
                    namespace_,
                    platformId
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
            public async Task<AdminSyncPlatformCredentials.Response> ExecuteAsync(
                string namespace_,
                string platformId
            )
            {
                AdminSyncPlatformCredentials op = Build(
                    namespace_,
                    platformId
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
        }

        private AdminSyncPlatformCredentials(AdminSyncPlatformCredentialsBuilder builder,
            string namespace_,
            AdminSyncPlatformCredentialsPlatformId platformId
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["platformId"] = platformId.Value;







            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        #region Response Part        
        public class Response : ApiResponse<Model.ApimodelsXblCertificateResponseBody>
        {

            public ResponseError? Error400 { get; set; } = null;

            public ResponseError? Error401 { get; set; } = null;

            public ResponseError? Error403 { get; set; } = null;

            public ResponseError? Error404 { get; set; } = null;

            public ResponseError? Error500 { get; set; } = null;


            protected override string GetFullOperationId() => "Session::PlatformCredential::AdminSyncPlatformCredentials";
        }

        #endregion

        public AdminSyncPlatformCredentials(
            string namespace_,
            AdminSyncPlatformCredentialsPlatformId platformId
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["platformId"] = platformId.Value;







            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/session/v1/admin/namespaces/{namespace}/platform-credentials/{platformId}/sync";

        public override HttpMethod Method => HttpMethod.Put;

        public override List<string> Consumes => new() { };

        public override List<string> Produces => new() { "application/json" };

        public AdminSyncPlatformCredentials.Response ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            var response = new AdminSyncPlatformCredentials.Response()
            {
                StatusCode = code,
                ContentType = contentType
            };

            if (code == (HttpStatusCode)204)
            {
                response.IsSuccess = true;
            }
            else if ((code == (HttpStatusCode)201) || (code == (HttpStatusCode)202) || (code == (HttpStatusCode)200))
            {
                response.Data = JsonSerializer.Deserialize<Model.ApimodelsXblCertificateResponseBody>(payload, ResponseJsonOptions);
                response.IsSuccess = true;
            }
            else if (code == (HttpStatusCode)400)
            {
                response.Error400 = JsonSerializer.Deserialize<ResponseError>(payload, ResponseJsonOptions);
                response.Error = response.Error400!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)401)
            {
                response.Error401 = JsonSerializer.Deserialize<ResponseError>(payload, ResponseJsonOptions);
                response.Error = response.Error401!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)403)
            {
                response.Error403 = JsonSerializer.Deserialize<ResponseError>(payload, ResponseJsonOptions);
                response.Error = response.Error403!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)404)
            {
                response.Error404 = JsonSerializer.Deserialize<ResponseError>(payload, ResponseJsonOptions);
                response.Error = response.Error404!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)500)
            {
                response.Error500 = JsonSerializer.Deserialize<ResponseError>(payload, ResponseJsonOptions);
                response.Error = response.Error500!.TranslateToApiError();
            }

            return response;
        }
    }

    public class AdminSyncPlatformCredentialsPlatformId : StringEnum<AdminSyncPlatformCredentialsPlatformId>
    {
        public static readonly AdminSyncPlatformCredentialsPlatformId XBOX
            = new AdminSyncPlatformCredentialsPlatformId("XBOX");


        public static implicit operator AdminSyncPlatformCredentialsPlatformId(string value)
        {
            return NewValue(value);
        }

        public AdminSyncPlatformCredentialsPlatformId(string enumValue)
            : base(enumValue)
        {

        }
    }

}