// Copyright (c) 2022-2023 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Session.Model;

namespace AccelByte.Sdk.Api.Session.Operation
{
    /// <summary>
    /// adminGetAllConfigurationTemplatesV1
    ///
    /// Get all template configurations in specified namespace.
    /// </summary>
    public class AdminGetAllConfigurationTemplatesV1 : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static AdminGetAllConfigurationTemplatesV1Builder Builder { get => new AdminGetAllConfigurationTemplatesV1Builder(); }

        public class AdminGetAllConfigurationTemplatesV1Builder
            : OperationBuilder<AdminGetAllConfigurationTemplatesV1Builder>
        {

            public long? Limit { get; set; }

            public string? Name { get; set; }

            public long? Offset { get; set; }

            public string? Order { get; set; }

            public string? OrderBy { get; set; }





            internal AdminGetAllConfigurationTemplatesV1Builder() { }

            internal AdminGetAllConfigurationTemplatesV1Builder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }


            public AdminGetAllConfigurationTemplatesV1Builder SetLimit(long _limit)
            {
                Limit = _limit;
                return this;
            }

            public AdminGetAllConfigurationTemplatesV1Builder SetName(string _name)
            {
                Name = _name;
                return this;
            }

            public AdminGetAllConfigurationTemplatesV1Builder SetOffset(long _offset)
            {
                Offset = _offset;
                return this;
            }

            public AdminGetAllConfigurationTemplatesV1Builder SetOrder(string _order)
            {
                Order = _order;
                return this;
            }

            public AdminGetAllConfigurationTemplatesV1Builder SetOrderBy(string _orderBy)
            {
                OrderBy = _orderBy;
                return this;
            }





            public AdminGetAllConfigurationTemplatesV1 Build(
                string namespace_
            )
            {
                AdminGetAllConfigurationTemplatesV1 op = new AdminGetAllConfigurationTemplatesV1(this,
                    namespace_
                );
                op.PreferredSecurityMethod = PreferredSecurityMethod;
                op.RequestJsonOptions = RequestJsonOptions;
                op.ResponseJsonOptions = ResponseJsonOptions;

                return op;
            }

            public Model.ApimodelsConfigurationTemplatesResponse? Execute(
                string namespace_
            )
            {
                AdminGetAllConfigurationTemplatesV1 op = Build(
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
        }

        private AdminGetAllConfigurationTemplatesV1(AdminGetAllConfigurationTemplatesV1Builder builder,
            string namespace_
        )
        {
            PathParams["namespace"] = namespace_;

            if (builder.Limit != null) QueryParams["limit"] = Convert.ToString(builder.Limit)!;
            if (builder.Name is not null) QueryParams["name"] = builder.Name;
            if (builder.Offset != null) QueryParams["offset"] = Convert.ToString(builder.Offset)!;
            if (builder.Order is not null) QueryParams["order"] = builder.Order;
            if (builder.OrderBy is not null) QueryParams["orderBy"] = builder.OrderBy;






            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public AdminGetAllConfigurationTemplatesV1(
            string namespace_,
            long? limit,
            string? name,
            long? offset,
            string? order,
            string? orderBy
        )
        {
            PathParams["namespace"] = namespace_;

            if (limit != null) QueryParams["limit"] = Convert.ToString(limit)!;
            if (name is not null) QueryParams["name"] = name;
            if (offset != null) QueryParams["offset"] = Convert.ToString(offset)!;
            if (order is not null) QueryParams["order"] = order;
            if (orderBy is not null) QueryParams["orderBy"] = orderBy;






            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/session/v1/admin/namespaces/{namespace}/configurations";

        public override HttpMethod Method => HttpMethod.Get;

        public override List<string> Consumes => new() { "application/json" };

        public override List<string> Produces => new() { "application/json" };

        public Model.ApimodelsConfigurationTemplatesResponse? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                return JsonSerializer.Deserialize<Model.ApimodelsConfigurationTemplatesResponse>(payload, ResponseJsonOptions);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.ApimodelsConfigurationTemplatesResponse>(payload, ResponseJsonOptions);
            }

            var payloadString = payload.ReadToString();

            throw new HttpResponseException(code, payloadString);
        }
    }

}