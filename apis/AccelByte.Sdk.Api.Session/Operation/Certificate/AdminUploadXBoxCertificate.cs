// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Session.Model;

namespace AccelByte.Sdk.Api.Session.Operation
{
    /// <summary>
    /// adminUploadXBoxCertificate
    ///
    /// Upload certificates for XBox. Certificate must be in the valid form of PFX format.
    /// </summary>
    [Obsolete(DiagnosticId ="ab_deprecated_operation")]
    public class AdminUploadXBoxCertificate : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static AdminUploadXBoxCertificateBuilder Builder { get => new AdminUploadXBoxCertificateBuilder(); }

        public class AdminUploadXBoxCertificateBuilder
            : OperationBuilder<AdminUploadXBoxCertificateBuilder>
        {



            public string? Description { get; set; }



            internal AdminUploadXBoxCertificateBuilder() { }

            internal AdminUploadXBoxCertificateBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }




            public AdminUploadXBoxCertificateBuilder SetDescription(string _description)
            {
                Description = _description;
                return this;
            }



            public AdminUploadXBoxCertificate Build(
                string certname,
                Stream file,
                string password,
                string namespace_
            )
            {
                AdminUploadXBoxCertificate op = new AdminUploadXBoxCertificate(this,
                    certname,                    
                    file,                    
                    password,                    
                    namespace_                    
                );

                op.SetBaseFields<AdminUploadXBoxCertificateBuilder>(this);
                return op;
            }

            [Obsolete(DiagnosticId ="ab_deprecated_operation_wrapper")]
            public AdminUploadXBoxCertificate.Response Execute(
                string certname,
                Stream file,
                string password,
                string namespace_
            )
            {
                AdminUploadXBoxCertificate op = Build(
                    certname,
                    file,
                    password,
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
            public async Task<AdminUploadXBoxCertificate.Response> ExecuteAsync(
                string certname,
                Stream file,
                string password,
                string namespace_
            )
            {
                AdminUploadXBoxCertificate op = Build(
                    certname,
                    file,
                    password,
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
        }

        private AdminUploadXBoxCertificate(AdminUploadXBoxCertificateBuilder builder,
            string certname,
            Stream file,
            string password,
            string namespace_
        )
        {
            PathParams["namespace"] = namespace_;
            
            
            if (builder.Description is not null) FormParams["description"] = builder.Description;
            if (certname is not null) FormParams["certname"] = certname;
            if (file is not null) FormParams["file"] = file;
            if (password is not null) FormParams["password"] = password;

            
            
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        #region Response Part        
        public class Response : ApiResponse<Model.ModelsPlatformCredentials>
        {

            public ResponseError? Error400 { get; set; } = null;

            public ResponseError? Error401 { get; set; } = null;

            public ResponseError? Error403 { get; set; } = null;

            public ResponseError? Error404 { get; set; } = null;

            public ResponseError? Error500 { get; set; } = null;


            protected override string GetFullOperationId() => "Session::Certificate::AdminUploadXBoxCertificate";
        }

        #endregion

        public AdminUploadXBoxCertificate(
            string namespace_,            
            string? description,            
            string certname,            
            Stream file,            
            string password            
        )
        {
            PathParams["namespace"] = namespace_;
            
            
            if (description is not null) FormParams["description"] = description;
            if (certname is not null) FormParams["certname"] = certname;
            if (file is not null) FormParams["file"] = file;
            if (password is not null) FormParams["password"] = password;

            
            
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/session/v1/admin/namespaces/{namespace}/certificates/pfx/platforms/xbl";

        public override HttpMethod Method => HttpMethod.Put;

        public override List<string> Consumes => new() { "multipart/form-data" };

        public override List<string> Produces => new() { "application/json" };
        
        public AdminUploadXBoxCertificate.Response ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            var response = new AdminUploadXBoxCertificate.Response()
            {
                StatusCode = code,
                ContentType = contentType
            };

            if (code == (HttpStatusCode)204)
            {
                response.IsSuccess = true;
            }
            else if ((code == (HttpStatusCode)201) || (code == (HttpStatusCode)202) || (code == (HttpStatusCode)200))
            {
                response.Data = JsonSerializer.Deserialize<Model.ModelsPlatformCredentials>(payload, ResponseJsonOptions);
                response.IsSuccess = true;
            }
            else if (code == (HttpStatusCode)400)
            {
                response.Error400 = JsonSerializer.Deserialize<ResponseError>(payload, ResponseJsonOptions);
                response.Error = response.Error400!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)401)
            {
                response.Error401 = JsonSerializer.Deserialize<ResponseError>(payload, ResponseJsonOptions);
                response.Error = response.Error401!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)403)
            {
                response.Error403 = JsonSerializer.Deserialize<ResponseError>(payload, ResponseJsonOptions);
                response.Error = response.Error403!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)404)
            {
                response.Error404 = JsonSerializer.Deserialize<ResponseError>(payload, ResponseJsonOptions);
                response.Error = response.Error404!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)500)
            {
                response.Error500 = JsonSerializer.Deserialize<ResponseError>(payload, ResponseJsonOptions);
                response.Error = response.Error500!.TranslateToApiError();
            }

            return response;
        }
    }

}