// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Match2.Model;

namespace AccelByte.Sdk.Api.Match2.Operation
{
    /// <summary>
    /// CreateMatchTicket
    ///
    /// Creates a new request for matchmaking.
    /// 
    /// Cross Platform: Allow player to play game with "any" registered platforms.
    /// 1. Cross Platform can be enabled through session service or create match ticket.
    /// a. via ticket: specify several cross_platform on create match ticket attributes. **[DEPRECATED]** client should not send from attribute `cross_platform` will be populated from backend
    /// This value will override player attributes in session service. e.g. cross_platform:[xbox,psn,steam]
    /// b. via session service: set player/party cross_platform attributes.
    /// c. Enable match options ruleset with name cross_platform and type "any".
    /// ```
    /// {
    /// "name": "co-op",
    /// "data": {
    /// "alliance": {
    /// "min_number": 1,
    /// "max_number": 1,
    /// "player_min_number": 1,
    /// "player_max_number": 4
    /// },
    /// "match_options": {
    /// "options": [
    /// {"name": "cross_platform", "type": "any"}
    /// ]
    /// }
    /// }
    /// }
    /// ```
    /// 2. Cross Platform can be disabled from the matchpool configuration `crossplay_disabled=true`
    /// 3. When matchpool `crossplay_disabled=false`
    /// * request attribute cross_platform is empty **[Recommended]**:
    /// * Matchmaking will consider Party leader `crossplayEnabled` preference or Session attribute `crossplayEnabled` preference.
    /// * When `crossplayEnabled=true` `cross_platforms` attributes will be populated from [active login methods](/iam/apidocs/#/Third%20Party%20Credential/RetrieveAllActiveThirdPartyLoginPlatformCredentialPublicV3) otherwise it will set to leader current platform
    /// * When `crossplayEnabled=false` `cross_platforms` attributes will be set to user's currentPlatform
    /// * request attribute cross_platform is not empty **[Not Recommended]**:
    /// * Cross Platform can be disabled with specify only ONE cross_platform. Current matchmaking use this behavior. e.g. cross_platform:[xbox]
    /// * Multiple cross_platform values is considered to be crossplay enabled
    /// 4. This behavior only works for Default Matchmaker. Custom matchmaker (custom gRPC matchmaker) need to consider this on its own implementation.
    /// </summary>
    public class CreateMatchTicket : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static CreateMatchTicketBuilder Builder { get => new CreateMatchTicketBuilder(); }

        public class CreateMatchTicketBuilder
            : OperationBuilder<CreateMatchTicketBuilder>
        {





            internal CreateMatchTicketBuilder() { }

            internal CreateMatchTicketBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }






            public CreateMatchTicket Build(
                ApiMatchTicketRequest body,
                string namespace_
            )
            {
                CreateMatchTicket op = new CreateMatchTicket(this,
                    body,
                    namespace_
                );

                op.SetBaseFields<CreateMatchTicketBuilder>(this);
                return op;
            }

            public Model.ApiMatchTicketResponse? Execute(
                ApiMatchTicketRequest body,
                string namespace_
            )
            {
                CreateMatchTicket op = Build(
                    body,
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
            public async Task<Model.ApiMatchTicketResponse?> ExecuteAsync(
                ApiMatchTicketRequest body,
                string namespace_
            )
            {
                CreateMatchTicket op = Build(
                    body,
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
        }

        private CreateMatchTicket(CreateMatchTicketBuilder builder,
            ApiMatchTicketRequest body,
            string namespace_
        )
        {
            PathParams["namespace"] = namespace_;





            BodyParams = body;


            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public CreateMatchTicket(
            string namespace_,
            Model.ApiMatchTicketRequest body
        )
        {
            PathParams["namespace"] = namespace_;





            BodyParams = body;


            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/match2/v1/namespaces/{namespace}/match-tickets";

        public override HttpMethod Method => HttpMethod.Post;

        public override List<string> Consumes => new() { "application/json" };

        public override List<string> Produces => new() { "application/json" };

        public Model.ApiMatchTicketResponse? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                return JsonSerializer.Deserialize<Model.ApiMatchTicketResponse>(payload, ResponseJsonOptions);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.ApiMatchTicketResponse>(payload, ResponseJsonOptions);
            }

            var payloadString = payload.ReadToString();

            throw new HttpResponseException(code, payloadString);
        }
    }

}