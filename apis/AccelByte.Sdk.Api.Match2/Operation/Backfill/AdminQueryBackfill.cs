// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Match2.Model;

namespace AccelByte.Sdk.Api.Match2.Operation
{
    /// <summary>
    /// AdminQueryBackfill
    ///
    /// Admin Query backfill ticket
    /// </summary>
    public class AdminQueryBackfill : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static AdminQueryBackfillBuilder Builder { get => new AdminQueryBackfillBuilder(); }

        public class AdminQueryBackfillBuilder
            : OperationBuilder<AdminQueryBackfillBuilder>
        {

            public DateTime? FromTime { get; set; }

            public bool? IsActive { get; set; }

            public long? Limit { get; set; }

            public string? MatchPool { get; set; }

            public long? Offset { get; set; }

            public string? PlayerID { get; set; }

            public string? Region { get; set; }

            public string? SessionID { get; set; }

            public DateTime? ToTime { get; set; }





            internal AdminQueryBackfillBuilder() { }

            internal AdminQueryBackfillBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }


            public AdminQueryBackfillBuilder SetFromTime(DateTime _fromTime)
            {
                FromTime = _fromTime;
                return this;
            }

            public AdminQueryBackfillBuilder SetIsActive(bool _isActive)
            {
                IsActive = _isActive;
                return this;
            }

            public AdminQueryBackfillBuilder SetLimit(long _limit)
            {
                Limit = _limit;
                return this;
            }

            public AdminQueryBackfillBuilder SetMatchPool(string _matchPool)
            {
                MatchPool = _matchPool;
                return this;
            }

            public AdminQueryBackfillBuilder SetOffset(long _offset)
            {
                Offset = _offset;
                return this;
            }

            public AdminQueryBackfillBuilder SetPlayerID(string _playerID)
            {
                PlayerID = _playerID;
                return this;
            }

            public AdminQueryBackfillBuilder SetRegion(string _region)
            {
                Region = _region;
                return this;
            }

            public AdminQueryBackfillBuilder SetSessionID(string _sessionID)
            {
                SessionID = _sessionID;
                return this;
            }

            public AdminQueryBackfillBuilder SetToTime(DateTime _toTime)
            {
                ToTime = _toTime;
                return this;
            }





            public AdminQueryBackfill Build(
                string namespace_
            )
            {
                AdminQueryBackfill op = new AdminQueryBackfill(this,
                    namespace_
                );

                op.SetBaseFields<AdminQueryBackfillBuilder>(this);
                return op;
            }

            public AdminQueryBackfill.Response Execute(
                string namespace_
            )
            {
                AdminQueryBackfill op = Build(
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
            public async Task<AdminQueryBackfill.Response> ExecuteAsync(
                string namespace_
            )
            {
                AdminQueryBackfill op = Build(
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
        }

        private AdminQueryBackfill(AdminQueryBackfillBuilder builder,
            string namespace_
        )
        {
            PathParams["namespace"] = namespace_;

            if (builder.FromTime != null)
                QueryParams["fromTime"] = builder.FromTime.Value.ToString("O", System.Globalization.CultureInfo.InvariantCulture);
            if (builder.IsActive != null) QueryParams["isActive"] = Convert.ToString(builder.IsActive)!;
            if (builder.Limit != null) QueryParams["limit"] = Convert.ToString(builder.Limit)!;
            if (builder.MatchPool is not null) QueryParams["matchPool"] = builder.MatchPool;
            if (builder.Offset != null) QueryParams["offset"] = Convert.ToString(builder.Offset)!;
            if (builder.PlayerID is not null) QueryParams["playerID"] = builder.PlayerID;
            if (builder.Region is not null) QueryParams["region"] = builder.Region;
            if (builder.SessionID is not null) QueryParams["sessionID"] = builder.SessionID;
            if (builder.ToTime != null)
                QueryParams["toTime"] = builder.ToTime.Value.ToString("O", System.Globalization.CultureInfo.InvariantCulture);






            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        #region Response Part        
        public class Response : ApiResponse<Model.ApiListBackfillQueryResponse>
        {

            public ResponseError? Error400 { get; set; } = null;

            public ResponseError? Error401 { get; set; } = null;

            public ResponseError? Error403 { get; set; } = null;

            public ResponseError? Error404 { get; set; } = null;

            public ResponseError? Error500 { get; set; } = null;


            protected override string GetFullOperationId() => "Match2::Backfill::AdminQueryBackfill";
        }

        #endregion

        public AdminQueryBackfill(
            string namespace_,
            DateTime? fromTime,
            bool? isActive,
            long? limit,
            string? matchPool,
            long? offset,
            string? playerID,
            string? region,
            string? sessionID,
            DateTime? toTime
        )
        {
            PathParams["namespace"] = namespace_;

            if (fromTime != null)
                QueryParams["fromTime"] = fromTime.Value.ToString("O", System.Globalization.CultureInfo.InvariantCulture);
            if (isActive != null) QueryParams["isActive"] = Convert.ToString(isActive)!;
            if (limit != null) QueryParams["limit"] = Convert.ToString(limit)!;
            if (matchPool is not null) QueryParams["matchPool"] = matchPool;
            if (offset != null) QueryParams["offset"] = Convert.ToString(offset)!;
            if (playerID is not null) QueryParams["playerID"] = playerID;
            if (region is not null) QueryParams["region"] = region;
            if (sessionID is not null) QueryParams["sessionID"] = sessionID;
            if (toTime != null)
                QueryParams["toTime"] = toTime.Value.ToString("O", System.Globalization.CultureInfo.InvariantCulture);






            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/match2/v1/namespaces/{namespace}/backfill";

        public override HttpMethod Method => HttpMethod.Get;

        public override List<string> Consumes => new() { "application/json" };

        public override List<string> Produces => new() { "application/json" };

        public AdminQueryBackfill.Response ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            var response = new AdminQueryBackfill.Response()
            {
                StatusCode = code,
                ContentType = contentType
            };

            if (code == (HttpStatusCode)204)
            {
                response.IsSuccess = true;
            }
            else if ((code == (HttpStatusCode)201) || (code == (HttpStatusCode)202) || (code == (HttpStatusCode)200))
            {
                response.Data = JsonSerializer.Deserialize<Model.ApiListBackfillQueryResponse>(payload, ResponseJsonOptions);
                response.IsSuccess = true;
            }
            else if (code == (HttpStatusCode)400)
            {
                response.Error400 = JsonSerializer.Deserialize<ResponseError>(payload, ResponseJsonOptions);
                response.Error = response.Error400!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)401)
            {
                response.Error401 = JsonSerializer.Deserialize<ResponseError>(payload, ResponseJsonOptions);
                response.Error = response.Error401!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)403)
            {
                response.Error403 = JsonSerializer.Deserialize<ResponseError>(payload, ResponseJsonOptions);
                response.Error = response.Error403!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)404)
            {
                response.Error404 = JsonSerializer.Deserialize<ResponseError>(payload, ResponseJsonOptions);
                response.Error = response.Error404!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)500)
            {
                response.Error500 = JsonSerializer.Deserialize<ResponseError>(payload, ResponseJsonOptions);
                response.Error = response.Error500!.TranslateToApiError();
            }

            return response;
        }
    }

}