// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;

using AccelByte.Sdk.Api.Match2.Model;
using AccelByte.Sdk.Api.Match2.Operation;

namespace AccelByte.Sdk.Api.Match2.Wrapper
{
    public class Backfill
    {
        private readonly IAccelByteSdk _sdk;

        private string _CustomBasePath = String.Empty;

        public Backfill(IAccelByteSdk sdk)
        {
            _sdk = sdk;
        }

        public Backfill(IAccelByteSdk sdk, string customBasePath)
        {
            _sdk = sdk;
            _CustomBasePath = customBasePath;
        }

        #region Operation Builders
        public AdminQueryBackfill.AdminQueryBackfillBuilder AdminQueryBackfillOp
        {
            get
            {
                var opBuilder = new Operation.AdminQueryBackfill.AdminQueryBackfillBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public CreateBackfill.CreateBackfillBuilder CreateBackfillOp
        {
            get
            {
                var opBuilder = new Operation.CreateBackfill.CreateBackfillBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public GetBackfillProposal.GetBackfillProposalBuilder GetBackfillProposalOp
        {
            get
            {
                var opBuilder = new Operation.GetBackfillProposal.GetBackfillProposalBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public GetBackfill.GetBackfillBuilder GetBackfillOp
        {
            get
            {
                var opBuilder = new Operation.GetBackfill.GetBackfillBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public DeleteBackfill.DeleteBackfillBuilder DeleteBackfillOp
        {
            get
            {
                var opBuilder = new Operation.DeleteBackfill.DeleteBackfillBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AcceptBackfill.AcceptBackfillBuilder AcceptBackfillOp
        {
            get
            {
                var opBuilder = new Operation.AcceptBackfill.AcceptBackfillBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public RejectBackfill.RejectBackfillBuilder RejectBackfillOp
        {
            get
            {
                var opBuilder = new Operation.RejectBackfill.RejectBackfillBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        #endregion

        public AdminQueryBackfill.Response AdminQueryBackfill(AdminQueryBackfill input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminQueryBackfill.Response> AdminQueryBackfillAsync(AdminQueryBackfill input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public CreateBackfill.Response CreateBackfill(CreateBackfill input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<CreateBackfill.Response> CreateBackfillAsync(CreateBackfill input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public GetBackfillProposal.Response GetBackfillProposal(GetBackfillProposal input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<GetBackfillProposal.Response> GetBackfillProposalAsync(GetBackfillProposal input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public GetBackfill.Response GetBackfill(GetBackfill input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<GetBackfill.Response> GetBackfillAsync(GetBackfill input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public DeleteBackfill.Response DeleteBackfill(DeleteBackfill input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<DeleteBackfill.Response> DeleteBackfillAsync(DeleteBackfill input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AcceptBackfill.Response AcceptBackfill(AcceptBackfill input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AcceptBackfill.Response> AcceptBackfillAsync(AcceptBackfill input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public AcceptBackfill.Response<T1> AcceptBackfill<T1>(AcceptBackfill input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AcceptBackfill.Response<T1>> AcceptBackfillAsync<T1>(AcceptBackfill input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public RejectBackfill.Response RejectBackfill(RejectBackfill input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<RejectBackfill.Response> RejectBackfillAsync(RejectBackfill input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
    }
}