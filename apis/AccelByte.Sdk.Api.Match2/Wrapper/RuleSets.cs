// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;

using AccelByte.Sdk.Api.Match2.Model;
using AccelByte.Sdk.Api.Match2.Operation;

namespace AccelByte.Sdk.Api.Match2.Wrapper
{
    public class RuleSets
    {
        private readonly IAccelByteSdk _sdk;

        private string _CustomBasePath = String.Empty;

        public RuleSets(IAccelByteSdk sdk)
        {
            _sdk = sdk;
        }

        public RuleSets(IAccelByteSdk sdk, string customBasePath)
        {
            _sdk = sdk;
            _CustomBasePath = customBasePath;
        }

        #region Operation Builders
        public RuleSetList.RuleSetListBuilder RuleSetListOp
        {
            get
            {
                var opBuilder = new Operation.RuleSetList.RuleSetListBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public CreateRuleSet.CreateRuleSetBuilder CreateRuleSetOp
        {
            get
            {
                var opBuilder = new Operation.CreateRuleSet.CreateRuleSetBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public RuleSetDetails.RuleSetDetailsBuilder RuleSetDetailsOp
        {
            get
            {
                var opBuilder = new Operation.RuleSetDetails.RuleSetDetailsBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public UpdateRuleSet.UpdateRuleSetBuilder UpdateRuleSetOp
        {
            get
            {
                var opBuilder = new Operation.UpdateRuleSet.UpdateRuleSetBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public DeleteRuleSet.DeleteRuleSetBuilder DeleteRuleSetOp
        {
            get
            {
                var opBuilder = new Operation.DeleteRuleSet.DeleteRuleSetBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        #endregion

        public RuleSetList.Response RuleSetList(RuleSetList input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<RuleSetList.Response> RuleSetListAsync(RuleSetList input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public CreateRuleSet.Response CreateRuleSet(CreateRuleSet input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<CreateRuleSet.Response> CreateRuleSetAsync(CreateRuleSet input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public RuleSetDetails.Response RuleSetDetails(RuleSetDetails input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<RuleSetDetails.Response> RuleSetDetailsAsync(RuleSetDetails input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public RuleSetDetails.Response<T1> RuleSetDetails<T1>(RuleSetDetails input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<RuleSetDetails.Response<T1>> RuleSetDetailsAsync<T1>(RuleSetDetails input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public UpdateRuleSet.Response UpdateRuleSet(UpdateRuleSet input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<UpdateRuleSet.Response> UpdateRuleSetAsync(UpdateRuleSet input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public UpdateRuleSet.Response<T1> UpdateRuleSet<T1>(UpdateRuleSet input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<UpdateRuleSet.Response<T1>> UpdateRuleSetAsync<T1>(UpdateRuleSet input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public DeleteRuleSet.Response DeleteRuleSet(DeleteRuleSet input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<DeleteRuleSet.Response> DeleteRuleSetAsync(DeleteRuleSet input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
    }
}