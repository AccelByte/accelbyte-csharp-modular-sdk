// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;

using AccelByte.Sdk.Api.Match2.Model;
using AccelByte.Sdk.Api.Match2.Operation;

namespace AccelByte.Sdk.Api.Match2.Wrapper
{
    public class MatchPools
    {
        private readonly IAccelByteSdk _sdk;

        private string _CustomBasePath = String.Empty;

        public MatchPools(IAccelByteSdk sdk)
        {
            _sdk = sdk;
        }

        public MatchPools(IAccelByteSdk sdk, string customBasePath)
        {
            _sdk = sdk;
            _CustomBasePath = customBasePath;
        }

        #region Operation Builders
        public MatchPoolList.MatchPoolListBuilder MatchPoolListOp
        {
            get
            {
                var opBuilder = new Operation.MatchPoolList.MatchPoolListBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public CreateMatchPool.CreateMatchPoolBuilder CreateMatchPoolOp
        {
            get
            {
                var opBuilder = new Operation.CreateMatchPool.CreateMatchPoolBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public MatchPoolDetails.MatchPoolDetailsBuilder MatchPoolDetailsOp
        {
            get
            {
                var opBuilder = new Operation.MatchPoolDetails.MatchPoolDetailsBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public UpdateMatchPool.UpdateMatchPoolBuilder UpdateMatchPoolOp
        {
            get
            {
                var opBuilder = new Operation.UpdateMatchPool.UpdateMatchPoolBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public DeleteMatchPool.DeleteMatchPoolBuilder DeleteMatchPoolOp
        {
            get
            {
                var opBuilder = new Operation.DeleteMatchPool.DeleteMatchPoolBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public MatchPoolMetric.MatchPoolMetricBuilder MatchPoolMetricOp
        {
            get
            {
                var opBuilder = new Operation.MatchPoolMetric.MatchPoolMetricBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public GetPlayerMetric.GetPlayerMetricBuilder GetPlayerMetricOp
        {
            get
            {
                var opBuilder = new Operation.GetPlayerMetric.GetPlayerMetricBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminGetMatchPoolTickets.AdminGetMatchPoolTicketsBuilder AdminGetMatchPoolTicketsOp
        {
            get
            {
                var opBuilder = new Operation.AdminGetMatchPoolTickets.AdminGetMatchPoolTicketsBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        #endregion

        public Model.ApiListMatchPoolsResponse? MatchPoolList(MatchPoolList input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ApiListMatchPoolsResponse?> MatchPoolListAsync(MatchPoolList input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public void CreateMatchPool(CreateMatchPool input)
        {
            var response = _sdk.RunRequest(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task CreateMatchPoolAsync(CreateMatchPool input)
        {
            var response = await _sdk.RunRequestAsync(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ApiMatchPool? MatchPoolDetails(MatchPoolDetails input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ApiMatchPool?> MatchPoolDetailsAsync(MatchPoolDetails input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ApiMatchPool? UpdateMatchPool(UpdateMatchPool input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ApiMatchPool?> UpdateMatchPoolAsync(UpdateMatchPool input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public void DeleteMatchPool(DeleteMatchPool input)
        {
            var response = _sdk.RunRequest(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task DeleteMatchPoolAsync(DeleteMatchPool input)
        {
            var response = await _sdk.RunRequestAsync(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ApiTicketMetricResultRecord? MatchPoolMetric(MatchPoolMetric input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ApiTicketMetricResultRecord?> MatchPoolMetricAsync(MatchPoolMetric input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ApiPlayerMetricRecord? GetPlayerMetric(GetPlayerMetric input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ApiPlayerMetricRecord?> GetPlayerMetricAsync(GetPlayerMetric input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ApiListMatchPoolTicketsResponse? AdminGetMatchPoolTickets(AdminGetMatchPoolTickets input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ApiListMatchPoolTicketsResponse?> AdminGetMatchPoolTicketsAsync(AdminGetMatchPoolTickets input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
    }
}