// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;

using AccelByte.Sdk.Api.Dslogmanager.Model;
using AccelByte.Sdk.Api.Dslogmanager.Operation;

namespace AccelByte.Sdk.Api.Dslogmanager.Wrapper
{
    public class TerminatedServers
    {
        private readonly IAccelByteSdk _sdk;

        private string _CustomBasePath = String.Empty;

        public TerminatedServers(IAccelByteSdk sdk)
        {
            _sdk = sdk;
        }

        public TerminatedServers(IAccelByteSdk sdk, string customBasePath)
        {
            _sdk = sdk;
            _CustomBasePath = customBasePath;
        }

        #region Operation Builders
        public ListTerminatedServers.ListTerminatedServersBuilder ListTerminatedServersOp
        {
            get
            {
                var opBuilder = new Operation.ListTerminatedServers.ListTerminatedServersBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public DownloadServerLogs.DownloadServerLogsBuilder DownloadServerLogsOp
        {
            get
            {
                var opBuilder = new Operation.DownloadServerLogs.DownloadServerLogsBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public CheckServerLogs.CheckServerLogsBuilder CheckServerLogsOp
        {
            get
            {
                var opBuilder = new Operation.CheckServerLogs.CheckServerLogsBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        #endregion

        public ListTerminatedServers.Response ListTerminatedServers(ListTerminatedServers input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<ListTerminatedServers.Response> ListTerminatedServersAsync(ListTerminatedServers input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public DownloadServerLogs.Response DownloadServerLogs(DownloadServerLogs input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<DownloadServerLogs.Response> DownloadServerLogsAsync(DownloadServerLogs input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public CheckServerLogs.Response CheckServerLogs(CheckServerLogs input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<CheckServerLogs.Response> CheckServerLogsAsync(CheckServerLogs input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
    }
}