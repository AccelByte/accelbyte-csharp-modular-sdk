// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Dslogmanager.Model;

namespace AccelByte.Sdk.Api.Dslogmanager.Operation
{
    /// <summary>
    /// downloadServerLogs
    ///
    /// Required permission: ADMIN:NAMESPACE:{namespace}:DSLM:LOG [READ]
    /// 
    /// Required scope: social
    /// 
    /// This endpoint will download dedicated server's log file (.log).
    /// </summary>
    public class DownloadServerLogs : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static DownloadServerLogsBuilder Builder { get => new DownloadServerLogsBuilder(); }

        public class DownloadServerLogsBuilder
            : OperationBuilder<DownloadServerLogsBuilder>
        {





            internal DownloadServerLogsBuilder() { }

            internal DownloadServerLogsBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }






            public DownloadServerLogs Build(
                string namespace_,
                string podName
            )
            {
                DownloadServerLogs op = new DownloadServerLogs(this,
                    namespace_,
                    podName
                );

                op.SetBaseFields<DownloadServerLogsBuilder>(this);
                return op;
            }

            public Stream? Execute(
                string namespace_,
                string podName
            )
            {
                DownloadServerLogs op = Build(
                    namespace_,
                    podName
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
            public async Task<Stream?> ExecuteAsync(
                string namespace_,
                string podName
            )
            {
                DownloadServerLogs op = Build(
                    namespace_,
                    podName
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
        }

        private DownloadServerLogs(DownloadServerLogsBuilder builder,
            string namespace_,
            string podName
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["podName"] = podName;







            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public DownloadServerLogs(
            string namespace_,
            string podName
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["podName"] = podName;







            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/dslogmanager/namespaces/{namespace}/servers/{podName}/logs/download";

        public override HttpMethod Method => HttpMethod.Get;

        public override List<string> Consumes => new() { "application/json" };

        public override List<string> Produces => new() { "application/json", "text/x-log" };

        public Stream? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                return payload;
            }
            else if (code == (HttpStatusCode)200)
            {
                return payload;
            }

            var payloadString = payload.ReadToString();

            throw new HttpResponseException(code, payloadString);
        }
    }

}