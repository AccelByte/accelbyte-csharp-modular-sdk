// Copyright (c) 2023 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using System;

using AccelByte.Sdk.Core;

using AccelByte.Sdk.Api.Cloudsave;

namespace AccelByte.Sdk.Api.Cloudsave
{
    public class CloudsaveApi : ISdkApi
    {
        private IAccelByteSdk _Sdk;

        private string _CustomBasePath = String.Empty;

        public Wrapper.AdminRecord AdminRecord
        {
            get
            {
                if (_AdminRecord == null)
                    _AdminRecord = new Wrapper.AdminRecord(_Sdk, _CustomBasePath);
                return _AdminRecord;
            }
        }
        private Wrapper.AdminRecord? _AdminRecord = null;

        public Wrapper.TTLConfig TTLConfig
        {
            get
            {
                if (_TTLConfig == null)
                    _TTLConfig = new Wrapper.TTLConfig(_Sdk, _CustomBasePath);
                return _TTLConfig;
            }
        }
        private Wrapper.TTLConfig? _TTLConfig = null;

        public Wrapper.AdminGameBinaryRecord AdminGameBinaryRecord
        {
            get
            {
                if (_AdminGameBinaryRecord == null)
                    _AdminGameBinaryRecord = new Wrapper.AdminGameBinaryRecord(_Sdk, _CustomBasePath);
                return _AdminGameBinaryRecord;
            }
        }
        private Wrapper.AdminGameBinaryRecord? _AdminGameBinaryRecord = null;

        public Wrapper.AdminConcurrentRecord AdminConcurrentRecord
        {
            get
            {
                if (_AdminConcurrentRecord == null)
                    _AdminConcurrentRecord = new Wrapper.AdminConcurrentRecord(_Sdk, _CustomBasePath);
                return _AdminConcurrentRecord;
            }
        }
        private Wrapper.AdminConcurrentRecord? _AdminConcurrentRecord = null;

        public Wrapper.PluginConfig PluginConfig
        {
            get
            {
                if (_PluginConfig == null)
                    _PluginConfig = new Wrapper.PluginConfig(_Sdk, _CustomBasePath);
                return _PluginConfig;
            }
        }
        private Wrapper.PluginConfig? _PluginConfig = null;

        public Wrapper.AdminGameRecord AdminGameRecord
        {
            get
            {
                if (_AdminGameRecord == null)
                    _AdminGameRecord = new Wrapper.AdminGameRecord(_Sdk, _CustomBasePath);
                return _AdminGameRecord;
            }
        }
        private Wrapper.AdminGameRecord? _AdminGameRecord = null;

        public Wrapper.AdminTags AdminTags
        {
            get
            {
                if (_AdminTags == null)
                    _AdminTags = new Wrapper.AdminTags(_Sdk, _CustomBasePath);
                return _AdminTags;
            }
        }
        private Wrapper.AdminTags? _AdminTags = null;

        public Wrapper.AdminPlayerRecord AdminPlayerRecord
        {
            get
            {
                if (_AdminPlayerRecord == null)
                    _AdminPlayerRecord = new Wrapper.AdminPlayerRecord(_Sdk, _CustomBasePath);
                return _AdminPlayerRecord;
            }
        }
        private Wrapper.AdminPlayerRecord? _AdminPlayerRecord = null;

        public Wrapper.AdminPlayerBinaryRecord AdminPlayerBinaryRecord
        {
            get
            {
                if (_AdminPlayerBinaryRecord == null)
                    _AdminPlayerBinaryRecord = new Wrapper.AdminPlayerBinaryRecord(_Sdk, _CustomBasePath);
                return _AdminPlayerBinaryRecord;
            }
        }
        private Wrapper.AdminPlayerBinaryRecord? _AdminPlayerBinaryRecord = null;

        public Wrapper.PublicGameBinaryRecord PublicGameBinaryRecord
        {
            get
            {
                if (_PublicGameBinaryRecord == null)
                    _PublicGameBinaryRecord = new Wrapper.PublicGameBinaryRecord(_Sdk, _CustomBasePath);
                return _PublicGameBinaryRecord;
            }
        }
        private Wrapper.PublicGameBinaryRecord? _PublicGameBinaryRecord = null;

        public Wrapper.ConcurrentRecord ConcurrentRecord
        {
            get
            {
                if (_ConcurrentRecord == null)
                    _ConcurrentRecord = new Wrapper.ConcurrentRecord(_Sdk, _CustomBasePath);
                return _ConcurrentRecord;
            }
        }
        private Wrapper.ConcurrentRecord? _ConcurrentRecord = null;

        public Wrapper.PublicGameRecord PublicGameRecord
        {
            get
            {
                if (_PublicGameRecord == null)
                    _PublicGameRecord = new Wrapper.PublicGameRecord(_Sdk, _CustomBasePath);
                return _PublicGameRecord;
            }
        }
        private Wrapper.PublicGameRecord? _PublicGameRecord = null;

        public Wrapper.PublicTags PublicTags
        {
            get
            {
                if (_PublicTags == null)
                    _PublicTags = new Wrapper.PublicTags(_Sdk, _CustomBasePath);
                return _PublicTags;
            }
        }
        private Wrapper.PublicTags? _PublicTags = null;

        public Wrapper.PublicPlayerBinaryRecord PublicPlayerBinaryRecord
        {
            get
            {
                if (_PublicPlayerBinaryRecord == null)
                    _PublicPlayerBinaryRecord = new Wrapper.PublicPlayerBinaryRecord(_Sdk, _CustomBasePath);
                return _PublicPlayerBinaryRecord;
            }
        }
        private Wrapper.PublicPlayerBinaryRecord? _PublicPlayerBinaryRecord = null;

        public Wrapper.PublicPlayerRecord PublicPlayerRecord
        {
            get
            {
                if (_PublicPlayerRecord == null)
                    _PublicPlayerRecord = new Wrapper.PublicPlayerRecord(_Sdk, _CustomBasePath);
                return _PublicPlayerRecord;
            }
        }
        private Wrapper.PublicPlayerRecord? _PublicPlayerRecord = null;

        internal CloudsaveApi(IAccelByteSdk sdk)
        {
            _Sdk = sdk;
        }

        public CloudsaveApi WithCustomBasePath(string value)
        {
            _CustomBasePath = value;
            return this;
        }
    }
}

namespace AccelByte.Sdk.Api
{
    public static class CloudsaveApi_SdkExts
    {
        public static CloudsaveApi GetCloudsaveApi(this IAccelByteSdk sdk)
        {
            return sdk.GetApi<CloudsaveApi>("cloudsave", () =>
            {
                string customPath = sdk.Configuration.ConfigRepository.GetCustomServiceBasePath("cloudsave");
                if (customPath != "")
                    return (new CloudsaveApi(sdk)).WithCustomBasePath(customPath);
                else
                    return new CloudsaveApi(sdk);
            });
        }
    }
}