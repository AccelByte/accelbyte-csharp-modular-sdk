// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;

using AccelByte.Sdk.Api.Cloudsave.Model;
using AccelByte.Sdk.Api.Cloudsave.Operation;

namespace AccelByte.Sdk.Api.Cloudsave.Wrapper
{
    public class PublicPlayerRecord
    {
        private readonly IAccelByteSdk _sdk;

        private string _CustomBasePath = String.Empty;

        public PublicPlayerRecord(IAccelByteSdk sdk)
        {
            _sdk = sdk;
        }

        public PublicPlayerRecord(IAccelByteSdk sdk, string customBasePath)
        {
            _sdk = sdk;
            _CustomBasePath = customBasePath;
        }

        #region Operation Builders
        public BulkGetPlayerPublicRecordHandlerV1.BulkGetPlayerPublicRecordHandlerV1Builder BulkGetPlayerPublicRecordHandlerV1Op
        {
            get
            {
                var opBuilder = new Operation.BulkGetPlayerPublicRecordHandlerV1.BulkGetPlayerPublicRecordHandlerV1Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public RetrievePlayerRecords.RetrievePlayerRecordsBuilder RetrievePlayerRecordsOp
        {
            get
            {
                var opBuilder = new Operation.RetrievePlayerRecords.RetrievePlayerRecordsBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public GetPlayerRecordsBulkHandlerV1.GetPlayerRecordsBulkHandlerV1Builder GetPlayerRecordsBulkHandlerV1Op
        {
            get
            {
                var opBuilder = new Operation.GetPlayerRecordsBulkHandlerV1.GetPlayerRecordsBulkHandlerV1Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public PublicDeletePlayerPublicRecordHandlerV1.PublicDeletePlayerPublicRecordHandlerV1Builder PublicDeletePlayerPublicRecordHandlerV1Op
        {
            get
            {
                var opBuilder = new Operation.PublicDeletePlayerPublicRecordHandlerV1.PublicDeletePlayerPublicRecordHandlerV1Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public GetOtherPlayerPublicRecordKeyHandlerV1.GetOtherPlayerPublicRecordKeyHandlerV1Builder GetOtherPlayerPublicRecordKeyHandlerV1Op
        {
            get
            {
                var opBuilder = new Operation.GetOtherPlayerPublicRecordKeyHandlerV1.GetOtherPlayerPublicRecordKeyHandlerV1Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public GetOtherPlayerPublicRecordHandlerV1.GetOtherPlayerPublicRecordHandlerV1Builder GetOtherPlayerPublicRecordHandlerV1Op
        {
            get
            {
                var opBuilder = new Operation.GetOtherPlayerPublicRecordHandlerV1.GetOtherPlayerPublicRecordHandlerV1Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public GetPlayerRecordHandlerV1.GetPlayerRecordHandlerV1Builder GetPlayerRecordHandlerV1Op
        {
            get
            {
                var opBuilder = new Operation.GetPlayerRecordHandlerV1.GetPlayerRecordHandlerV1Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public PutPlayerRecordHandlerV1.PutPlayerRecordHandlerV1Builder PutPlayerRecordHandlerV1Op
        {
            get
            {
                var opBuilder = new Operation.PutPlayerRecordHandlerV1.PutPlayerRecordHandlerV1Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public PostPlayerRecordHandlerV1.PostPlayerRecordHandlerV1Builder PostPlayerRecordHandlerV1Op
        {
            get
            {
                var opBuilder = new Operation.PostPlayerRecordHandlerV1.PostPlayerRecordHandlerV1Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public DeletePlayerRecordHandlerV1.DeletePlayerRecordHandlerV1Builder DeletePlayerRecordHandlerV1Op
        {
            get
            {
                var opBuilder = new Operation.DeletePlayerRecordHandlerV1.DeletePlayerRecordHandlerV1Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public GetPlayerPublicRecordHandlerV1.GetPlayerPublicRecordHandlerV1Builder GetPlayerPublicRecordHandlerV1Op
        {
            get
            {
                var opBuilder = new Operation.GetPlayerPublicRecordHandlerV1.GetPlayerPublicRecordHandlerV1Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public PutPlayerPublicRecordHandlerV1.PutPlayerPublicRecordHandlerV1Builder PutPlayerPublicRecordHandlerV1Op
        {
            get
            {
                var opBuilder = new Operation.PutPlayerPublicRecordHandlerV1.PutPlayerPublicRecordHandlerV1Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public PostPlayerPublicRecordHandlerV1.PostPlayerPublicRecordHandlerV1Builder PostPlayerPublicRecordHandlerV1Op
        {
            get
            {
                var opBuilder = new Operation.PostPlayerPublicRecordHandlerV1.PostPlayerPublicRecordHandlerV1Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        #endregion

        public Model.ModelsBulkGetPlayerRecordResponse? BulkGetPlayerPublicRecordHandlerV1(BulkGetPlayerPublicRecordHandlerV1 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ModelsBulkGetPlayerRecordResponse?> BulkGetPlayerPublicRecordHandlerV1Async(BulkGetPlayerPublicRecordHandlerV1 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ModelsListPlayerRecordKeysResponse? RetrievePlayerRecords(RetrievePlayerRecords input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ModelsListPlayerRecordKeysResponse?> RetrievePlayerRecordsAsync(RetrievePlayerRecords input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ModelsBulkGetPlayerRecordResponse? GetPlayerRecordsBulkHandlerV1(GetPlayerRecordsBulkHandlerV1 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ModelsBulkGetPlayerRecordResponse?> GetPlayerRecordsBulkHandlerV1Async(GetPlayerRecordsBulkHandlerV1 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public void PublicDeletePlayerPublicRecordHandlerV1(PublicDeletePlayerPublicRecordHandlerV1 input)
        {
            var response = _sdk.RunRequest(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task PublicDeletePlayerPublicRecordHandlerV1Async(PublicDeletePlayerPublicRecordHandlerV1 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ModelsListPlayerRecordKeysResponse? GetOtherPlayerPublicRecordKeyHandlerV1(GetOtherPlayerPublicRecordKeyHandlerV1 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ModelsListPlayerRecordKeysResponse?> GetOtherPlayerPublicRecordKeyHandlerV1Async(GetOtherPlayerPublicRecordKeyHandlerV1 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ModelsBulkGetPlayerRecordResponse? GetOtherPlayerPublicRecordHandlerV1(GetOtherPlayerPublicRecordHandlerV1 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ModelsBulkGetPlayerRecordResponse?> GetOtherPlayerPublicRecordHandlerV1Async(GetOtherPlayerPublicRecordHandlerV1 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ModelsPlayerRecordResponse? GetPlayerRecordHandlerV1(GetPlayerRecordHandlerV1 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ModelsPlayerRecordResponse?> GetPlayerRecordHandlerV1Async(GetPlayerRecordHandlerV1 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public Model.ModelsPlayerRecordResponse<T1>? GetPlayerRecordHandlerV1<T1>(GetPlayerRecordHandlerV1 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ModelsPlayerRecordResponse<T1>?> GetPlayerRecordHandlerV1Async<T1>(GetPlayerRecordHandlerV1 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ModelsPlayerRecordResponse? PutPlayerRecordHandlerV1(PutPlayerRecordHandlerV1 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ModelsPlayerRecordResponse?> PutPlayerRecordHandlerV1Async(PutPlayerRecordHandlerV1 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public Model.ModelsPlayerRecordResponse<T1>? PutPlayerRecordHandlerV1<T1>(PutPlayerRecordHandlerV1 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ModelsPlayerRecordResponse<T1>?> PutPlayerRecordHandlerV1Async<T1>(PutPlayerRecordHandlerV1 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ModelsPlayerRecordResponse? PostPlayerRecordHandlerV1(PostPlayerRecordHandlerV1 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ModelsPlayerRecordResponse?> PostPlayerRecordHandlerV1Async(PostPlayerRecordHandlerV1 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public Model.ModelsPlayerRecordResponse<T1>? PostPlayerRecordHandlerV1<T1>(PostPlayerRecordHandlerV1 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ModelsPlayerRecordResponse<T1>?> PostPlayerRecordHandlerV1Async<T1>(PostPlayerRecordHandlerV1 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public void DeletePlayerRecordHandlerV1(DeletePlayerRecordHandlerV1 input)
        {
            var response = _sdk.RunRequest(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task DeletePlayerRecordHandlerV1Async(DeletePlayerRecordHandlerV1 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ModelsPlayerRecordResponse? GetPlayerPublicRecordHandlerV1(GetPlayerPublicRecordHandlerV1 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ModelsPlayerRecordResponse?> GetPlayerPublicRecordHandlerV1Async(GetPlayerPublicRecordHandlerV1 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public Model.ModelsPlayerRecordResponse<T1>? GetPlayerPublicRecordHandlerV1<T1>(GetPlayerPublicRecordHandlerV1 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ModelsPlayerRecordResponse<T1>?> GetPlayerPublicRecordHandlerV1Async<T1>(GetPlayerPublicRecordHandlerV1 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ModelsPlayerRecordResponse? PutPlayerPublicRecordHandlerV1(PutPlayerPublicRecordHandlerV1 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ModelsPlayerRecordResponse?> PutPlayerPublicRecordHandlerV1Async(PutPlayerPublicRecordHandlerV1 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public Model.ModelsPlayerRecordResponse<T1>? PutPlayerPublicRecordHandlerV1<T1>(PutPlayerPublicRecordHandlerV1 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ModelsPlayerRecordResponse<T1>?> PutPlayerPublicRecordHandlerV1Async<T1>(PutPlayerPublicRecordHandlerV1 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ModelsPlayerRecordResponse? PostPlayerPublicRecordHandlerV1(PostPlayerPublicRecordHandlerV1 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ModelsPlayerRecordResponse?> PostPlayerPublicRecordHandlerV1Async(PostPlayerPublicRecordHandlerV1 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public Model.ModelsPlayerRecordResponse<T1>? PostPlayerPublicRecordHandlerV1<T1>(PostPlayerPublicRecordHandlerV1 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ModelsPlayerRecordResponse<T1>?> PostPlayerPublicRecordHandlerV1Async<T1>(PostPlayerPublicRecordHandlerV1 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
    }
}