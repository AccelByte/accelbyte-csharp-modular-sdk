// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;

using AccelByte.Sdk.Api.Cloudsave.Model;
using AccelByte.Sdk.Api.Cloudsave.Operation;

namespace AccelByte.Sdk.Api.Cloudsave.Wrapper
{
    public class PublicPlayerBinaryRecord
    {
        private readonly IAccelByteSdk _sdk;

        private string _CustomBasePath = String.Empty;

        public PublicPlayerBinaryRecord(IAccelByteSdk sdk)
        {
            _sdk = sdk;
        }

        public PublicPlayerBinaryRecord(IAccelByteSdk sdk, string customBasePath)
        {
            _sdk = sdk;
            _CustomBasePath = customBasePath;
        }

        #region Operation Builders
        public BulkGetPlayerPublicBinaryRecordsV1.BulkGetPlayerPublicBinaryRecordsV1Builder BulkGetPlayerPublicBinaryRecordsV1Op
        {
            get
            {
                var opBuilder = new Operation.BulkGetPlayerPublicBinaryRecordsV1.BulkGetPlayerPublicBinaryRecordsV1Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public ListMyBinaryRecordsV1.ListMyBinaryRecordsV1Builder ListMyBinaryRecordsV1Op
        {
            get
            {
                var opBuilder = new Operation.ListMyBinaryRecordsV1.ListMyBinaryRecordsV1Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public BulkGetMyBinaryRecordV1.BulkGetMyBinaryRecordV1Builder BulkGetMyBinaryRecordV1Op
        {
            get
            {
                var opBuilder = new Operation.BulkGetMyBinaryRecordV1.BulkGetMyBinaryRecordV1Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public PostPlayerBinaryRecordV1.PostPlayerBinaryRecordV1Builder PostPlayerBinaryRecordV1Op
        {
            get
            {
                var opBuilder = new Operation.PostPlayerBinaryRecordV1.PostPlayerBinaryRecordV1Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public ListOtherPlayerPublicBinaryRecordsV1.ListOtherPlayerPublicBinaryRecordsV1Builder ListOtherPlayerPublicBinaryRecordsV1Op
        {
            get
            {
                var opBuilder = new Operation.ListOtherPlayerPublicBinaryRecordsV1.ListOtherPlayerPublicBinaryRecordsV1Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public BulkGetOtherPlayerPublicBinaryRecordsV1.BulkGetOtherPlayerPublicBinaryRecordsV1Builder BulkGetOtherPlayerPublicBinaryRecordsV1Op
        {
            get
            {
                var opBuilder = new Operation.BulkGetOtherPlayerPublicBinaryRecordsV1.BulkGetOtherPlayerPublicBinaryRecordsV1Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public GetPlayerBinaryRecordV1.GetPlayerBinaryRecordV1Builder GetPlayerBinaryRecordV1Op
        {
            get
            {
                var opBuilder = new Operation.GetPlayerBinaryRecordV1.GetPlayerBinaryRecordV1Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public PutPlayerBinaryRecordV1.PutPlayerBinaryRecordV1Builder PutPlayerBinaryRecordV1Op
        {
            get
            {
                var opBuilder = new Operation.PutPlayerBinaryRecordV1.PutPlayerBinaryRecordV1Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public DeletePlayerBinaryRecordV1.DeletePlayerBinaryRecordV1Builder DeletePlayerBinaryRecordV1Op
        {
            get
            {
                var opBuilder = new Operation.DeletePlayerBinaryRecordV1.DeletePlayerBinaryRecordV1Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public PutPlayerBinaryRecorMetadataV1.PutPlayerBinaryRecorMetadataV1Builder PutPlayerBinaryRecorMetadataV1Op
        {
            get
            {
                var opBuilder = new Operation.PutPlayerBinaryRecorMetadataV1.PutPlayerBinaryRecorMetadataV1Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public PostPlayerBinaryPresignedURLV1.PostPlayerBinaryPresignedURLV1Builder PostPlayerBinaryPresignedURLV1Op
        {
            get
            {
                var opBuilder = new Operation.PostPlayerBinaryPresignedURLV1.PostPlayerBinaryPresignedURLV1Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public GetPlayerPublicBinaryRecordsV1.GetPlayerPublicBinaryRecordsV1Builder GetPlayerPublicBinaryRecordsV1Op
        {
            get
            {
                var opBuilder = new Operation.GetPlayerPublicBinaryRecordsV1.GetPlayerPublicBinaryRecordsV1Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        #endregion

        public Model.ModelsBulkGetPlayerBinaryRecordResponse? BulkGetPlayerPublicBinaryRecordsV1(BulkGetPlayerPublicBinaryRecordsV1 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ModelsBulkGetPlayerBinaryRecordResponse?> BulkGetPlayerPublicBinaryRecordsV1Async(BulkGetPlayerPublicBinaryRecordsV1 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ModelsListPlayerBinaryRecordsResponse? ListMyBinaryRecordsV1(ListMyBinaryRecordsV1 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ModelsListPlayerBinaryRecordsResponse?> ListMyBinaryRecordsV1Async(ListMyBinaryRecordsV1 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ModelsBulkGetPlayerBinaryRecordResponse? BulkGetMyBinaryRecordV1(BulkGetMyBinaryRecordV1 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ModelsBulkGetPlayerBinaryRecordResponse?> BulkGetMyBinaryRecordV1Async(BulkGetMyBinaryRecordV1 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ModelsUploadBinaryRecordResponse? PostPlayerBinaryRecordV1(PostPlayerBinaryRecordV1 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ModelsUploadBinaryRecordResponse?> PostPlayerBinaryRecordV1Async(PostPlayerBinaryRecordV1 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ModelsListPlayerBinaryRecordsResponse? ListOtherPlayerPublicBinaryRecordsV1(ListOtherPlayerPublicBinaryRecordsV1 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ModelsListPlayerBinaryRecordsResponse?> ListOtherPlayerPublicBinaryRecordsV1Async(ListOtherPlayerPublicBinaryRecordsV1 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ModelsBulkGetPlayerBinaryRecordResponse? BulkGetOtherPlayerPublicBinaryRecordsV1(BulkGetOtherPlayerPublicBinaryRecordsV1 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ModelsBulkGetPlayerBinaryRecordResponse?> BulkGetOtherPlayerPublicBinaryRecordsV1Async(BulkGetOtherPlayerPublicBinaryRecordsV1 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ModelsPlayerBinaryRecordResponse? GetPlayerBinaryRecordV1(GetPlayerBinaryRecordV1 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ModelsPlayerBinaryRecordResponse?> GetPlayerBinaryRecordV1Async(GetPlayerBinaryRecordV1 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ModelsPlayerBinaryRecordResponse? PutPlayerBinaryRecordV1(PutPlayerBinaryRecordV1 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ModelsPlayerBinaryRecordResponse?> PutPlayerBinaryRecordV1Async(PutPlayerBinaryRecordV1 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public void DeletePlayerBinaryRecordV1(DeletePlayerBinaryRecordV1 input)
        {
            var response = _sdk.RunRequest(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task DeletePlayerBinaryRecordV1Async(DeletePlayerBinaryRecordV1 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ModelsPlayerBinaryRecordResponse? PutPlayerBinaryRecorMetadataV1(PutPlayerBinaryRecorMetadataV1 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ModelsPlayerBinaryRecordResponse?> PutPlayerBinaryRecorMetadataV1Async(PutPlayerBinaryRecorMetadataV1 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ModelsUploadBinaryRecordResponse? PostPlayerBinaryPresignedURLV1(PostPlayerBinaryPresignedURLV1 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ModelsUploadBinaryRecordResponse?> PostPlayerBinaryPresignedURLV1Async(PostPlayerBinaryPresignedURLV1 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ModelsPlayerBinaryRecordResponse? GetPlayerPublicBinaryRecordsV1(GetPlayerPublicBinaryRecordsV1 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ModelsPlayerBinaryRecordResponse?> GetPlayerPublicBinaryRecordsV1Async(GetPlayerPublicBinaryRecordsV1 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
    }
}