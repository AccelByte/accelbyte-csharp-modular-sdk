// Copyright (c) 2022-2023 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Dsmc.Model;

namespace AccelByte.Sdk.Api.Dsmc.Operation
{
    /// <summary>
    /// DeleteImage
    ///
    /// Required permission: ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [UPDATE]
    /// 
    /// Required scope: social.
    /// 
    /// This endpoint will delete an image that specified in the request parameter.
    /// 
    /// Default image is cannot be deleted and will throw error 422 (Unprocessable entity).
    /// </summary>
    public class DeleteImage : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static DeleteImageBuilder Builder { get => new DeleteImageBuilder(); }

        public class DeleteImageBuilder
            : OperationBuilder<DeleteImageBuilder>
        {





            internal DeleteImageBuilder() { }

            internal DeleteImageBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }






            public DeleteImage Build(
                string namespace_,
                string imageURI,
                string version
            )
            {
                DeleteImage op = new DeleteImage(this,
                    namespace_,
                    imageURI,
                    version
                );

                op.SetBaseFields<DeleteImageBuilder>(this);
                return op;
            }

            public void Execute(
                string namespace_,
                string imageURI,
                string version
            )
            {
                DeleteImage op = Build(
                    namespace_,
                    imageURI,
                    version
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
        }

        private DeleteImage(DeleteImageBuilder builder,
            string namespace_,
            string imageURI,
            string version
        )
        {
            PathParams["namespace"] = namespace_;

            if (imageURI is not null) QueryParams["imageURI"] = imageURI;
            if (version is not null) QueryParams["version"] = version;






            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public DeleteImage(
            string namespace_,
            string imageURI,
            string version
        )
        {
            PathParams["namespace"] = namespace_;

            if (imageURI is not null) QueryParams["imageURI"] = imageURI;
            if (version is not null) QueryParams["version"] = version;






            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/dsmcontroller/admin/namespaces/{namespace}/images";

        public override HttpMethod Method => HttpMethod.Delete;

        public override List<string> Consumes => new() { "application/json" };

        public override List<string> Produces => new() { "application/json" };

        public void ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return;
            }

            var payloadString = payload.ReadToString();

            throw new HttpResponseException(code, payloadString);
        }
    }

}