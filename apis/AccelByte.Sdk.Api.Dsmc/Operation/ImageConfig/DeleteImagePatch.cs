// Copyright (c) 2022-2023 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Dsmc.Model;

namespace AccelByte.Sdk.Api.Dsmc.Operation
{
    /// <summary>
    /// DeleteImagePatch
    ///
    /// Required permission: ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [UPDATE]
    /// 
    /// Required scope: social
    /// 
    /// This endpoint will delete an image patch that specified in the request parameter
    /// </summary>
    public class DeleteImagePatch : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static DeleteImagePatchBuilder Builder { get => new DeleteImagePatchBuilder(); }

        public class DeleteImagePatchBuilder
            : OperationBuilder<DeleteImagePatchBuilder>
        {





            internal DeleteImagePatchBuilder() { }

            internal DeleteImagePatchBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }






            public DeleteImagePatch Build(
                string namespace_,
                string imageURI,
                string version,
                string versionPatch
            )
            {
                DeleteImagePatch op = new DeleteImagePatch(this,
                    namespace_,
                    imageURI,
                    version,
                    versionPatch
                );
                op.PreferredSecurityMethod = PreferredSecurityMethod;

                return op;
            }

            public void Execute(
                string namespace_,
                string imageURI,
                string version,
                string versionPatch
            )
            {
                DeleteImagePatch op = Build(
                    namespace_,
                    imageURI,
                    version,
                    versionPatch
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
        }

        private DeleteImagePatch(DeleteImagePatchBuilder builder,
            string namespace_,
            string imageURI,
            string version,
            string versionPatch
        )
        {
            PathParams["namespace"] = namespace_;

            if (imageURI is not null) QueryParams["imageURI"] = imageURI;
            if (version is not null) QueryParams["version"] = version;
            if (versionPatch is not null) QueryParams["versionPatch"] = versionPatch;






            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public DeleteImagePatch(
            string namespace_,
            string imageURI,
            string version,
            string versionPatch
        )
        {
            PathParams["namespace"] = namespace_;

            if (imageURI is not null) QueryParams["imageURI"] = imageURI;
            if (version is not null) QueryParams["version"] = version;
            if (versionPatch is not null) QueryParams["versionPatch"] = versionPatch;






            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/dsmcontroller/admin/namespaces/{namespace}/images/patches";

        public override HttpMethod Method => HttpMethod.Delete;

        public override List<string> Consumes => new() { "application/json" };

        public override List<string> Produces => new() { "application/json" };

        public void ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return;
            }

            var payloadString = payload.ReadToString();

            throw new HttpResponseException(code, payloadString);
        }
    }

}