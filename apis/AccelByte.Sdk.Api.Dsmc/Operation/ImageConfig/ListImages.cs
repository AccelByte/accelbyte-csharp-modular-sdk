// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Dsmc.Model;

namespace AccelByte.Sdk.Api.Dsmc.Operation
{
    /// <summary>
    /// ListImages
    ///
    /// Required permission: ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [READ]
    /// 
    /// Required scope: social
    /// 
    /// This endpoint lists all of dedicated servers images.
    /// 
    /// Parameter Offset and Count is Required
    /// </summary>
    public class ListImages : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static ListImagesBuilder Builder { get => new ListImagesBuilder(); }

        public class ListImagesBuilder
            : OperationBuilder<ListImagesBuilder>
        {

            public string? Q { get; set; }

            public ListImagesSortBy? SortBy { get; set; }

            public ListImagesSortDirection? SortDirection { get; set; }





            internal ListImagesBuilder() { }

            internal ListImagesBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }


            public ListImagesBuilder SetQ(string _q)
            {
                Q = _q;
                return this;
            }

            public ListImagesBuilder SetSortBy(ListImagesSortBy _sortBy)
            {
                SortBy = _sortBy;
                return this;
            }

            public ListImagesBuilder SetSortDirection(ListImagesSortDirection _sortDirection)
            {
                SortDirection = _sortDirection;
                return this;
            }





            public ListImages Build(
                string namespace_,
                long count,
                long offset
            )
            {
                ListImages op = new ListImages(this,
                    namespace_,                    
                    count,                    
                    offset                    
                );

                op.SetBaseFields<ListImagesBuilder>(this);
                return op;
            }

            public ListImages.Response Execute(
                string namespace_,
                long count,
                long offset
            )
            {
                ListImages op = Build(
                    namespace_,
                    count,
                    offset
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
            public async Task<ListImages.Response> ExecuteAsync(
                string namespace_,
                long count,
                long offset
            )
            {
                ListImages op = Build(
                    namespace_,
                    count,
                    offset
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
        }

        private ListImages(ListImagesBuilder builder,
            string namespace_,
            long count,
            long offset
        )
        {
            PathParams["namespace"] = namespace_;
            
            if (builder.Q is not null) QueryParams["q"] = builder.Q;
            if (builder.SortBy is not null) QueryParams["sortBy"] = builder.SortBy.Value;
            if (builder.SortDirection is not null) QueryParams["sortDirection"] = builder.SortDirection.Value;
            
            QueryParams["count"] = Convert.ToString(count)!;
            
            QueryParams["offset"] = Convert.ToString(offset)!;
            

            
            
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        #region Response Part        
        public class Response : ApiResponse<Model.ModelsListImageResponse>
        {

            public ResponseError? Error400 { get; set; } = null;

            public ResponseError? Error401 { get; set; } = null;

            public ResponseError? Error500 { get; set; } = null;


            protected override string GetFullOperationId() => "Dsmc::ImageConfig::ListImages";
        }

        #endregion

        public ListImages(
            string namespace_,            
            string? q,            
            ListImagesSortBy? sortBy,            
            ListImagesSortDirection? sortDirection,            
            long count,            
            long offset            
        )
        {
            PathParams["namespace"] = namespace_;
            
            if (q is not null) QueryParams["q"] = q;
            if (sortBy is not null) QueryParams["sortBy"] = sortBy.Value;
            if (sortDirection is not null) QueryParams["sortDirection"] = sortDirection.Value;
            
            QueryParams["count"] = Convert.ToString(count)!;
            
            QueryParams["offset"] = Convert.ToString(offset)!;
            

            
            
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/dsmcontroller/admin/namespaces/{namespace}/images";

        public override HttpMethod Method => HttpMethod.Get;

        public override List<string> Consumes => new() { "application/json" };

        public override List<string> Produces => new() { "application/json" };
        
        public ListImages.Response ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            var response = new ListImages.Response()
            {
                StatusCode = code,
                ContentType = contentType
            };

            if (code == (HttpStatusCode)204)
            {
                response.IsSuccess = true;
            }
            else if ((code == (HttpStatusCode)201) || (code == (HttpStatusCode)202) || (code == (HttpStatusCode)200))
            {
                response.Data = JsonSerializer.Deserialize<Model.ModelsListImageResponse>(payload, ResponseJsonOptions);
                response.IsSuccess = true;
            }
            else if (code == (HttpStatusCode)400)
            {
                response.Error400 = JsonSerializer.Deserialize<ResponseError>(payload, ResponseJsonOptions);
                response.Error = response.Error400!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)401)
            {
                response.Error401 = JsonSerializer.Deserialize<ResponseError>(payload, ResponseJsonOptions);
                response.Error = response.Error401!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)500)
            {
                response.Error500 = JsonSerializer.Deserialize<ResponseError>(payload, ResponseJsonOptions);
                response.Error = response.Error500!.TranslateToApiError();
            }

            return response;
        }
    }

    public class ListImagesSortBy : StringEnum<ListImagesSortBy>
    {
        public static readonly ListImagesSortBy CreatedAt
            = new ListImagesSortBy("createdAt");

        public static readonly ListImagesSortBy UpdatedAt
            = new ListImagesSortBy("updatedAt");

        public static readonly ListImagesSortBy Version
            = new ListImagesSortBy("version");


        public static implicit operator ListImagesSortBy(string value)
        {
            return NewValue(value);
        }

        public ListImagesSortBy(string enumValue)
            : base(enumValue)
        {

        }
    }

    public class ListImagesSortDirection : StringEnum<ListImagesSortDirection>
    {
        public static readonly ListImagesSortDirection Asc
            = new ListImagesSortDirection("asc");

        public static readonly ListImagesSortDirection Desc
            = new ListImagesSortDirection("desc");


        public static implicit operator ListImagesSortDirection(string value)
        {
            return NewValue(value);
        }

        public ListImagesSortDirection(string enumValue)
            : base(enumValue)
        {

        }
    }

}