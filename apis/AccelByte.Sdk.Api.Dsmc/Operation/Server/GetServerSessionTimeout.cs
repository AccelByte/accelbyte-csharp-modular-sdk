// Copyright (c) 2022-2023 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Dsmc.Model;

namespace AccelByte.Sdk.Api.Dsmc.Operation
{
    /// <summary>
    /// GetServerSessionTimeout
    ///
    /// ```
    /// Required permission: NAMESPACE:{namespace}:DSM:CONFIG [READ]
    /// Required scope: social
    /// 
    /// This endpoint is intended to be called by dedicated server
    /// to get the session timeout that will be used for the DS.
    /// DS will use this session timeout to make sure it regularly make heartbeat
    /// call to the DSMC, before the session timeout.```
    /// </summary>
    public class GetServerSessionTimeout : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static GetServerSessionTimeoutBuilder Builder { get => new GetServerSessionTimeoutBuilder(); }

        public class GetServerSessionTimeoutBuilder
            : OperationBuilder<GetServerSessionTimeoutBuilder>
        {





            internal GetServerSessionTimeoutBuilder() { }

            internal GetServerSessionTimeoutBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }






            public GetServerSessionTimeout Build(
                string namespace_,
                string podName
            )
            {
                GetServerSessionTimeout op = new GetServerSessionTimeout(this,
                    namespace_,
                    podName
                );

                op.SetBaseFields<GetServerSessionTimeoutBuilder>(this);
                return op;
            }

            public Model.ModelsServerDeploymentConfigSessionTimeoutResponse? Execute(
                string namespace_,
                string podName
            )
            {
                GetServerSessionTimeout op = Build(
                    namespace_,
                    podName
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
        }

        private GetServerSessionTimeout(GetServerSessionTimeoutBuilder builder,
            string namespace_,
            string podName
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["podName"] = podName;







            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public GetServerSessionTimeout(
            string namespace_,
            string podName
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["podName"] = podName;







            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/dsmcontroller/namespaces/{namespace}/servers/{podName}/config/sessiontimeout";

        public override HttpMethod Method => HttpMethod.Get;

        public override List<string> Consumes => new() { "application/json" };

        public override List<string> Produces => new() { "application/json" };

        public Model.ModelsServerDeploymentConfigSessionTimeoutResponse? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                return JsonSerializer.Deserialize<Model.ModelsServerDeploymentConfigSessionTimeoutResponse>(payload, ResponseJsonOptions);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.ModelsServerDeploymentConfigSessionTimeoutResponse>(payload, ResponseJsonOptions);
            }

            var payloadString = payload.ReadToString();

            throw new HttpResponseException(code, payloadString);
        }
    }

}