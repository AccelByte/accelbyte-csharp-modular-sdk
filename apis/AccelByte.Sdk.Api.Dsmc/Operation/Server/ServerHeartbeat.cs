// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Dsmc.Model;

namespace AccelByte.Sdk.Api.Dsmc.Operation
{
    /// <summary>
    /// ServerHeartbeat
    ///
    /// ```
    /// Required permission: NAMESPACE:{namespace}:DSM:SERVER [UPDATE]
    /// Required scope: social
    /// 
    /// This endpoint is intended to be called by dedicated server
    /// which already has claimed to extend its lifetime.
    /// DS should call this periodically after it claimed.
    /// The timeframe between 2 heartbeat call should be smaller than
    /// the session timout in the deployment configuration.
    /// If the last heartbeat is longer than the session timout, the server.
    /// will be considered as expired and will be terminated by DSMC.```
    /// </summary>
    public class ServerHeartbeat : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static ServerHeartbeatBuilder Builder { get => new ServerHeartbeatBuilder(); }

        public class ServerHeartbeatBuilder
            : OperationBuilder<ServerHeartbeatBuilder>
        {





            internal ServerHeartbeatBuilder() { }

            internal ServerHeartbeatBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }






            public ServerHeartbeat Build(
                ModelsDSHeartbeatRequest body,
                string namespace_
            )
            {
                ServerHeartbeat op = new ServerHeartbeat(this,
                    body,
                    namespace_
                );

                op.SetBaseFields<ServerHeartbeatBuilder>(this);
                return op;
            }

            public ServerHeartbeat.Response Execute(
                ModelsDSHeartbeatRequest body,
                string namespace_
            )
            {
                ServerHeartbeat op = Build(
                    body,
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
            public async Task<ServerHeartbeat.Response> ExecuteAsync(
                ModelsDSHeartbeatRequest body,
                string namespace_
            )
            {
                ServerHeartbeat op = Build(
                    body,
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
        }

        private ServerHeartbeat(ServerHeartbeatBuilder builder,
            ModelsDSHeartbeatRequest body,
            string namespace_
        )
        {
            PathParams["namespace"] = namespace_;





            BodyParams = body;


            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        #region Response Part        
        public class Response : ApiResponse
        {

            public ResponseError? Error400 { get; set; } = null;

            public ResponseError? Error401 { get; set; } = null;

            public ResponseError? Error404 { get; set; } = null;

            public ResponseError? Error500 { get; set; } = null;


            protected override string GetFullOperationId() => "Dsmc::Server::ServerHeartbeat";
        }

        #endregion

        public ServerHeartbeat(
            string namespace_,
            Model.ModelsDSHeartbeatRequest body
        )
        {
            PathParams["namespace"] = namespace_;





            BodyParams = body;


            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/dsmcontroller/namespaces/{namespace}/servers/heartbeat";

        public override HttpMethod Method => HttpMethod.Put;

        public override List<string> Consumes => new() { "application/json" };

        public override List<string> Produces => new() { "application/json" };

        public ServerHeartbeat.Response ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            var response = new ServerHeartbeat.Response()
            {
                StatusCode = code,
                ContentType = contentType,
                IsSuccess = true
            };

            if (code == (HttpStatusCode)400)

            {
                response.Error400 = JsonSerializer.Deserialize<ResponseError>(payload, ResponseJsonOptions);
                response.Error = response.Error400!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)401)

            {
                response.Error401 = JsonSerializer.Deserialize<ResponseError>(payload, ResponseJsonOptions);
                response.Error = response.Error401!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)404)

            {
                response.Error404 = JsonSerializer.Deserialize<ResponseError>(payload, ResponseJsonOptions);
                response.Error = response.Error404!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)500)

            {
                response.Error500 = JsonSerializer.Deserialize<ResponseError>(payload, ResponseJsonOptions);
                response.Error = response.Error500!.TranslateToApiError();
            }

            return response;
        }
    }

}