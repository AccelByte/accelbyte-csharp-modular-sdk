// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Dsmc.Model;

namespace AccelByte.Sdk.Api.Dsmc.Operation
{
    /// <summary>
    /// ShutdownServer
    ///
    /// Required permission: NAMESPACE:{namespace}:DSM:SERVER [UPDATE]
    /// 
    /// Required scope: social
    /// 
    /// This endpoint is intended to be called by dedicated server to let DSM know that it is shutting down. Calling this will remove the server and session records from DB.Set 'kill_me' in request to 'true' if the DS cannot shut itself down.
    /// </summary>
    public class ShutdownServer : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static ShutdownServerBuilder Builder { get => new ShutdownServerBuilder(); }

        public class ShutdownServerBuilder
            : OperationBuilder<ShutdownServerBuilder>
        {





            internal ShutdownServerBuilder() { }

            internal ShutdownServerBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }






            public ShutdownServer Build(
                ModelsShutdownServerRequest body,
                string namespace_
            )
            {
                ShutdownServer op = new ShutdownServer(this,
                    body,                    
                    namespace_                    
                );

                op.SetBaseFields<ShutdownServerBuilder>(this);
                return op;
            }

            public ShutdownServer.Response Execute(
                ModelsShutdownServerRequest body,
                string namespace_
            )
            {
                ShutdownServer op = Build(
                    body,
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
            public async Task<ShutdownServer.Response> ExecuteAsync(
                ModelsShutdownServerRequest body,
                string namespace_
            )
            {
                ShutdownServer op = Build(
                    body,
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
        }

        private ShutdownServer(ShutdownServerBuilder builder,
            ModelsShutdownServerRequest body,
            string namespace_
        )
        {
            PathParams["namespace"] = namespace_;
            
            

            
            
            BodyParams = body;
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        #region Response Part        
        public class Response : ApiResponse
        {

            public ResponseError? Error400 { get; set; } = null;

            public ResponseError? Error401 { get; set; } = null;

            public ResponseError? Error404 { get; set; } = null;

            public ResponseError? Error500 { get; set; } = null;


            protected override string GetFullOperationId() => "Dsmc::Server::ShutdownServer";
        }

        #endregion

        public ShutdownServer(
            string namespace_,            
            Model.ModelsShutdownServerRequest body            
        )
        {
            PathParams["namespace"] = namespace_;
            
            

            
            
            BodyParams = body;
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/dsmcontroller/namespaces/{namespace}/servers/shutdown";

        public override HttpMethod Method => HttpMethod.Post;

        public override List<string> Consumes => new() { "application/json" };

        public override List<string> Produces => new() { "application/json" };
        
        public ShutdownServer.Response ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            var response = new ShutdownServer.Response()
            {
                StatusCode = code,
                ContentType = contentType,
                IsSuccess = true
            };

            if (code == (HttpStatusCode)400)
            
            {
                response.Error400 = JsonSerializer.Deserialize<ResponseError>(payload, ResponseJsonOptions);
                response.Error = response.Error400!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)401)
            
            {
                response.Error401 = JsonSerializer.Deserialize<ResponseError>(payload, ResponseJsonOptions);
                response.Error = response.Error401!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)404)
            
            {
                response.Error404 = JsonSerializer.Deserialize<ResponseError>(payload, ResponseJsonOptions);
                response.Error = response.Error404!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)500)
            
            {
                response.Error500 = JsonSerializer.Deserialize<ResponseError>(payload, ResponseJsonOptions);
                response.Error = response.Error500!.TranslateToApiError();
            }

            return response;
        }
    }

}