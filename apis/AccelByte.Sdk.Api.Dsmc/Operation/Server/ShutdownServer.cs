// Copyright (c) 2022-2023 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Dsmc.Model;

namespace AccelByte.Sdk.Api.Dsmc.Operation
{
    /// <summary>
    /// ShutdownServer
    ///
    /// Required permission: NAMESPACE:{namespace}:DSM:SERVER [UPDATE]
    /// 
    /// Required scope: social
    /// 
    /// This endpoint is intended to be called by dedicated server to let DSM know that it is shutting down. Calling this will remove the server and session records from DB.Set 'kill_me' in request to 'true' if the DS cannot shut itself down.
    /// </summary>
    public class ShutdownServer : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static ShutdownServerBuilder Builder { get => new ShutdownServerBuilder(); }

        public class ShutdownServerBuilder
            : OperationBuilder<ShutdownServerBuilder>
        {





            internal ShutdownServerBuilder() { }

            internal ShutdownServerBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }






            public ShutdownServer Build(
                ModelsShutdownServerRequest body,
                string namespace_
            )
            {
                ShutdownServer op = new ShutdownServer(this,
                    body,
                    namespace_
                );

                op.SetBaseFields<ShutdownServerBuilder>(this);
                return op;
            }

            public void Execute(
                ModelsShutdownServerRequest body,
                string namespace_
            )
            {
                ShutdownServer op = Build(
                    body,
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
        }

        private ShutdownServer(ShutdownServerBuilder builder,
            ModelsShutdownServerRequest body,
            string namespace_
        )
        {
            PathParams["namespace"] = namespace_;





            BodyParams = body;


            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public ShutdownServer(
            string namespace_,
            Model.ModelsShutdownServerRequest body
        )
        {
            PathParams["namespace"] = namespace_;





            BodyParams = body;


            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/dsmcontroller/namespaces/{namespace}/servers/shutdown";

        public override HttpMethod Method => HttpMethod.Post;

        public override List<string> Consumes => new() { "application/json" };

        public override List<string> Produces => new() { "application/json" };

        public void ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return;
            }

            var payloadString = payload.ReadToString();

            throw new HttpResponseException(code, payloadString);
        }
    }

}