// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Dsmc.Model;

namespace AccelByte.Sdk.Api.Dsmc.Operation
{
    /// <summary>
    /// RunZombieCleanerRequestHandler
    ///
    /// ```
    /// Required permission: ADMIN:NAMESPACE:{namespace}:DSM:SERVER [DELETE]
    /// Required scope: social
    /// 
    /// This endpoint run zombie cleaner once
    /// 
    /// use * as region name to target all regions
    /// ```
    /// </summary>
    public class RunZombieCleanerRequestHandler : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static RunZombieCleanerRequestHandlerBuilder Builder { get => new RunZombieCleanerRequestHandlerBuilder(); }

        public class RunZombieCleanerRequestHandlerBuilder
            : OperationBuilder<RunZombieCleanerRequestHandlerBuilder>
        {





            internal RunZombieCleanerRequestHandlerBuilder() { }

            internal RunZombieCleanerRequestHandlerBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }






            public RunZombieCleanerRequestHandler Build(
                ModelsDeleteZombieRequest body,
                string namespace_
            )
            {
                RunZombieCleanerRequestHandler op = new RunZombieCleanerRequestHandler(this,
                    body,                    
                    namespace_                    
                );

                op.SetBaseFields<RunZombieCleanerRequestHandlerBuilder>(this);
                return op;
            }

            public RunZombieCleanerRequestHandler.Response Execute(
                ModelsDeleteZombieRequest body,
                string namespace_
            )
            {
                RunZombieCleanerRequestHandler op = Build(
                    body,
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
            public async Task<RunZombieCleanerRequestHandler.Response> ExecuteAsync(
                ModelsDeleteZombieRequest body,
                string namespace_
            )
            {
                RunZombieCleanerRequestHandler op = Build(
                    body,
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
        }

        private RunZombieCleanerRequestHandler(RunZombieCleanerRequestHandlerBuilder builder,
            ModelsDeleteZombieRequest body,
            string namespace_
        )
        {
            PathParams["namespace"] = namespace_;
            
            

            
            
            BodyParams = body;
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        #region Response Part        
        public class Response : ApiResponse
        {

            public ResponseError? Error401 { get; set; } = null;


            protected override string GetFullOperationId() => "Dsmc::Admin::RunZombieCleanerRequestHandler";
        }

        #endregion

        public RunZombieCleanerRequestHandler(
            string namespace_,            
            Model.ModelsDeleteZombieRequest body            
        )
        {
            PathParams["namespace"] = namespace_;
            
            

            
            
            BodyParams = body;
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/dsmcontroller/admin/namespaces/{namespace}/workers/zombie";

        public override HttpMethod Method => HttpMethod.Post;

        public override List<string> Consumes => new() { "application/json" };

        public override List<string> Produces => new() { "application/json" };
        
        public RunZombieCleanerRequestHandler.Response ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            var response = new RunZombieCleanerRequestHandler.Response()
            {
                StatusCode = code,
                ContentType = contentType,
                IsSuccess = true
            };

            if (code == (HttpStatusCode)401)
            
            {
                response.Error401 = JsonSerializer.Deserialize<ResponseError>(payload, ResponseJsonOptions);
                response.Error = response.Error401!.TranslateToApiError();
            }

            return response;
        }
    }

}