// Copyright (c) 2022-2023 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Eventlog.Model;

namespace AccelByte.Sdk.Api.Eventlog.Operation
{
    /// <summary>
    /// SpecificAgentTypeDescriptionHandler
    /// </summary>
    [Obsolete(DiagnosticId ="ab_deprecated_operation")]
    public class SpecificAgentTypeDescriptionHandler : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static SpecificAgentTypeDescriptionHandlerBuilder Builder { get => new SpecificAgentTypeDescriptionHandlerBuilder(); }

        public class SpecificAgentTypeDescriptionHandlerBuilder
            : OperationBuilder<SpecificAgentTypeDescriptionHandlerBuilder>
        {

            public string? AgentTypes { get; set; }





            internal SpecificAgentTypeDescriptionHandlerBuilder() { }

            internal SpecificAgentTypeDescriptionHandlerBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }


            public SpecificAgentTypeDescriptionHandlerBuilder SetAgentTypes(string _agentTypes)
            {
                AgentTypes = _agentTypes;
                return this;
            }





            public SpecificAgentTypeDescriptionHandler Build(
            )
            {
                SpecificAgentTypeDescriptionHandler op = new SpecificAgentTypeDescriptionHandler(this
                );
                op.PreferredSecurityMethod = PreferredSecurityMethod;

                return op;
            }

            [Obsolete(DiagnosticId ="ab_deprecated_operation_wrapper")]
            public Model.ModelsMultipleAgentType? Execute(
            )
            {
                SpecificAgentTypeDescriptionHandler op = Build(
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
        }

        private SpecificAgentTypeDescriptionHandler(SpecificAgentTypeDescriptionHandlerBuilder builder
        )
        {
            
            if (builder.AgentTypes is not null) QueryParams["agentTypes"] = builder.AgentTypes;
            

            
            
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public SpecificAgentTypeDescriptionHandler(
            string? agentTypes            
        )
        {
            
            if (agentTypes is not null) QueryParams["agentTypes"] = agentTypes;
            

            
            
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/event/descriptions/agentType/listByAgentTypes";

        public override HttpMethod Method => HttpMethod.Get;

        public override List<string> Consumes => new() {  };

        public override List<string> Produces => new() { "application/json" };        
        
        public Model.ModelsMultipleAgentType? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {            
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                return JsonSerializer.Deserialize<Model.ModelsMultipleAgentType>(payload);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.ModelsMultipleAgentType>(payload);
            }
            
            var payloadString = payload.ReadToString();
            
            throw new HttpResponseException(code, payloadString);
        }
    }

}