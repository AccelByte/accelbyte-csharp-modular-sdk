// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Leaderboard.Model;

namespace AccelByte.Sdk.Api.Leaderboard.Operation
{
    /// <summary>
    /// GetArchivedLeaderboardRankingDataV1Handler
    ///
    /// Get signed url in an all time leaderboard that archived. NOTE: This will be a bulk endpoint to get sign url
    /// </summary>
    public class GetArchivedLeaderboardRankingDataV1Handler : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static GetArchivedLeaderboardRankingDataV1HandlerBuilder Builder { get => new GetArchivedLeaderboardRankingDataV1HandlerBuilder(); }

        public class GetArchivedLeaderboardRankingDataV1HandlerBuilder
            : OperationBuilder<GetArchivedLeaderboardRankingDataV1HandlerBuilder>
        {

            public string? Slug { get; set; }





            internal GetArchivedLeaderboardRankingDataV1HandlerBuilder() { }

            internal GetArchivedLeaderboardRankingDataV1HandlerBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }


            public GetArchivedLeaderboardRankingDataV1HandlerBuilder SetSlug(string _slug)
            {
                Slug = _slug;
                return this;
            }





            public GetArchivedLeaderboardRankingDataV1Handler Build(
                string leaderboardCode,
                string namespace_,
                string leaderboardCodes
            )
            {
                GetArchivedLeaderboardRankingDataV1Handler op = new GetArchivedLeaderboardRankingDataV1Handler(this,
                    leaderboardCode,                    
                    namespace_,                    
                    leaderboardCodes                    
                );

                op.SetBaseFields<GetArchivedLeaderboardRankingDataV1HandlerBuilder>(this);
                return op;
            }

            public GetArchivedLeaderboardRankingDataV1Handler.Response Execute(
                string leaderboardCode,
                string namespace_,
                string leaderboardCodes
            )
            {
                GetArchivedLeaderboardRankingDataV1Handler op = Build(
                    leaderboardCode,
                    namespace_,
                    leaderboardCodes
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
            public async Task<GetArchivedLeaderboardRankingDataV1Handler.Response> ExecuteAsync(
                string leaderboardCode,
                string namespace_,
                string leaderboardCodes
            )
            {
                GetArchivedLeaderboardRankingDataV1Handler op = Build(
                    leaderboardCode,
                    namespace_,
                    leaderboardCodes
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
        }

        private GetArchivedLeaderboardRankingDataV1Handler(GetArchivedLeaderboardRankingDataV1HandlerBuilder builder,
            string leaderboardCode,
            string namespace_,
            string leaderboardCodes
        )
        {
            PathParams["leaderboardCode"] = leaderboardCode;
            PathParams["namespace"] = namespace_;
            
            if (builder.Slug is not null) QueryParams["slug"] = builder.Slug;
            if (leaderboardCodes is not null) QueryParams["leaderboardCodes"] = leaderboardCodes;
            

            
            
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        #region Response Part        
        public class Response : ApiResponse<List<Model.ModelsArchiveLeaderboardSignedURLResponse>>
        {

            public ResponseErrorResponse? Error400 { get; set; } = null;

            public ResponseErrorResponse? Error401 { get; set; } = null;

            public ResponseErrorResponse? Error403 { get; set; } = null;

            public ResponseErrorResponse? Error404 { get; set; } = null;

            public ResponseErrorResponse? Error500 { get; set; } = null;


            protected override string GetFullOperationId() => "Leaderboard::LeaderboardData::GetArchivedLeaderboardRankingDataV1Handler";
        }

        #endregion

        public GetArchivedLeaderboardRankingDataV1Handler(
            string leaderboardCode,            
            string namespace_,            
            string? slug,            
            string leaderboardCodes            
        )
        {
            PathParams["leaderboardCode"] = leaderboardCode;
            PathParams["namespace"] = namespace_;
            
            if (slug is not null) QueryParams["slug"] = slug;
            if (leaderboardCodes is not null) QueryParams["leaderboardCodes"] = leaderboardCodes;
            

            
            
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/leaderboard/v1/public/namespaces/{namespace}/leaderboards/{leaderboardCode}/archived";

        public override HttpMethod Method => HttpMethod.Get;

        public override List<string> Consumes => new() {  };

        public override List<string> Produces => new() { "application/json" };
        
        public GetArchivedLeaderboardRankingDataV1Handler.Response ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            var response = new GetArchivedLeaderboardRankingDataV1Handler.Response()
            {
                StatusCode = code,
                ContentType = contentType
            };

            if (code == (HttpStatusCode)204)
            {
                response.IsSuccess = true;
            }
            else if ((code == (HttpStatusCode)201) || (code == (HttpStatusCode)202) || (code == (HttpStatusCode)200))
            {
                response.Data = JsonSerializer.Deserialize<List<Model.ModelsArchiveLeaderboardSignedURLResponse>>(payload, ResponseJsonOptions);
                response.IsSuccess = true;
            }
            else if (code == (HttpStatusCode)400)
            {
                response.Error400 = JsonSerializer.Deserialize<ResponseErrorResponse>(payload, ResponseJsonOptions);
                response.Error = response.Error400!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)401)
            {
                response.Error401 = JsonSerializer.Deserialize<ResponseErrorResponse>(payload, ResponseJsonOptions);
                response.Error = response.Error401!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)403)
            {
                response.Error403 = JsonSerializer.Deserialize<ResponseErrorResponse>(payload, ResponseJsonOptions);
                response.Error = response.Error403!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)404)
            {
                response.Error404 = JsonSerializer.Deserialize<ResponseErrorResponse>(payload, ResponseJsonOptions);
                response.Error = response.Error404!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)500)
            {
                response.Error500 = JsonSerializer.Deserialize<ResponseErrorResponse>(payload, ResponseJsonOptions);
                response.Error = response.Error500!.TranslateToApiError();
            }

            return response;
        }
    }

}