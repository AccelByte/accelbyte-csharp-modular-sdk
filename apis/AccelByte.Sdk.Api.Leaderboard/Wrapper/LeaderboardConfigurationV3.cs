// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;

using AccelByte.Sdk.Api.Leaderboard.Model;
using AccelByte.Sdk.Api.Leaderboard.Operation;

namespace AccelByte.Sdk.Api.Leaderboard.Wrapper
{
    public class LeaderboardConfigurationV3
    {
        private readonly IAccelByteSdk _sdk;

        private string _CustomBasePath = String.Empty;

        public LeaderboardConfigurationV3(IAccelByteSdk sdk)
        {
            _sdk = sdk;
        }

        public LeaderboardConfigurationV3(IAccelByteSdk sdk, string customBasePath)
        {
            _sdk = sdk;
            _CustomBasePath = customBasePath;
        }

        #region Operation Builders
        public GetLeaderboardConfigurationsAdminV3.GetLeaderboardConfigurationsAdminV3Builder GetLeaderboardConfigurationsAdminV3Op
        {
            get
            {
                var opBuilder = new Operation.GetLeaderboardConfigurationsAdminV3.GetLeaderboardConfigurationsAdminV3Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public CreateLeaderboardConfigurationAdminV3.CreateLeaderboardConfigurationAdminV3Builder CreateLeaderboardConfigurationAdminV3Op
        {
            get
            {
                var opBuilder = new Operation.CreateLeaderboardConfigurationAdminV3.CreateLeaderboardConfigurationAdminV3Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public DeleteBulkLeaderboardConfigurationAdminV3.DeleteBulkLeaderboardConfigurationAdminV3Builder DeleteBulkLeaderboardConfigurationAdminV3Op
        {
            get
            {
                var opBuilder = new Operation.DeleteBulkLeaderboardConfigurationAdminV3.DeleteBulkLeaderboardConfigurationAdminV3Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public GetLeaderboardConfigurationAdminV3.GetLeaderboardConfigurationAdminV3Builder GetLeaderboardConfigurationAdminV3Op
        {
            get
            {
                var opBuilder = new Operation.GetLeaderboardConfigurationAdminV3.GetLeaderboardConfigurationAdminV3Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public UpdateLeaderboardConfigurationAdminV3.UpdateLeaderboardConfigurationAdminV3Builder UpdateLeaderboardConfigurationAdminV3Op
        {
            get
            {
                var opBuilder = new Operation.UpdateLeaderboardConfigurationAdminV3.UpdateLeaderboardConfigurationAdminV3Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public DeleteLeaderboardConfigurationAdminV3.DeleteLeaderboardConfigurationAdminV3Builder DeleteLeaderboardConfigurationAdminV3Op
        {
            get
            {
                var opBuilder = new Operation.DeleteLeaderboardConfigurationAdminV3.DeleteLeaderboardConfigurationAdminV3Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public HardDeleteLeaderboardAdminV3.HardDeleteLeaderboardAdminV3Builder HardDeleteLeaderboardAdminV3Op
        {
            get
            {
                var opBuilder = new Operation.HardDeleteLeaderboardAdminV3.HardDeleteLeaderboardAdminV3Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public GetLeaderboardConfigurationsPublicV3.GetLeaderboardConfigurationsPublicV3Builder GetLeaderboardConfigurationsPublicV3Op
        {
            get
            {
                var opBuilder = new Operation.GetLeaderboardConfigurationsPublicV3.GetLeaderboardConfigurationsPublicV3Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public GetLeaderboardConfigurationPublicV3.GetLeaderboardConfigurationPublicV3Builder GetLeaderboardConfigurationPublicV3Op
        {
            get
            {
                var opBuilder = new Operation.GetLeaderboardConfigurationPublicV3.GetLeaderboardConfigurationPublicV3Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        #endregion

        public GetLeaderboardConfigurationsAdminV3.Response GetLeaderboardConfigurationsAdminV3(GetLeaderboardConfigurationsAdminV3 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<GetLeaderboardConfigurationsAdminV3.Response> GetLeaderboardConfigurationsAdminV3Async(GetLeaderboardConfigurationsAdminV3 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public CreateLeaderboardConfigurationAdminV3.Response CreateLeaderboardConfigurationAdminV3(CreateLeaderboardConfigurationAdminV3 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<CreateLeaderboardConfigurationAdminV3.Response> CreateLeaderboardConfigurationAdminV3Async(CreateLeaderboardConfigurationAdminV3 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public DeleteBulkLeaderboardConfigurationAdminV3.Response DeleteBulkLeaderboardConfigurationAdminV3(DeleteBulkLeaderboardConfigurationAdminV3 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<DeleteBulkLeaderboardConfigurationAdminV3.Response> DeleteBulkLeaderboardConfigurationAdminV3Async(DeleteBulkLeaderboardConfigurationAdminV3 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public GetLeaderboardConfigurationAdminV3.Response GetLeaderboardConfigurationAdminV3(GetLeaderboardConfigurationAdminV3 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<GetLeaderboardConfigurationAdminV3.Response> GetLeaderboardConfigurationAdminV3Async(GetLeaderboardConfigurationAdminV3 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public UpdateLeaderboardConfigurationAdminV3.Response UpdateLeaderboardConfigurationAdminV3(UpdateLeaderboardConfigurationAdminV3 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<UpdateLeaderboardConfigurationAdminV3.Response> UpdateLeaderboardConfigurationAdminV3Async(UpdateLeaderboardConfigurationAdminV3 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public DeleteLeaderboardConfigurationAdminV3.Response DeleteLeaderboardConfigurationAdminV3(DeleteLeaderboardConfigurationAdminV3 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<DeleteLeaderboardConfigurationAdminV3.Response> DeleteLeaderboardConfigurationAdminV3Async(DeleteLeaderboardConfigurationAdminV3 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public HardDeleteLeaderboardAdminV3.Response HardDeleteLeaderboardAdminV3(HardDeleteLeaderboardAdminV3 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<HardDeleteLeaderboardAdminV3.Response> HardDeleteLeaderboardAdminV3Async(HardDeleteLeaderboardAdminV3 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public GetLeaderboardConfigurationsPublicV3.Response GetLeaderboardConfigurationsPublicV3(GetLeaderboardConfigurationsPublicV3 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<GetLeaderboardConfigurationsPublicV3.Response> GetLeaderboardConfigurationsPublicV3Async(GetLeaderboardConfigurationsPublicV3 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public GetLeaderboardConfigurationPublicV3.Response GetLeaderboardConfigurationPublicV3(GetLeaderboardConfigurationPublicV3 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<GetLeaderboardConfigurationPublicV3.Response> GetLeaderboardConfigurationPublicV3Async(GetLeaderboardConfigurationPublicV3 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
    }
}