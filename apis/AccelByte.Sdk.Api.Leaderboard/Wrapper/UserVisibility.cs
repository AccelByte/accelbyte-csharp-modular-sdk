// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;

using AccelByte.Sdk.Api.Leaderboard.Model;
using AccelByte.Sdk.Api.Leaderboard.Operation;

namespace AccelByte.Sdk.Api.Leaderboard.Wrapper
{
    public class UserVisibility
    {
        private readonly IAccelByteSdk _sdk;

        private string _CustomBasePath = String.Empty;

        public UserVisibility(IAccelByteSdk sdk)
        {
            _sdk = sdk;
        }

        public UserVisibility(IAccelByteSdk sdk, string customBasePath)
        {
            _sdk = sdk;
            _CustomBasePath = customBasePath;
        }

        #region Operation Builders
        public GetHiddenUsersV2.GetHiddenUsersV2Builder GetHiddenUsersV2Op
        {
            get
            {
                var opBuilder = new Operation.GetHiddenUsersV2.GetHiddenUsersV2Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public GetUserVisibilityStatusV2.GetUserVisibilityStatusV2Builder GetUserVisibilityStatusV2Op
        {
            get
            {
                var opBuilder = new Operation.GetUserVisibilityStatusV2.GetUserVisibilityStatusV2Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public SetUserLeaderboardVisibilityStatusV2.SetUserLeaderboardVisibilityStatusV2Builder SetUserLeaderboardVisibilityStatusV2Op
        {
            get
            {
                var opBuilder = new Operation.SetUserLeaderboardVisibilityStatusV2.SetUserLeaderboardVisibilityStatusV2Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public SetUserVisibilityStatusV2.SetUserVisibilityStatusV2Builder SetUserVisibilityStatusV2Op
        {
            get
            {
                var opBuilder = new Operation.SetUserVisibilityStatusV2.SetUserVisibilityStatusV2Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        #endregion

        public GetHiddenUsersV2.Response GetHiddenUsersV2(GetHiddenUsersV2 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<GetHiddenUsersV2.Response> GetHiddenUsersV2Async(GetHiddenUsersV2 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public GetUserVisibilityStatusV2.Response GetUserVisibilityStatusV2(GetUserVisibilityStatusV2 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<GetUserVisibilityStatusV2.Response> GetUserVisibilityStatusV2Async(GetUserVisibilityStatusV2 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public SetUserLeaderboardVisibilityStatusV2.Response SetUserLeaderboardVisibilityStatusV2(SetUserLeaderboardVisibilityStatusV2 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<SetUserLeaderboardVisibilityStatusV2.Response> SetUserLeaderboardVisibilityStatusV2Async(SetUserLeaderboardVisibilityStatusV2 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public SetUserVisibilityStatusV2.Response SetUserVisibilityStatusV2(SetUserVisibilityStatusV2 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<SetUserVisibilityStatusV2.Response> SetUserVisibilityStatusV2Async(SetUserVisibilityStatusV2 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
    }
}