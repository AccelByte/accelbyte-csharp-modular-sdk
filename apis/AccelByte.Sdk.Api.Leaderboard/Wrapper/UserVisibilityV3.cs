// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;

using AccelByte.Sdk.Api.Leaderboard.Model;
using AccelByte.Sdk.Api.Leaderboard.Operation;

namespace AccelByte.Sdk.Api.Leaderboard.Wrapper
{
    public class UserVisibilityV3
    {
        private readonly IAccelByteSdk _sdk;

        private string _CustomBasePath = String.Empty;

        public UserVisibilityV3(IAccelByteSdk sdk)
        {
            _sdk = sdk;
        }

        public UserVisibilityV3(IAccelByteSdk sdk, string customBasePath)
        {
            _sdk = sdk;
            _CustomBasePath = customBasePath;
        }

        #region Operation Builders
        public GetHiddenUsersV3.GetHiddenUsersV3Builder GetHiddenUsersV3Op
        {
            get
            {
                var opBuilder = new Operation.GetHiddenUsersV3.GetHiddenUsersV3Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public GetUserVisibilityStatusV3.GetUserVisibilityStatusV3Builder GetUserVisibilityStatusV3Op
        {
            get
            {
                var opBuilder = new Operation.GetUserVisibilityStatusV3.GetUserVisibilityStatusV3Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public SetUserLeaderboardVisibilityV3.SetUserLeaderboardVisibilityV3Builder SetUserLeaderboardVisibilityV3Op
        {
            get
            {
                var opBuilder = new Operation.SetUserLeaderboardVisibilityV3.SetUserLeaderboardVisibilityV3Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public SetUserVisibilityV3.SetUserVisibilityV3Builder SetUserVisibilityV3Op
        {
            get
            {
                var opBuilder = new Operation.SetUserVisibilityV3.SetUserVisibilityV3Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        #endregion

        public GetHiddenUsersV3.Response GetHiddenUsersV3(GetHiddenUsersV3 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<GetHiddenUsersV3.Response> GetHiddenUsersV3Async(GetHiddenUsersV3 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public GetUserVisibilityStatusV3.Response GetUserVisibilityStatusV3(GetUserVisibilityStatusV3 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<GetUserVisibilityStatusV3.Response> GetUserVisibilityStatusV3Async(GetUserVisibilityStatusV3 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public SetUserLeaderboardVisibilityV3.Response SetUserLeaderboardVisibilityV3(SetUserLeaderboardVisibilityV3 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<SetUserLeaderboardVisibilityV3.Response> SetUserLeaderboardVisibilityV3Async(SetUserLeaderboardVisibilityV3 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public SetUserVisibilityV3.Response SetUserVisibilityV3(SetUserVisibilityV3 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<SetUserVisibilityV3.Response> SetUserVisibilityV3Async(SetUserVisibilityV3 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
    }
}