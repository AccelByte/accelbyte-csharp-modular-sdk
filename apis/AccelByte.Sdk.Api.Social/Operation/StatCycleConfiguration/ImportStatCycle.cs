// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Social.Model;

namespace AccelByte.Sdk.Api.Social.Operation
{
    /// <summary>
    /// importStatCycle
    ///
    /// Import stat cycle configurations for a given namespace from file. At current, only JSON file is supported.
    /// 
    /// Other detail info:
    ///         *  *Required permission*: resource="ADMIN:NAMESPACE:{namespace}:STAT", action=1 (CREATE)
    /// </summary>
    public class ImportStatCycle : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static ImportStatCycleBuilder Builder { get => new ImportStatCycleBuilder(); }

        public class ImportStatCycleBuilder
            : OperationBuilder<ImportStatCycleBuilder>
        {

            public bool? ReplaceExisting { get; set; }



            public Stream? File { get; set; }



            internal ImportStatCycleBuilder() { }

            internal ImportStatCycleBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }


            public ImportStatCycleBuilder SetReplaceExisting(bool _replaceExisting)
            {
                ReplaceExisting = _replaceExisting;
                return this;
            }



            public ImportStatCycleBuilder SetFile(Stream _file)
            {
                File = _file;
                return this;
            }



            public ImportStatCycle Build(
                string namespace_
            )
            {
                ImportStatCycle op = new ImportStatCycle(this,
                    namespace_
                );

                op.SetBaseFields<ImportStatCycleBuilder>(this);
                return op;
            }

            public Model.StatImportInfo? Execute(
                string namespace_
            )
            {
                ImportStatCycle op = Build(
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
            public async Task<Model.StatImportInfo?> ExecuteAsync(
                string namespace_
            )
            {
                ImportStatCycle op = Build(
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
        }

        private ImportStatCycle(ImportStatCycleBuilder builder,
            string namespace_
        )
        {
            PathParams["namespace"] = namespace_;

            if (builder.ReplaceExisting != null) QueryParams["replaceExisting"] = Convert.ToString(builder.ReplaceExisting)!;

            if (builder.File is not null) FormParams["file"] = builder.File;





            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public ImportStatCycle(
            string namespace_,
            bool? replaceExisting,
            Stream? file
        )
        {
            PathParams["namespace"] = namespace_;

            if (replaceExisting != null) QueryParams["replaceExisting"] = Convert.ToString(replaceExisting)!;

            if (file is not null) FormParams["file"] = file;





            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/social/v1/admin/namespaces/{namespace}/statCycles/import";

        public override HttpMethod Method => HttpMethod.Post;

        public override List<string> Consumes => new() { "multipart/form-data" };

        public override List<string> Produces => new() { "application/json" };

        public Model.StatImportInfo? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                return JsonSerializer.Deserialize<Model.StatImportInfo>(payload, ResponseJsonOptions);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.StatImportInfo>(payload, ResponseJsonOptions);
            }

            var payloadString = payload.ReadToString();

            throw new HttpResponseException(code, payloadString);
        }
    }

}