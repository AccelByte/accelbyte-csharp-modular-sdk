// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Social.Model;

namespace AccelByte.Sdk.Api.Social.Operation
{
    /// <summary>
    /// publicCreateUserNamespaceSlot
    ///
    /// 
    /// 
    /// ## The endpoint is going to be deprecated
    /// 
    /// 
    /// Creates a slot.
    /// Other detail info:
    ///         *  Returns : created slot info
    /// </summary>
    [Obsolete(DiagnosticId ="ab_deprecated_operation")]
    public class PublicCreateUserNamespaceSlot : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static PublicCreateUserNamespaceSlotBuilder Builder { get => new PublicCreateUserNamespaceSlotBuilder(); }

        public class PublicCreateUserNamespaceSlotBuilder
            : OperationBuilder<PublicCreateUserNamespaceSlotBuilder>
        {

            public string? Label { get; set; }

            public List<string>? Tags { get; set; }



            public string? Checksum { get; set; }

            public string? CustomAttribute { get; set; }

            public Stream? File { get; set; }



            internal PublicCreateUserNamespaceSlotBuilder() { }

            internal PublicCreateUserNamespaceSlotBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }


            public PublicCreateUserNamespaceSlotBuilder SetLabel(string _label)
            {
                Label = _label;
                return this;
            }

            public PublicCreateUserNamespaceSlotBuilder SetTags(List<string> _tags)
            {
                Tags = _tags;
                return this;
            }



            public PublicCreateUserNamespaceSlotBuilder SetChecksum(string _checksum)
            {
                Checksum = _checksum;
                return this;
            }

            public PublicCreateUserNamespaceSlotBuilder SetCustomAttribute(string _customAttribute)
            {
                CustomAttribute = _customAttribute;
                return this;
            }

            public PublicCreateUserNamespaceSlotBuilder SetFile(Stream _file)
            {
                File = _file;
                return this;
            }



            public PublicCreateUserNamespaceSlot Build(
                string namespace_,
                string userId
            )
            {
                PublicCreateUserNamespaceSlot op = new PublicCreateUserNamespaceSlot(this,
                    namespace_,                    
                    userId                    
                );

                op.SetBaseFields<PublicCreateUserNamespaceSlotBuilder>(this);
                return op;
            }

            [Obsolete(DiagnosticId ="ab_deprecated_operation_wrapper")]
            public PublicCreateUserNamespaceSlot.Response Execute(
                string namespace_,
                string userId
            )
            {
                PublicCreateUserNamespaceSlot op = Build(
                    namespace_,
                    userId
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
            public async Task<PublicCreateUserNamespaceSlot.Response> ExecuteAsync(
                string namespace_,
                string userId
            )
            {
                PublicCreateUserNamespaceSlot op = Build(
                    namespace_,
                    userId
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
        }

        private PublicCreateUserNamespaceSlot(PublicCreateUserNamespaceSlotBuilder builder,
            string namespace_,
            string userId
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["userId"] = userId;
            
            if (builder.Label is not null) QueryParams["label"] = builder.Label;
            if (builder.Tags is not null) QueryParams["tags"] = builder.Tags;
            
            if (builder.Checksum is not null) FormParams["checksum"] = builder.Checksum;
            if (builder.CustomAttribute is not null) FormParams["customAttribute"] = builder.CustomAttribute;
            if (builder.File is not null) FormParams["file"] = builder.File;

            
            CollectionFormatMap["tags"] = "multi";
            
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        #region Response Part        
        public class Response : ApiResponse
        {

            public ErrorEntity? Error400 { get; set; } = null;

            public ErrorEntity? Error409 { get; set; } = null;


            protected override string GetFullOperationId() => "Social::Slot::PublicCreateUserNamespaceSlot";
        }

        #endregion

        public PublicCreateUserNamespaceSlot(
            string namespace_,            
            string userId,            
            string? label,            
            List<string>? tags,            
            string? checksum,            
            string? customAttribute,            
            Stream? file            
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["userId"] = userId;
            
            if (label is not null) QueryParams["label"] = label;
            if (tags is not null) QueryParams["tags"] = tags;
            
            if (checksum is not null) FormParams["checksum"] = checksum;
            if (customAttribute is not null) FormParams["customAttribute"] = customAttribute;
            if (file is not null) FormParams["file"] = file;

            
            CollectionFormatMap["tags"] = "multi";
            
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/social/public/namespaces/{namespace}/users/{userId}/slots";

        public override HttpMethod Method => HttpMethod.Post;

        public override List<string> Consumes => new() { "multipart/form-data" };

        public override List<string> Produces => new() { "application/json" };
        
        public PublicCreateUserNamespaceSlot.Response ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            var response = new PublicCreateUserNamespaceSlot.Response()
            {
                StatusCode = code,
                ContentType = contentType
            };

            int statusCode = (int)code;
            if (statusCode >= 200 && statusCode < 300)
            {
                response.IsSuccess = true;
            }
            else if (code == (HttpStatusCode)400)
            {
                response.Error400 = JsonSerializer.Deserialize<ErrorEntity>(payload, ResponseJsonOptions);
                response.Error = response.Error400!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)409)
            {
                response.Error409 = JsonSerializer.Deserialize<ErrorEntity>(payload, ResponseJsonOptions);
                response.Error = response.Error409!.TranslateToApiError();
            }

            return response;
        }
    }

}