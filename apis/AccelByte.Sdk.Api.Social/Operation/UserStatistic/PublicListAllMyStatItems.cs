// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Social.Model;

namespace AccelByte.Sdk.Api.Social.Operation
{
    /// <summary>
    /// publicListAllMyStatItems
    ///
    /// Public list all statItems of user.
    /// NOTE:
    ///           * If stat code does not exist, will ignore this stat code.
    ///           * If stat item does not exist, will return default value
    /// Other detail info:
    ///           *  Returns : stat items
    /// </summary>
    public class PublicListAllMyStatItems : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static PublicListAllMyStatItemsBuilder Builder { get => new PublicListAllMyStatItemsBuilder(); }

        public class PublicListAllMyStatItemsBuilder
            : OperationBuilder<PublicListAllMyStatItemsBuilder>
        {

            public string? AdditionalKey { get; set; }

            public List<string>? StatCodes { get; set; }

            public List<string>? Tags { get; set; }





            internal PublicListAllMyStatItemsBuilder() { }

            internal PublicListAllMyStatItemsBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }


            public PublicListAllMyStatItemsBuilder SetAdditionalKey(string _additionalKey)
            {
                AdditionalKey = _additionalKey;
                return this;
            }

            public PublicListAllMyStatItemsBuilder SetStatCodes(List<string> _statCodes)
            {
                StatCodes = _statCodes;
                return this;
            }

            public PublicListAllMyStatItemsBuilder SetTags(List<string> _tags)
            {
                Tags = _tags;
                return this;
            }





            public PublicListAllMyStatItems Build(
                string namespace_
            )
            {
                PublicListAllMyStatItems op = new PublicListAllMyStatItems(this,
                    namespace_                    
                );

                op.SetBaseFields<PublicListAllMyStatItemsBuilder>(this);
                return op;
            }

            public PublicListAllMyStatItems.Response Execute(
                string namespace_
            )
            {
                PublicListAllMyStatItems op = Build(
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
            public async Task<PublicListAllMyStatItems.Response> ExecuteAsync(
                string namespace_
            )
            {
                PublicListAllMyStatItems op = Build(
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
        }

        private PublicListAllMyStatItems(PublicListAllMyStatItemsBuilder builder,
            string namespace_
        )
        {
            PathParams["namespace"] = namespace_;
            
            if (builder.AdditionalKey is not null) QueryParams["additionalKey"] = builder.AdditionalKey;
            if (builder.StatCodes is not null) QueryParams["statCodes"] = builder.StatCodes;
            if (builder.Tags is not null) QueryParams["tags"] = builder.Tags;
            

            
            CollectionFormatMap["statCodes"] = "multi";
            CollectionFormatMap["tags"] = "multi";
            
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        #region Response Part        
        public class Response : ApiResponse<List<Model.ADTOObjectForUserStatItemValue>>
        {

            public ErrorEntity? Error400 { get; set; } = null;

            public ErrorEntity? Error403 { get; set; } = null;

            public ErrorEntity? Error404 { get; set; } = null;

            public ValidationErrorEntity? Error422 { get; set; } = null;


            protected override string GetFullOperationId() => "Social::UserStatistic::PublicListAllMyStatItems";
        }

        #endregion

        public PublicListAllMyStatItems(
            string namespace_,            
            string? additionalKey,            
            List<string>? statCodes,            
            List<string>? tags            
        )
        {
            PathParams["namespace"] = namespace_;
            
            if (additionalKey is not null) QueryParams["additionalKey"] = additionalKey;
            if (statCodes is not null) QueryParams["statCodes"] = statCodes;
            if (tags is not null) QueryParams["tags"] = tags;
            

            
            CollectionFormatMap["statCodes"] = "multi";
            CollectionFormatMap["tags"] = "multi";
            
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/social/v1/public/namespaces/{namespace}/users/me/statitems/value/bulk";

        public override HttpMethod Method => HttpMethod.Get;

        public override List<string> Consumes => new() {  };

        public override List<string> Produces => new() { "application/json" };
        
        public PublicListAllMyStatItems.Response ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            var response = new PublicListAllMyStatItems.Response()
            {
                StatusCode = code,
                ContentType = contentType
            };

            if (code == (HttpStatusCode)204)
            {
                response.IsSuccess = true;
            }
            else if ((code == (HttpStatusCode)201) || (code == (HttpStatusCode)202) || (code == (HttpStatusCode)200))
            {
                response.Data = JsonSerializer.Deserialize<List<Model.ADTOObjectForUserStatItemValue>>(payload, ResponseJsonOptions);
                response.IsSuccess = true;
            }
            else if (code == (HttpStatusCode)400)
            {
                response.Error400 = JsonSerializer.Deserialize<ErrorEntity>(payload, ResponseJsonOptions);
                response.Error = response.Error400!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)403)
            {
                response.Error403 = JsonSerializer.Deserialize<ErrorEntity>(payload, ResponseJsonOptions);
                response.Error = response.Error403!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)404)
            {
                response.Error404 = JsonSerializer.Deserialize<ErrorEntity>(payload, ResponseJsonOptions);
                response.Error = response.Error404!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)422)
            {
                response.Error422 = JsonSerializer.Deserialize<ValidationErrorEntity>(payload, ResponseJsonOptions);
                response.Error = response.Error422!.TranslateToApiError();
            }

            return response;
        }
    }

}