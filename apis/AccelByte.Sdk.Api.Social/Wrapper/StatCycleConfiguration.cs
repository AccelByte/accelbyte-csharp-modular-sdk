// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;

using AccelByte.Sdk.Api.Social.Model;
using AccelByte.Sdk.Api.Social.Operation;

namespace AccelByte.Sdk.Api.Social.Wrapper
{
    public class StatCycleConfiguration
    {
        private readonly IAccelByteSdk _sdk;

        private string _CustomBasePath = String.Empty;

        public StatCycleConfiguration(IAccelByteSdk sdk)
        {
            _sdk = sdk;
        }

        public StatCycleConfiguration(IAccelByteSdk sdk, string customBasePath)
        {
            _sdk = sdk;
            _CustomBasePath = customBasePath;
        }

        #region Operation Builders
        public GetStatCycles.GetStatCyclesBuilder GetStatCyclesOp
        {
            get
            {
                var opBuilder = new Operation.GetStatCycles.GetStatCyclesBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public CreateStatCycle.CreateStatCycleBuilder CreateStatCycleOp
        {
            get
            {
                var opBuilder = new Operation.CreateStatCycle.CreateStatCycleBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public BulkGetStatCycle.BulkGetStatCycleBuilder BulkGetStatCycleOp
        {
            get
            {
                var opBuilder = new Operation.BulkGetStatCycle.BulkGetStatCycleBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public ExportStatCycle.ExportStatCycleBuilder ExportStatCycleOp
        {
            get
            {
                var opBuilder = new Operation.ExportStatCycle.ExportStatCycleBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public ImportStatCycle.ImportStatCycleBuilder ImportStatCycleOp
        {
            get
            {
                var opBuilder = new Operation.ImportStatCycle.ImportStatCycleBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public GetStatCycle.GetStatCycleBuilder GetStatCycleOp
        {
            get
            {
                var opBuilder = new Operation.GetStatCycle.GetStatCycleBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public UpdateStatCycle.UpdateStatCycleBuilder UpdateStatCycleOp
        {
            get
            {
                var opBuilder = new Operation.UpdateStatCycle.UpdateStatCycleBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public DeleteStatCycle.DeleteStatCycleBuilder DeleteStatCycleOp
        {
            get
            {
                var opBuilder = new Operation.DeleteStatCycle.DeleteStatCycleBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public BulkAddStats.BulkAddStatsBuilder BulkAddStatsOp
        {
            get
            {
                var opBuilder = new Operation.BulkAddStats.BulkAddStatsBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public StopStatCycle.StopStatCycleBuilder StopStatCycleOp
        {
            get
            {
                var opBuilder = new Operation.StopStatCycle.StopStatCycleBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public GetStatCycles1.GetStatCycles1Builder GetStatCycles1Op
        {
            get
            {
                var opBuilder = new Operation.GetStatCycles1.GetStatCycles1Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public BulkGetStatCycle1.BulkGetStatCycle1Builder BulkGetStatCycle1Op
        {
            get
            {
                var opBuilder = new Operation.BulkGetStatCycle1.BulkGetStatCycle1Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public GetStatCycle1.GetStatCycle1Builder GetStatCycle1Op
        {
            get
            {
                var opBuilder = new Operation.GetStatCycle1.GetStatCycle1Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        #endregion

        public GetStatCycles.Response GetStatCycles(GetStatCycles input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<GetStatCycles.Response> GetStatCyclesAsync(GetStatCycles input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public CreateStatCycle.Response CreateStatCycle(CreateStatCycle input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<CreateStatCycle.Response> CreateStatCycleAsync(CreateStatCycle input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public BulkGetStatCycle.Response BulkGetStatCycle(BulkGetStatCycle input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<BulkGetStatCycle.Response> BulkGetStatCycleAsync(BulkGetStatCycle input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public ExportStatCycle.Response ExportStatCycle(ExportStatCycle input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<ExportStatCycle.Response> ExportStatCycleAsync(ExportStatCycle input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public ImportStatCycle.Response ImportStatCycle(ImportStatCycle input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<ImportStatCycle.Response> ImportStatCycleAsync(ImportStatCycle input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public GetStatCycle.Response GetStatCycle(GetStatCycle input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<GetStatCycle.Response> GetStatCycleAsync(GetStatCycle input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public UpdateStatCycle.Response UpdateStatCycle(UpdateStatCycle input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<UpdateStatCycle.Response> UpdateStatCycleAsync(UpdateStatCycle input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public DeleteStatCycle.Response DeleteStatCycle(DeleteStatCycle input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<DeleteStatCycle.Response> DeleteStatCycleAsync(DeleteStatCycle input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public BulkAddStats.Response BulkAddStats(BulkAddStats input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<BulkAddStats.Response> BulkAddStatsAsync(BulkAddStats input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public BulkAddStats.Response<T1> BulkAddStats<T1>(BulkAddStats input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<BulkAddStats.Response<T1>> BulkAddStatsAsync<T1>(BulkAddStats input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public StopStatCycle.Response StopStatCycle(StopStatCycle input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<StopStatCycle.Response> StopStatCycleAsync(StopStatCycle input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public GetStatCycles1.Response GetStatCycles1(GetStatCycles1 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<GetStatCycles1.Response> GetStatCycles1Async(GetStatCycles1 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public BulkGetStatCycle1.Response BulkGetStatCycle1(BulkGetStatCycle1 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<BulkGetStatCycle1.Response> BulkGetStatCycle1Async(BulkGetStatCycle1 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public GetStatCycle1.Response GetStatCycle1(GetStatCycle1 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<GetStatCycle1.Response> GetStatCycle1Async(GetStatCycle1 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
    }
}