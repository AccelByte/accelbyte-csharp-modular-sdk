// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;

using AccelByte.Sdk.Api.Ugc.Model;
using AccelByte.Sdk.Api.Ugc.Operation;

namespace AccelByte.Sdk.Api.Ugc.Wrapper
{
    public class PublicFollow
    {
        private readonly IAccelByteSdk _sdk;

        private string _CustomBasePath = String.Empty;

        public PublicFollow(IAccelByteSdk sdk)
        {
            _sdk = sdk;
        }

        public PublicFollow(IAccelByteSdk sdk, string customBasePath)
        {
            _sdk = sdk;
            _CustomBasePath = customBasePath;
        }

        #region Operation Builders
        public GetFollowedContent.GetFollowedContentBuilder GetFollowedContentOp
        {
            get
            {
                var opBuilder = new Operation.GetFollowedContent.GetFollowedContentBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public GetFollowedUsers.GetFollowedUsersBuilder GetFollowedUsersOp
        {
            get
            {
                var opBuilder = new Operation.GetFollowedUsers.GetFollowedUsersBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public UpdateUserFollowStatus.UpdateUserFollowStatusBuilder UpdateUserFollowStatusOp
        {
            get
            {
                var opBuilder = new Operation.UpdateUserFollowStatus.UpdateUserFollowStatusBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public GetPublicFollowers.GetPublicFollowersBuilder GetPublicFollowersOp
        {
            get
            {
                var opBuilder = new Operation.GetPublicFollowers.GetPublicFollowersBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public GetPublicFollowing.GetPublicFollowingBuilder GetPublicFollowingOp
        {
            get
            {
                var opBuilder = new Operation.GetPublicFollowing.GetPublicFollowingBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        #endregion

        public GetFollowedContent.Response GetFollowedContent(GetFollowedContent input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<GetFollowedContent.Response> GetFollowedContentAsync(GetFollowedContent input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public GetFollowedUsers.Response GetFollowedUsers(GetFollowedUsers input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<GetFollowedUsers.Response> GetFollowedUsersAsync(GetFollowedUsers input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public UpdateUserFollowStatus.Response UpdateUserFollowStatus(UpdateUserFollowStatus input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<UpdateUserFollowStatus.Response> UpdateUserFollowStatusAsync(UpdateUserFollowStatus input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public GetPublicFollowers.Response GetPublicFollowers(GetPublicFollowers input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<GetPublicFollowers.Response> GetPublicFollowersAsync(GetPublicFollowers input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public GetPublicFollowing.Response GetPublicFollowing(GetPublicFollowing input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<GetPublicFollowing.Response> GetPublicFollowingAsync(GetPublicFollowing input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
    }
}