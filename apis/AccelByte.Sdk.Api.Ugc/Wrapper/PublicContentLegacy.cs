// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;

using AccelByte.Sdk.Api.Ugc.Model;
using AccelByte.Sdk.Api.Ugc.Operation;

namespace AccelByte.Sdk.Api.Ugc.Wrapper
{
    public class PublicContentLegacy
    {
        private readonly IAccelByteSdk _sdk;

        public PublicContentLegacy(IAccelByteSdk sdk)
        {
            _sdk = sdk;
        }

        #region Operation Builders
        public SearchChannelSpecificContent.SearchChannelSpecificContentBuilder SearchChannelSpecificContentOp
        {
            get { return new Operation.SearchChannelSpecificContent.SearchChannelSpecificContentBuilder(_sdk); }
        }
        public PublicSearchContent.PublicSearchContentBuilder PublicSearchContentOp
        {
            get { return new Operation.PublicSearchContent.PublicSearchContentBuilder(_sdk); }
        }
        public PublicGetContentBulk.PublicGetContentBulkBuilder PublicGetContentBulkOp
        {
            get { return new Operation.PublicGetContentBulk.PublicGetContentBulkBuilder(_sdk); }
        }
        public PublicGetContentBulkByShareCodes.PublicGetContentBulkByShareCodesBuilder PublicGetContentBulkByShareCodesOp
        {
            get { return new Operation.PublicGetContentBulkByShareCodes.PublicGetContentBulkByShareCodesBuilder(_sdk); }
        }
        public PublicDownloadContentByShareCode.PublicDownloadContentByShareCodeBuilder PublicDownloadContentByShareCodeOp
        {
            get { return new Operation.PublicDownloadContentByShareCode.PublicDownloadContentByShareCodeBuilder(_sdk); }
        }
        public PublicDownloadContentByContentID.PublicDownloadContentByContentIDBuilder PublicDownloadContentByContentIDOp
        {
            get { return new Operation.PublicDownloadContentByContentID.PublicDownloadContentByContentIDBuilder(_sdk); }
        }
        public PublicDownloadContentPreview.PublicDownloadContentPreviewBuilder PublicDownloadContentPreviewOp
        {
            get { return new Operation.PublicDownloadContentPreview.PublicDownloadContentPreviewBuilder(_sdk); }
        }
        [Obsolete(DiagnosticId = "ab_deprecated_operation_wrapper")]
        public CreateContentDirect.CreateContentDirectBuilder CreateContentDirectOp
        {
            get { return new Operation.CreateContentDirect.CreateContentDirectBuilder(_sdk); }
        }
        public CreateContentS3.CreateContentS3Builder CreateContentS3Op
        {
            get { return new Operation.CreateContentS3.CreateContentS3Builder(_sdk); }
        }
        public PublicUpdateContentByShareCode.PublicUpdateContentByShareCodeBuilder PublicUpdateContentByShareCodeOp
        {
            get { return new Operation.PublicUpdateContentByShareCode.PublicUpdateContentByShareCodeBuilder(_sdk); }
        }
        public UpdateContentS3.UpdateContentS3Builder UpdateContentS3Op
        {
            get { return new Operation.UpdateContentS3.UpdateContentS3Builder(_sdk); }
        }
        public PublicDeleteContentByShareCode.PublicDeleteContentByShareCodeBuilder PublicDeleteContentByShareCodeOp
        {
            get { return new Operation.PublicDeleteContentByShareCode.PublicDeleteContentByShareCodeBuilder(_sdk); }
        }
        [Obsolete(DiagnosticId = "ab_deprecated_operation_wrapper")]
        public UpdateContentDirect.UpdateContentDirectBuilder UpdateContentDirectOp
        {
            get { return new Operation.UpdateContentDirect.UpdateContentDirectBuilder(_sdk); }
        }
        public DeleteContent.DeleteContentBuilder DeleteContentOp
        {
            get { return new Operation.DeleteContent.DeleteContentBuilder(_sdk); }
        }
        public UpdateContentShareCode.UpdateContentShareCodeBuilder UpdateContentShareCodeOp
        {
            get { return new Operation.UpdateContentShareCode.UpdateContentShareCodeBuilder(_sdk); }
        }
        public PublicGetUserContent.PublicGetUserContentBuilder PublicGetUserContentOp
        {
            get { return new Operation.PublicGetUserContent.PublicGetUserContentBuilder(_sdk); }
        }
        public UpdateScreenshots.UpdateScreenshotsBuilder UpdateScreenshotsOp
        {
            get { return new Operation.UpdateScreenshots.UpdateScreenshotsBuilder(_sdk); }
        }
        public UploadContentScreenshot.UploadContentScreenshotBuilder UploadContentScreenshotOp
        {
            get { return new Operation.UploadContentScreenshot.UploadContentScreenshotBuilder(_sdk); }
        }
        public DeleteContentScreenshot.DeleteContentScreenshotBuilder DeleteContentScreenshotOp
        {
            get { return new Operation.DeleteContentScreenshot.DeleteContentScreenshotBuilder(_sdk); }
        }
        #endregion

        public Model.ModelsPaginatedContentDownloadResponse? SearchChannelSpecificContent(SearchChannelSpecificContent input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ModelsPaginatedContentDownloadResponse?> SearchChannelSpecificContentAsync(SearchChannelSpecificContent input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ModelsPaginatedContentDownloadResponse? PublicSearchContent(PublicSearchContent input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ModelsPaginatedContentDownloadResponse?> PublicSearchContentAsync(PublicSearchContent input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public List<Model.ModelsContentDownloadResponse>? PublicGetContentBulk(PublicGetContentBulk input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<List<Model.ModelsContentDownloadResponse>?> PublicGetContentBulkAsync(PublicGetContentBulk input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public List<Model.ModelsContentDownloadResponse<T1>>? PublicGetContentBulk<T1>(PublicGetContentBulk input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<List<Model.ModelsContentDownloadResponse<T1>>?> PublicGetContentBulkAsync<T1>(PublicGetContentBulk input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public List<Model.ModelsContentDownloadResponse>? PublicGetContentBulkByShareCodes(PublicGetContentBulkByShareCodes input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<List<Model.ModelsContentDownloadResponse>?> PublicGetContentBulkByShareCodesAsync(PublicGetContentBulkByShareCodes input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public List<Model.ModelsContentDownloadResponse<T1>>? PublicGetContentBulkByShareCodes<T1>(PublicGetContentBulkByShareCodes input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<List<Model.ModelsContentDownloadResponse<T1>>?> PublicGetContentBulkByShareCodesAsync<T1>(PublicGetContentBulkByShareCodes input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ModelsContentDownloadResponse? PublicDownloadContentByShareCode(PublicDownloadContentByShareCode input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ModelsContentDownloadResponse?> PublicDownloadContentByShareCodeAsync(PublicDownloadContentByShareCode input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public Model.ModelsContentDownloadResponse<T1>? PublicDownloadContentByShareCode<T1>(PublicDownloadContentByShareCode input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ModelsContentDownloadResponse<T1>?> PublicDownloadContentByShareCodeAsync<T1>(PublicDownloadContentByShareCode input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ModelsContentDownloadResponse? PublicDownloadContentByContentID(PublicDownloadContentByContentID input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ModelsContentDownloadResponse?> PublicDownloadContentByContentIDAsync(PublicDownloadContentByContentID input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public Model.ModelsContentDownloadResponse<T1>? PublicDownloadContentByContentID<T1>(PublicDownloadContentByContentID input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ModelsContentDownloadResponse<T1>?> PublicDownloadContentByContentIDAsync<T1>(PublicDownloadContentByContentID input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ModelsGetContentPreviewResponse? PublicDownloadContentPreview(PublicDownloadContentPreview input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ModelsGetContentPreviewResponse?> PublicDownloadContentPreviewAsync(PublicDownloadContentPreview input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
#pragma warning disable ab_deprecated_operation
        [Obsolete(DiagnosticId = "ab_deprecated_operation_wrapper")]
        public Model.ModelsCreateContentResponse? CreateContentDirect(CreateContentDirect input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ModelsCreateContentResponse?> CreateContentDirectAsync(CreateContentDirect input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public Model.ModelsCreateContentResponse<T1>? CreateContentDirect<T1>(CreateContentDirect input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ModelsCreateContentResponse<T1>?> CreateContentDirectAsync<T1>(CreateContentDirect input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
#pragma warning restore ab_deprecated_operation
        public Model.ModelsCreateContentResponse? CreateContentS3(CreateContentS3 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ModelsCreateContentResponse?> CreateContentS3Async(CreateContentS3 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public Model.ModelsCreateContentResponse<T1>? CreateContentS3<T1>(CreateContentS3 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ModelsCreateContentResponse<T1>?> CreateContentS3Async<T1>(CreateContentS3 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ModelsCreateContentResponse? PublicUpdateContentByShareCode(PublicUpdateContentByShareCode input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ModelsCreateContentResponse?> PublicUpdateContentByShareCodeAsync(PublicUpdateContentByShareCode input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public Model.ModelsCreateContentResponse<T1>? PublicUpdateContentByShareCode<T1>(PublicUpdateContentByShareCode input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ModelsCreateContentResponse<T1>?> PublicUpdateContentByShareCodeAsync<T1>(PublicUpdateContentByShareCode input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ModelsCreateContentResponse? UpdateContentS3(UpdateContentS3 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ModelsCreateContentResponse?> UpdateContentS3Async(UpdateContentS3 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public Model.ModelsCreateContentResponse<T1>? UpdateContentS3<T1>(UpdateContentS3 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ModelsCreateContentResponse<T1>?> UpdateContentS3Async<T1>(UpdateContentS3 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public void PublicDeleteContentByShareCode(PublicDeleteContentByShareCode input)
        {
            var response = _sdk.RunRequest(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task PublicDeleteContentByShareCodeAsync(PublicDeleteContentByShareCode input)
        {
            var response = await _sdk.RunRequestAsync(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
#pragma warning disable ab_deprecated_operation
        [Obsolete(DiagnosticId = "ab_deprecated_operation_wrapper")]
        public Model.ModelsCreateContentResponse? UpdateContentDirect(UpdateContentDirect input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ModelsCreateContentResponse?> UpdateContentDirectAsync(UpdateContentDirect input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public Model.ModelsCreateContentResponse<T1>? UpdateContentDirect<T1>(UpdateContentDirect input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ModelsCreateContentResponse<T1>?> UpdateContentDirectAsync<T1>(UpdateContentDirect input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
#pragma warning restore ab_deprecated_operation
        public void DeleteContent(DeleteContent input)
        {
            var response = _sdk.RunRequest(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task DeleteContentAsync(DeleteContent input)
        {
            var response = await _sdk.RunRequestAsync(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ModelsCreateContentResponse? UpdateContentShareCode(UpdateContentShareCode input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ModelsCreateContentResponse?> UpdateContentShareCodeAsync(UpdateContentShareCode input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public Model.ModelsCreateContentResponse<T1>? UpdateContentShareCode<T1>(UpdateContentShareCode input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ModelsCreateContentResponse<T1>?> UpdateContentShareCodeAsync<T1>(UpdateContentShareCode input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ModelsPaginatedContentDownloadResponse? PublicGetUserContent(PublicGetUserContent input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ModelsPaginatedContentDownloadResponse?> PublicGetUserContentAsync(PublicGetUserContent input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ModelsUpdateScreenshotResponse? UpdateScreenshots(UpdateScreenshots input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ModelsUpdateScreenshotResponse?> UpdateScreenshotsAsync(UpdateScreenshots input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ModelsCreateScreenshotResponse? UploadContentScreenshot(UploadContentScreenshot input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ModelsCreateScreenshotResponse?> UploadContentScreenshotAsync(UploadContentScreenshot input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public void DeleteContentScreenshot(DeleteContentScreenshot input)
        {
            var response = _sdk.RunRequest(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task DeleteContentScreenshotAsync(DeleteContentScreenshot input)
        {
            var response = await _sdk.RunRequestAsync(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
    }
}