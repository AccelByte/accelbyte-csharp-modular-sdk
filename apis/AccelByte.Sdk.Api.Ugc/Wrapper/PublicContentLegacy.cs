// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;

using AccelByte.Sdk.Api.Ugc.Model;
using AccelByte.Sdk.Api.Ugc.Operation;

namespace AccelByte.Sdk.Api.Ugc.Wrapper
{
    public class PublicContentLegacy
    {
        private readonly IAccelByteSdk _sdk;

        private string _CustomBasePath = String.Empty;

        public PublicContentLegacy(IAccelByteSdk sdk)
        {
            _sdk = sdk;
        }

        public PublicContentLegacy(IAccelByteSdk sdk, string customBasePath)
        {
            _sdk = sdk;
            _CustomBasePath = customBasePath;
        }

        #region Operation Builders
        public SearchChannelSpecificContent.SearchChannelSpecificContentBuilder SearchChannelSpecificContentOp
        {
            get
            {
                var opBuilder = new Operation.SearchChannelSpecificContent.SearchChannelSpecificContentBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public PublicSearchContent.PublicSearchContentBuilder PublicSearchContentOp
        {
            get
            {
                var opBuilder = new Operation.PublicSearchContent.PublicSearchContentBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public PublicGetContentBulk.PublicGetContentBulkBuilder PublicGetContentBulkOp
        {
            get
            {
                var opBuilder = new Operation.PublicGetContentBulk.PublicGetContentBulkBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public PublicGetContentBulkByShareCodes.PublicGetContentBulkByShareCodesBuilder PublicGetContentBulkByShareCodesOp
        {
            get
            {
                var opBuilder = new Operation.PublicGetContentBulkByShareCodes.PublicGetContentBulkByShareCodesBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public PublicDownloadContentByShareCode.PublicDownloadContentByShareCodeBuilder PublicDownloadContentByShareCodeOp
        {
            get
            {
                var opBuilder = new Operation.PublicDownloadContentByShareCode.PublicDownloadContentByShareCodeBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public PublicDownloadContentByContentID.PublicDownloadContentByContentIDBuilder PublicDownloadContentByContentIDOp
        {
            get
            {
                var opBuilder = new Operation.PublicDownloadContentByContentID.PublicDownloadContentByContentIDBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public PublicDownloadContentPreview.PublicDownloadContentPreviewBuilder PublicDownloadContentPreviewOp
        {
            get
            {
                var opBuilder = new Operation.PublicDownloadContentPreview.PublicDownloadContentPreviewBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        [Obsolete(DiagnosticId = "ab_deprecated_operation_wrapper")]
        public CreateContentDirect.CreateContentDirectBuilder CreateContentDirectOp
        {
            get
            {
                var opBuilder = new Operation.CreateContentDirect.CreateContentDirectBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public CreateContentS3.CreateContentS3Builder CreateContentS3Op
        {
            get
            {
                var opBuilder = new Operation.CreateContentS3.CreateContentS3Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public PublicUpdateContentByShareCode.PublicUpdateContentByShareCodeBuilder PublicUpdateContentByShareCodeOp
        {
            get
            {
                var opBuilder = new Operation.PublicUpdateContentByShareCode.PublicUpdateContentByShareCodeBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public UpdateContentS3.UpdateContentS3Builder UpdateContentS3Op
        {
            get
            {
                var opBuilder = new Operation.UpdateContentS3.UpdateContentS3Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public PublicDeleteContentByShareCode.PublicDeleteContentByShareCodeBuilder PublicDeleteContentByShareCodeOp
        {
            get
            {
                var opBuilder = new Operation.PublicDeleteContentByShareCode.PublicDeleteContentByShareCodeBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        [Obsolete(DiagnosticId = "ab_deprecated_operation_wrapper")]
        public UpdateContentDirect.UpdateContentDirectBuilder UpdateContentDirectOp
        {
            get
            {
                var opBuilder = new Operation.UpdateContentDirect.UpdateContentDirectBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public DeleteContent.DeleteContentBuilder DeleteContentOp
        {
            get
            {
                var opBuilder = new Operation.DeleteContent.DeleteContentBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public UpdateContentShareCode.UpdateContentShareCodeBuilder UpdateContentShareCodeOp
        {
            get
            {
                var opBuilder = new Operation.UpdateContentShareCode.UpdateContentShareCodeBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public PublicGetUserContent.PublicGetUserContentBuilder PublicGetUserContentOp
        {
            get
            {
                var opBuilder = new Operation.PublicGetUserContent.PublicGetUserContentBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public UpdateScreenshots.UpdateScreenshotsBuilder UpdateScreenshotsOp
        {
            get
            {
                var opBuilder = new Operation.UpdateScreenshots.UpdateScreenshotsBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public UploadContentScreenshot.UploadContentScreenshotBuilder UploadContentScreenshotOp
        {
            get
            {
                var opBuilder = new Operation.UploadContentScreenshot.UploadContentScreenshotBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public DeleteContentScreenshot.DeleteContentScreenshotBuilder DeleteContentScreenshotOp
        {
            get
            {
                var opBuilder = new Operation.DeleteContentScreenshot.DeleteContentScreenshotBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        #endregion

        public SearchChannelSpecificContent.Response SearchChannelSpecificContent(SearchChannelSpecificContent input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<SearchChannelSpecificContent.Response> SearchChannelSpecificContentAsync(SearchChannelSpecificContent input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public PublicSearchContent.Response PublicSearchContent(PublicSearchContent input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<PublicSearchContent.Response> PublicSearchContentAsync(PublicSearchContent input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public PublicGetContentBulk.Response PublicGetContentBulk(PublicGetContentBulk input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<PublicGetContentBulk.Response> PublicGetContentBulkAsync(PublicGetContentBulk input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public PublicGetContentBulk.Response<T1> PublicGetContentBulk<T1>(PublicGetContentBulk input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<PublicGetContentBulk.Response<T1>> PublicGetContentBulkAsync<T1>(PublicGetContentBulk input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public PublicGetContentBulkByShareCodes.Response PublicGetContentBulkByShareCodes(PublicGetContentBulkByShareCodes input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<PublicGetContentBulkByShareCodes.Response> PublicGetContentBulkByShareCodesAsync(PublicGetContentBulkByShareCodes input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public PublicGetContentBulkByShareCodes.Response<T1> PublicGetContentBulkByShareCodes<T1>(PublicGetContentBulkByShareCodes input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<PublicGetContentBulkByShareCodes.Response<T1>> PublicGetContentBulkByShareCodesAsync<T1>(PublicGetContentBulkByShareCodes input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public PublicDownloadContentByShareCode.Response PublicDownloadContentByShareCode(PublicDownloadContentByShareCode input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<PublicDownloadContentByShareCode.Response> PublicDownloadContentByShareCodeAsync(PublicDownloadContentByShareCode input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public PublicDownloadContentByShareCode.Response<T1> PublicDownloadContentByShareCode<T1>(PublicDownloadContentByShareCode input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<PublicDownloadContentByShareCode.Response<T1>> PublicDownloadContentByShareCodeAsync<T1>(PublicDownloadContentByShareCode input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public PublicDownloadContentByContentID.Response PublicDownloadContentByContentID(PublicDownloadContentByContentID input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<PublicDownloadContentByContentID.Response> PublicDownloadContentByContentIDAsync(PublicDownloadContentByContentID input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public PublicDownloadContentByContentID.Response<T1> PublicDownloadContentByContentID<T1>(PublicDownloadContentByContentID input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<PublicDownloadContentByContentID.Response<T1>> PublicDownloadContentByContentIDAsync<T1>(PublicDownloadContentByContentID input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public PublicDownloadContentPreview.Response PublicDownloadContentPreview(PublicDownloadContentPreview input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<PublicDownloadContentPreview.Response> PublicDownloadContentPreviewAsync(PublicDownloadContentPreview input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
#pragma warning disable ab_deprecated_operation
        [Obsolete(DiagnosticId = "ab_deprecated_operation_wrapper")]
        public CreateContentDirect.Response CreateContentDirect(CreateContentDirect input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<CreateContentDirect.Response> CreateContentDirectAsync(CreateContentDirect input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public CreateContentDirect.Response<T1> CreateContentDirect<T1>(CreateContentDirect input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<CreateContentDirect.Response<T1>> CreateContentDirectAsync<T1>(CreateContentDirect input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
#pragma warning restore ab_deprecated_operation
        public CreateContentS3.Response CreateContentS3(CreateContentS3 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<CreateContentS3.Response> CreateContentS3Async(CreateContentS3 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public CreateContentS3.Response<T1> CreateContentS3<T1>(CreateContentS3 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<CreateContentS3.Response<T1>> CreateContentS3Async<T1>(CreateContentS3 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public PublicUpdateContentByShareCode.Response PublicUpdateContentByShareCode(PublicUpdateContentByShareCode input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<PublicUpdateContentByShareCode.Response> PublicUpdateContentByShareCodeAsync(PublicUpdateContentByShareCode input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public PublicUpdateContentByShareCode.Response<T1> PublicUpdateContentByShareCode<T1>(PublicUpdateContentByShareCode input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<PublicUpdateContentByShareCode.Response<T1>> PublicUpdateContentByShareCodeAsync<T1>(PublicUpdateContentByShareCode input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public UpdateContentS3.Response UpdateContentS3(UpdateContentS3 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<UpdateContentS3.Response> UpdateContentS3Async(UpdateContentS3 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public UpdateContentS3.Response<T1> UpdateContentS3<T1>(UpdateContentS3 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<UpdateContentS3.Response<T1>> UpdateContentS3Async<T1>(UpdateContentS3 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public PublicDeleteContentByShareCode.Response PublicDeleteContentByShareCode(PublicDeleteContentByShareCode input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<PublicDeleteContentByShareCode.Response> PublicDeleteContentByShareCodeAsync(PublicDeleteContentByShareCode input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
#pragma warning disable ab_deprecated_operation
        [Obsolete(DiagnosticId = "ab_deprecated_operation_wrapper")]
        public UpdateContentDirect.Response UpdateContentDirect(UpdateContentDirect input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<UpdateContentDirect.Response> UpdateContentDirectAsync(UpdateContentDirect input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public UpdateContentDirect.Response<T1> UpdateContentDirect<T1>(UpdateContentDirect input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<UpdateContentDirect.Response<T1>> UpdateContentDirectAsync<T1>(UpdateContentDirect input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
#pragma warning restore ab_deprecated_operation
        public DeleteContent.Response DeleteContent(DeleteContent input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<DeleteContent.Response> DeleteContentAsync(DeleteContent input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public UpdateContentShareCode.Response UpdateContentShareCode(UpdateContentShareCode input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<UpdateContentShareCode.Response> UpdateContentShareCodeAsync(UpdateContentShareCode input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public UpdateContentShareCode.Response<T1> UpdateContentShareCode<T1>(UpdateContentShareCode input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<UpdateContentShareCode.Response<T1>> UpdateContentShareCodeAsync<T1>(UpdateContentShareCode input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public PublicGetUserContent.Response PublicGetUserContent(PublicGetUserContent input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<PublicGetUserContent.Response> PublicGetUserContentAsync(PublicGetUserContent input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public UpdateScreenshots.Response UpdateScreenshots(UpdateScreenshots input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<UpdateScreenshots.Response> UpdateScreenshotsAsync(UpdateScreenshots input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public UploadContentScreenshot.Response UploadContentScreenshot(UploadContentScreenshot input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<UploadContentScreenshot.Response> UploadContentScreenshotAsync(UploadContentScreenshot input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public DeleteContentScreenshot.Response DeleteContentScreenshot(DeleteContentScreenshot input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<DeleteContentScreenshot.Response> DeleteContentScreenshotAsync(DeleteContentScreenshot input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
    }
}