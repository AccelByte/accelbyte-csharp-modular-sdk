// Copyright (c) 2022-2023 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using System;
using System.Collections.Generic;
using System.Text;
using System.IO;

using AccelByte.Sdk.Core;

using AccelByte.Sdk.Api.Ugc.Model;
using AccelByte.Sdk.Api.Ugc.Operation;

namespace AccelByte.Sdk.Api.Ugc.Wrapper
{
    public class AdminChannel
    {
        private readonly IAccelByteSdk _sdk;

        public AdminChannel(IAccelByteSdk sdk)
        {
            _sdk = sdk;
        }

        #region Operation Builders
        public SingleAdminGetChannel.SingleAdminGetChannelBuilder SingleAdminGetChannelOp
        {
            get { return new Operation.SingleAdminGetChannel.SingleAdminGetChannelBuilder(_sdk); }
        }
        public AdminCreateChannel.AdminCreateChannelBuilder AdminCreateChannelOp
        {
            get { return new Operation.AdminCreateChannel.AdminCreateChannelBuilder(_sdk); }
        }
        public SingleAdminUpdateChannel.SingleAdminUpdateChannelBuilder SingleAdminUpdateChannelOp
        {
            get { return new Operation.SingleAdminUpdateChannel.SingleAdminUpdateChannelBuilder(_sdk); }
        }
        public SingleAdminDeleteChannel.SingleAdminDeleteChannelBuilder SingleAdminDeleteChannelOp
        {
            get { return new Operation.SingleAdminDeleteChannel.SingleAdminDeleteChannelBuilder(_sdk); }
        }
        public AdminGetChannel.AdminGetChannelBuilder AdminGetChannelOp
        {
            get { return new Operation.AdminGetChannel.AdminGetChannelBuilder(_sdk); }
        }
        public AdminUpdateChannel.AdminUpdateChannelBuilder AdminUpdateChannelOp
        {
            get { return new Operation.AdminUpdateChannel.AdminUpdateChannelBuilder(_sdk); }
        }
        public AdminDeleteChannel.AdminDeleteChannelBuilder AdminDeleteChannelOp
        {
            get { return new Operation.AdminDeleteChannel.AdminDeleteChannelBuilder(_sdk); }
        }
        #endregion
        
        public Model.ModelsPaginatedGetChannelResponse? SingleAdminGetChannel(SingleAdminGetChannel input)
        {
            var response = _sdk.RunRequest(input);

            return input.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
        }
        public Model.ModelsChannelResponse? AdminCreateChannel(AdminCreateChannel input)
        {
            var response = _sdk.RunRequest(input);

            return input.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
        }
        public Model.ModelsChannelResponse? SingleAdminUpdateChannel(SingleAdminUpdateChannel input)
        {
            var response = _sdk.RunRequest(input);

            return input.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
        }
        public void SingleAdminDeleteChannel(SingleAdminDeleteChannel input) {
            var response = _sdk.RunRequest(input);

            input.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
        }
        public Model.ModelsPaginatedGetChannelResponse? AdminGetChannel(AdminGetChannel input)
        {
            var response = _sdk.RunRequest(input);

            return input.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
        }
        public Model.ModelsChannelResponse? AdminUpdateChannel(AdminUpdateChannel input)
        {
            var response = _sdk.RunRequest(input);

            return input.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
        }
        public void AdminDeleteChannel(AdminDeleteChannel input) {
            var response = _sdk.RunRequest(input);

            input.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
        }
    }
}