// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;

using AccelByte.Sdk.Api.Ugc.Model;
using AccelByte.Sdk.Api.Ugc.Operation;

namespace AccelByte.Sdk.Api.Ugc.Wrapper
{
    public class Anonymization
    {
        private readonly IAccelByteSdk _sdk;

        private string _CustomBasePath = String.Empty;

        public Anonymization(IAccelByteSdk sdk)
        {
            _sdk = sdk;
        }

        public Anonymization(IAccelByteSdk sdk, string customBasePath)
        {
            _sdk = sdk;
            _CustomBasePath = customBasePath;
        }

        #region Operation Builders
        public AdminDeleteAllUserChannels.AdminDeleteAllUserChannelsBuilder AdminDeleteAllUserChannelsOp
        {
            get
            {
                var opBuilder = new Operation.AdminDeleteAllUserChannels.AdminDeleteAllUserChannelsBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminDeleteAllUserContents.AdminDeleteAllUserContentsBuilder AdminDeleteAllUserContentsOp
        {
            get
            {
                var opBuilder = new Operation.AdminDeleteAllUserContents.AdminDeleteAllUserContentsBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminDeleteAllUserGroup.AdminDeleteAllUserGroupBuilder AdminDeleteAllUserGroupOp
        {
            get
            {
                var opBuilder = new Operation.AdminDeleteAllUserGroup.AdminDeleteAllUserGroupBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminDeleteAllUserStates.AdminDeleteAllUserStatesBuilder AdminDeleteAllUserStatesOp
        {
            get
            {
                var opBuilder = new Operation.AdminDeleteAllUserStates.AdminDeleteAllUserStatesBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public DeleteAllUserChannel.DeleteAllUserChannelBuilder DeleteAllUserChannelOp
        {
            get
            {
                var opBuilder = new Operation.DeleteAllUserChannel.DeleteAllUserChannelBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public DeleteAllUserContents.DeleteAllUserContentsBuilder DeleteAllUserContentsOp
        {
            get
            {
                var opBuilder = new Operation.DeleteAllUserContents.DeleteAllUserContentsBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public DeleteAllUserGroup.DeleteAllUserGroupBuilder DeleteAllUserGroupOp
        {
            get
            {
                var opBuilder = new Operation.DeleteAllUserGroup.DeleteAllUserGroupBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public DeleteAllUserStates.DeleteAllUserStatesBuilder DeleteAllUserStatesOp
        {
            get
            {
                var opBuilder = new Operation.DeleteAllUserStates.DeleteAllUserStatesBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        #endregion

        public AdminDeleteAllUserChannels.Response AdminDeleteAllUserChannels(AdminDeleteAllUserChannels input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminDeleteAllUserChannels.Response> AdminDeleteAllUserChannelsAsync(AdminDeleteAllUserChannels input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminDeleteAllUserContents.Response AdminDeleteAllUserContents(AdminDeleteAllUserContents input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminDeleteAllUserContents.Response> AdminDeleteAllUserContentsAsync(AdminDeleteAllUserContents input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminDeleteAllUserGroup.Response AdminDeleteAllUserGroup(AdminDeleteAllUserGroup input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminDeleteAllUserGroup.Response> AdminDeleteAllUserGroupAsync(AdminDeleteAllUserGroup input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminDeleteAllUserStates.Response AdminDeleteAllUserStates(AdminDeleteAllUserStates input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminDeleteAllUserStates.Response> AdminDeleteAllUserStatesAsync(AdminDeleteAllUserStates input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public DeleteAllUserChannel.Response DeleteAllUserChannel(DeleteAllUserChannel input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<DeleteAllUserChannel.Response> DeleteAllUserChannelAsync(DeleteAllUserChannel input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public DeleteAllUserContents.Response DeleteAllUserContents(DeleteAllUserContents input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<DeleteAllUserContents.Response> DeleteAllUserContentsAsync(DeleteAllUserContents input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public DeleteAllUserGroup.Response DeleteAllUserGroup(DeleteAllUserGroup input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<DeleteAllUserGroup.Response> DeleteAllUserGroupAsync(DeleteAllUserGroup input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public DeleteAllUserStates.Response DeleteAllUserStates(DeleteAllUserStates input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<DeleteAllUserStates.Response> DeleteAllUserStatesAsync(DeleteAllUserStates input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
    }
}