// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;

using AccelByte.Sdk.Api.Ugc.Model;
using AccelByte.Sdk.Api.Ugc.Operation;

namespace AccelByte.Sdk.Api.Ugc.Wrapper
{
    public class AdminContent
    {
        private readonly IAccelByteSdk _sdk;

        private string _CustomBasePath = String.Empty;

        public AdminContent(IAccelByteSdk sdk)
        {
            _sdk = sdk;
        }

        public AdminContent(IAccelByteSdk sdk, string customBasePath)
        {
            _sdk = sdk;
            _CustomBasePath = customBasePath;
        }

        #region Operation Builders
        [Obsolete(DiagnosticId ="ab_deprecated_operation_wrapper")]
        public AdminUploadContentDirect.AdminUploadContentDirectBuilder AdminUploadContentDirectOp
        {
            get
            {
                var opBuilder = new Operation.AdminUploadContentDirect.AdminUploadContentDirectBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminUploadContentS3.AdminUploadContentS3Builder AdminUploadContentS3Op
        {
            get
            {
                var opBuilder = new Operation.AdminUploadContentS3.AdminUploadContentS3Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public SingleAdminUpdateContentS3.SingleAdminUpdateContentS3Builder SingleAdminUpdateContentS3Op
        {
            get
            {
                var opBuilder = new Operation.SingleAdminUpdateContentS3.SingleAdminUpdateContentS3Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminSearchChannelSpecificContent.AdminSearchChannelSpecificContentBuilder AdminSearchChannelSpecificContentOp
        {
            get
            {
                var opBuilder = new Operation.AdminSearchChannelSpecificContent.AdminSearchChannelSpecificContentBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        [Obsolete(DiagnosticId ="ab_deprecated_operation_wrapper")]
        public SingleAdminUpdateContentDirect.SingleAdminUpdateContentDirectBuilder SingleAdminUpdateContentDirectOp
        {
            get
            {
                var opBuilder = new Operation.SingleAdminUpdateContentDirect.SingleAdminUpdateContentDirectBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public SingleAdminDeleteContent.SingleAdminDeleteContentBuilder SingleAdminDeleteContentOp
        {
            get
            {
                var opBuilder = new Operation.SingleAdminDeleteContent.SingleAdminDeleteContentBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public SingleAdminGetContent.SingleAdminGetContentBuilder SingleAdminGetContentOp
        {
            get
            {
                var opBuilder = new Operation.SingleAdminGetContent.SingleAdminGetContentBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminGetContentBulk.AdminGetContentBulkBuilder AdminGetContentBulkOp
        {
            get
            {
                var opBuilder = new Operation.AdminGetContentBulk.AdminGetContentBulkBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminSearchContent.AdminSearchContentBuilder AdminSearchContentOp
        {
            get
            {
                var opBuilder = new Operation.AdminSearchContent.AdminSearchContentBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminGetContentBulkByShareCodes.AdminGetContentBulkByShareCodesBuilder AdminGetContentBulkByShareCodesOp
        {
            get
            {
                var opBuilder = new Operation.AdminGetContentBulkByShareCodes.AdminGetContentBulkByShareCodesBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminGetUserContentByShareCode.AdminGetUserContentByShareCodeBuilder AdminGetUserContentByShareCodeOp
        {
            get
            {
                var opBuilder = new Operation.AdminGetUserContentByShareCode.AdminGetUserContentByShareCodeBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminGetSpecificContent.AdminGetSpecificContentBuilder AdminGetSpecificContentOp
        {
            get
            {
                var opBuilder = new Operation.AdminGetSpecificContent.AdminGetSpecificContentBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminDownloadContentPreview.AdminDownloadContentPreviewBuilder AdminDownloadContentPreviewOp
        {
            get
            {
                var opBuilder = new Operation.AdminDownloadContentPreview.AdminDownloadContentPreviewBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public RollbackContentVersion.RollbackContentVersionBuilder RollbackContentVersionOp
        {
            get
            {
                var opBuilder = new Operation.RollbackContentVersion.RollbackContentVersionBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminUpdateScreenshots.AdminUpdateScreenshotsBuilder AdminUpdateScreenshotsOp
        {
            get
            {
                var opBuilder = new Operation.AdminUpdateScreenshots.AdminUpdateScreenshotsBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminUploadContentScreenshot.AdminUploadContentScreenshotBuilder AdminUploadContentScreenshotOp
        {
            get
            {
                var opBuilder = new Operation.AdminUploadContentScreenshot.AdminUploadContentScreenshotBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminDeleteContentScreenshot.AdminDeleteContentScreenshotBuilder AdminDeleteContentScreenshotOp
        {
            get
            {
                var opBuilder = new Operation.AdminDeleteContentScreenshot.AdminDeleteContentScreenshotBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public ListContentVersions.ListContentVersionsBuilder ListContentVersionsOp
        {
            get
            {
                var opBuilder = new Operation.ListContentVersions.ListContentVersionsBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminUpdateContentS3ByShareCode.AdminUpdateContentS3ByShareCodeBuilder AdminUpdateContentS3ByShareCodeOp
        {
            get
            {
                var opBuilder = new Operation.AdminUpdateContentS3ByShareCode.AdminUpdateContentS3ByShareCodeBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminUpdateContentS3.AdminUpdateContentS3Builder AdminUpdateContentS3Op
        {
            get
            {
                var opBuilder = new Operation.AdminUpdateContentS3.AdminUpdateContentS3Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public DeleteContentByShareCode.DeleteContentByShareCodeBuilder DeleteContentByShareCodeOp
        {
            get
            {
                var opBuilder = new Operation.DeleteContentByShareCode.DeleteContentByShareCodeBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        [Obsolete(DiagnosticId ="ab_deprecated_operation_wrapper")]
        public AdminUpdateContentDirect.AdminUpdateContentDirectBuilder AdminUpdateContentDirectOp
        {
            get
            {
                var opBuilder = new Operation.AdminUpdateContentDirect.AdminUpdateContentDirectBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminDeleteContent.AdminDeleteContentBuilder AdminDeleteContentOp
        {
            get
            {
                var opBuilder = new Operation.AdminDeleteContent.AdminDeleteContentBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminGetContent.AdminGetContentBuilder AdminGetContentOp
        {
            get
            {
                var opBuilder = new Operation.AdminGetContent.AdminGetContentBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminHideUserContent.AdminHideUserContentBuilder AdminHideUserContentOp
        {
            get
            {
                var opBuilder = new Operation.AdminHideUserContent.AdminHideUserContentBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        #endregion

        #pragma warning disable ab_deprecated_operation
        [Obsolete(DiagnosticId ="ab_deprecated_operation_wrapper")]
        public AdminUploadContentDirect.Response AdminUploadContentDirect(AdminUploadContentDirect input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminUploadContentDirect.Response> AdminUploadContentDirectAsync(AdminUploadContentDirect input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public AdminUploadContentDirect.Response<T1> AdminUploadContentDirect<T1>(AdminUploadContentDirect input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminUploadContentDirect.Response<T1>> AdminUploadContentDirectAsync<T1>(AdminUploadContentDirect input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        #pragma warning restore ab_deprecated_operation
        public AdminUploadContentS3.Response AdminUploadContentS3(AdminUploadContentS3 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminUploadContentS3.Response> AdminUploadContentS3Async(AdminUploadContentS3 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public AdminUploadContentS3.Response<T1> AdminUploadContentS3<T1>(AdminUploadContentS3 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminUploadContentS3.Response<T1>> AdminUploadContentS3Async<T1>(AdminUploadContentS3 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public SingleAdminUpdateContentS3.Response SingleAdminUpdateContentS3(SingleAdminUpdateContentS3 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<SingleAdminUpdateContentS3.Response> SingleAdminUpdateContentS3Async(SingleAdminUpdateContentS3 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public SingleAdminUpdateContentS3.Response<T1> SingleAdminUpdateContentS3<T1>(SingleAdminUpdateContentS3 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<SingleAdminUpdateContentS3.Response<T1>> SingleAdminUpdateContentS3Async<T1>(SingleAdminUpdateContentS3 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminSearchChannelSpecificContent.Response AdminSearchChannelSpecificContent(AdminSearchChannelSpecificContent input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminSearchChannelSpecificContent.Response> AdminSearchChannelSpecificContentAsync(AdminSearchChannelSpecificContent input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        #pragma warning disable ab_deprecated_operation
        [Obsolete(DiagnosticId ="ab_deprecated_operation_wrapper")]
        public SingleAdminUpdateContentDirect.Response SingleAdminUpdateContentDirect(SingleAdminUpdateContentDirect input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<SingleAdminUpdateContentDirect.Response> SingleAdminUpdateContentDirectAsync(SingleAdminUpdateContentDirect input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public SingleAdminUpdateContentDirect.Response<T1> SingleAdminUpdateContentDirect<T1>(SingleAdminUpdateContentDirect input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<SingleAdminUpdateContentDirect.Response<T1>> SingleAdminUpdateContentDirectAsync<T1>(SingleAdminUpdateContentDirect input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        #pragma warning restore ab_deprecated_operation
        public SingleAdminDeleteContent.Response SingleAdminDeleteContent(SingleAdminDeleteContent input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<SingleAdminDeleteContent.Response> SingleAdminDeleteContentAsync(SingleAdminDeleteContent input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public SingleAdminGetContent.Response SingleAdminGetContent(SingleAdminGetContent input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<SingleAdminGetContent.Response> SingleAdminGetContentAsync(SingleAdminGetContent input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminGetContentBulk.Response AdminGetContentBulk(AdminGetContentBulk input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminGetContentBulk.Response> AdminGetContentBulkAsync(AdminGetContentBulk input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public AdminGetContentBulk.Response<T1> AdminGetContentBulk<T1>(AdminGetContentBulk input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminGetContentBulk.Response<T1>> AdminGetContentBulkAsync<T1>(AdminGetContentBulk input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminSearchContent.Response AdminSearchContent(AdminSearchContent input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminSearchContent.Response> AdminSearchContentAsync(AdminSearchContent input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminGetContentBulkByShareCodes.Response AdminGetContentBulkByShareCodes(AdminGetContentBulkByShareCodes input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminGetContentBulkByShareCodes.Response> AdminGetContentBulkByShareCodesAsync(AdminGetContentBulkByShareCodes input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public AdminGetContentBulkByShareCodes.Response<T1> AdminGetContentBulkByShareCodes<T1>(AdminGetContentBulkByShareCodes input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminGetContentBulkByShareCodes.Response<T1>> AdminGetContentBulkByShareCodesAsync<T1>(AdminGetContentBulkByShareCodes input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminGetUserContentByShareCode.Response AdminGetUserContentByShareCode(AdminGetUserContentByShareCode input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminGetUserContentByShareCode.Response> AdminGetUserContentByShareCodeAsync(AdminGetUserContentByShareCode input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public AdminGetUserContentByShareCode.Response<T1> AdminGetUserContentByShareCode<T1>(AdminGetUserContentByShareCode input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminGetUserContentByShareCode.Response<T1>> AdminGetUserContentByShareCodeAsync<T1>(AdminGetUserContentByShareCode input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminGetSpecificContent.Response AdminGetSpecificContent(AdminGetSpecificContent input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminGetSpecificContent.Response> AdminGetSpecificContentAsync(AdminGetSpecificContent input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public AdminGetSpecificContent.Response<T1> AdminGetSpecificContent<T1>(AdminGetSpecificContent input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminGetSpecificContent.Response<T1>> AdminGetSpecificContentAsync<T1>(AdminGetSpecificContent input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminDownloadContentPreview.Response AdminDownloadContentPreview(AdminDownloadContentPreview input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminDownloadContentPreview.Response> AdminDownloadContentPreviewAsync(AdminDownloadContentPreview input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public RollbackContentVersion.Response RollbackContentVersion(RollbackContentVersion input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<RollbackContentVersion.Response> RollbackContentVersionAsync(RollbackContentVersion input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public RollbackContentVersion.Response<T1> RollbackContentVersion<T1>(RollbackContentVersion input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<RollbackContentVersion.Response<T1>> RollbackContentVersionAsync<T1>(RollbackContentVersion input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminUpdateScreenshots.Response AdminUpdateScreenshots(AdminUpdateScreenshots input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminUpdateScreenshots.Response> AdminUpdateScreenshotsAsync(AdminUpdateScreenshots input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminUploadContentScreenshot.Response AdminUploadContentScreenshot(AdminUploadContentScreenshot input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminUploadContentScreenshot.Response> AdminUploadContentScreenshotAsync(AdminUploadContentScreenshot input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminDeleteContentScreenshot.Response AdminDeleteContentScreenshot(AdminDeleteContentScreenshot input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminDeleteContentScreenshot.Response> AdminDeleteContentScreenshotAsync(AdminDeleteContentScreenshot input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public ListContentVersions.Response ListContentVersions(ListContentVersions input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<ListContentVersions.Response> ListContentVersionsAsync(ListContentVersions input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminUpdateContentS3ByShareCode.Response AdminUpdateContentS3ByShareCode(AdminUpdateContentS3ByShareCode input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminUpdateContentS3ByShareCode.Response> AdminUpdateContentS3ByShareCodeAsync(AdminUpdateContentS3ByShareCode input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public AdminUpdateContentS3ByShareCode.Response<T1> AdminUpdateContentS3ByShareCode<T1>(AdminUpdateContentS3ByShareCode input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminUpdateContentS3ByShareCode.Response<T1>> AdminUpdateContentS3ByShareCodeAsync<T1>(AdminUpdateContentS3ByShareCode input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminUpdateContentS3.Response AdminUpdateContentS3(AdminUpdateContentS3 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminUpdateContentS3.Response> AdminUpdateContentS3Async(AdminUpdateContentS3 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public AdminUpdateContentS3.Response<T1> AdminUpdateContentS3<T1>(AdminUpdateContentS3 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminUpdateContentS3.Response<T1>> AdminUpdateContentS3Async<T1>(AdminUpdateContentS3 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public DeleteContentByShareCode.Response DeleteContentByShareCode(DeleteContentByShareCode input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<DeleteContentByShareCode.Response> DeleteContentByShareCodeAsync(DeleteContentByShareCode input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        #pragma warning disable ab_deprecated_operation
        [Obsolete(DiagnosticId ="ab_deprecated_operation_wrapper")]
        public AdminUpdateContentDirect.Response AdminUpdateContentDirect(AdminUpdateContentDirect input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminUpdateContentDirect.Response> AdminUpdateContentDirectAsync(AdminUpdateContentDirect input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public AdminUpdateContentDirect.Response<T1> AdminUpdateContentDirect<T1>(AdminUpdateContentDirect input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminUpdateContentDirect.Response<T1>> AdminUpdateContentDirectAsync<T1>(AdminUpdateContentDirect input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        #pragma warning restore ab_deprecated_operation
        public AdminDeleteContent.Response AdminDeleteContent(AdminDeleteContent input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminDeleteContent.Response> AdminDeleteContentAsync(AdminDeleteContent input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminGetContent.Response AdminGetContent(AdminGetContent input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminGetContent.Response> AdminGetContentAsync(AdminGetContent input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminHideUserContent.Response AdminHideUserContent(AdminHideUserContent input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminHideUserContent.Response> AdminHideUserContentAsync(AdminHideUserContent input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public AdminHideUserContent.Response<T1> AdminHideUserContent<T1>(AdminHideUserContent input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminHideUserContent.Response<T1>> AdminHideUserContentAsync<T1>(AdminHideUserContent input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
    }
}