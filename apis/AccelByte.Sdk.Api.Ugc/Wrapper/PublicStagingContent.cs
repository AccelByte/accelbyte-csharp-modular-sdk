// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;

using AccelByte.Sdk.Api.Ugc.Model;
using AccelByte.Sdk.Api.Ugc.Operation;

namespace AccelByte.Sdk.Api.Ugc.Wrapper
{
    public class PublicStagingContent
    {
        private readonly IAccelByteSdk _sdk;

        private string _CustomBasePath = String.Empty;

        public PublicStagingContent(IAccelByteSdk sdk)
        {
            _sdk = sdk;
        }

        public PublicStagingContent(IAccelByteSdk sdk, string customBasePath)
        {
            _sdk = sdk;
            _CustomBasePath = customBasePath;
        }

        #region Operation Builders
        public ListUserStagingContents.ListUserStagingContentsBuilder ListUserStagingContentsOp
        {
            get
            {
                var opBuilder = new Operation.ListUserStagingContents.ListUserStagingContentsBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public GetUserStagingContentByID.GetUserStagingContentByIDBuilder GetUserStagingContentByIDOp
        {
            get
            {
                var opBuilder = new Operation.GetUserStagingContentByID.GetUserStagingContentByIDBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public UpdateStagingContent.UpdateStagingContentBuilder UpdateStagingContentOp
        {
            get
            {
                var opBuilder = new Operation.UpdateStagingContent.UpdateStagingContentBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public DeleteUserStagingContentByID.DeleteUserStagingContentByIDBuilder DeleteUserStagingContentByIDOp
        {
            get
            {
                var opBuilder = new Operation.DeleteUserStagingContentByID.DeleteUserStagingContentByIDBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        #endregion

        public ListUserStagingContents.Response ListUserStagingContents(ListUserStagingContents input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<ListUserStagingContents.Response> ListUserStagingContentsAsync(ListUserStagingContents input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public GetUserStagingContentByID.Response GetUserStagingContentByID(GetUserStagingContentByID input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<GetUserStagingContentByID.Response> GetUserStagingContentByIDAsync(GetUserStagingContentByID input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public GetUserStagingContentByID.Response<T1> GetUserStagingContentByID<T1>(GetUserStagingContentByID input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<GetUserStagingContentByID.Response<T1>> GetUserStagingContentByIDAsync<T1>(GetUserStagingContentByID input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public UpdateStagingContent.Response UpdateStagingContent(UpdateStagingContent input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<UpdateStagingContent.Response> UpdateStagingContentAsync(UpdateStagingContent input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public UpdateStagingContent.Response<T1> UpdateStagingContent<T1>(UpdateStagingContent input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<UpdateStagingContent.Response<T1>> UpdateStagingContentAsync<T1>(UpdateStagingContent input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public DeleteUserStagingContentByID.Response DeleteUserStagingContentByID(DeleteUserStagingContentByID input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<DeleteUserStagingContentByID.Response> DeleteUserStagingContentByIDAsync(DeleteUserStagingContentByID input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
    }
}