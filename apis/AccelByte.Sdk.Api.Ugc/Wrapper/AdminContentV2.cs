// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;

using AccelByte.Sdk.Api.Ugc.Model;
using AccelByte.Sdk.Api.Ugc.Operation;

namespace AccelByte.Sdk.Api.Ugc.Wrapper
{
    public class AdminContentV2
    {
        private readonly IAccelByteSdk _sdk;

        private string _CustomBasePath = String.Empty;

        public AdminContentV2(IAccelByteSdk sdk)
        {
            _sdk = sdk;
        }

        public AdminContentV2(IAccelByteSdk sdk, string customBasePath)
        {
            _sdk = sdk;
            _CustomBasePath = customBasePath;
        }

        #region Operation Builders
        public AdminGetContentByChannelIDV2.AdminGetContentByChannelIDV2Builder AdminGetContentByChannelIDV2Op
        {
            get
            {
                var opBuilder = new Operation.AdminGetContentByChannelIDV2.AdminGetContentByChannelIDV2Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminCreateContentV2.AdminCreateContentV2Builder AdminCreateContentV2Op
        {
            get
            {
                var opBuilder = new Operation.AdminCreateContentV2.AdminCreateContentV2Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminDeleteOfficialContentV2.AdminDeleteOfficialContentV2Builder AdminDeleteOfficialContentV2Op
        {
            get
            {
                var opBuilder = new Operation.AdminDeleteOfficialContentV2.AdminDeleteOfficialContentV2Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminUpdateOfficialContentV2.AdminUpdateOfficialContentV2Builder AdminUpdateOfficialContentV2Op
        {
            get
            {
                var opBuilder = new Operation.AdminUpdateOfficialContentV2.AdminUpdateOfficialContentV2Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminCopyContent.AdminCopyContentBuilder AdminCopyContentOp
        {
            get
            {
                var opBuilder = new Operation.AdminCopyContent.AdminCopyContentBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminUpdateOfficialContentFileLocation.AdminUpdateOfficialContentFileLocationBuilder AdminUpdateOfficialContentFileLocationOp
        {
            get
            {
                var opBuilder = new Operation.AdminUpdateOfficialContentFileLocation.AdminUpdateOfficialContentFileLocationBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminGenerateOfficialContentUploadURLV2.AdminGenerateOfficialContentUploadURLV2Builder AdminGenerateOfficialContentUploadURLV2Op
        {
            get
            {
                var opBuilder = new Operation.AdminGenerateOfficialContentUploadURLV2.AdminGenerateOfficialContentUploadURLV2Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminListContentV2.AdminListContentV2Builder AdminListContentV2Op
        {
            get
            {
                var opBuilder = new Operation.AdminListContentV2.AdminListContentV2Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminBulkGetContentByIDsV2.AdminBulkGetContentByIDsV2Builder AdminBulkGetContentByIDsV2Op
        {
            get
            {
                var opBuilder = new Operation.AdminBulkGetContentByIDsV2.AdminBulkGetContentByIDsV2Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminGetContentBulkByShareCodesV2.AdminGetContentBulkByShareCodesV2Builder AdminGetContentBulkByShareCodesV2Op
        {
            get
            {
                var opBuilder = new Operation.AdminGetContentBulkByShareCodesV2.AdminGetContentBulkByShareCodesV2Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminGetContentByShareCodeV2.AdminGetContentByShareCodeV2Builder AdminGetContentByShareCodeV2Op
        {
            get
            {
                var opBuilder = new Operation.AdminGetContentByShareCodeV2.AdminGetContentByShareCodeV2Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminGetContentByContentIDV2.AdminGetContentByContentIDV2Builder AdminGetContentByContentIDV2Op
        {
            get
            {
                var opBuilder = new Operation.AdminGetContentByContentIDV2.AdminGetContentByContentIDV2Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public RollbackContentVersionV2.RollbackContentVersionV2Builder RollbackContentVersionV2Op
        {
            get
            {
                var opBuilder = new Operation.RollbackContentVersionV2.RollbackContentVersionV2Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminUpdateScreenshotsV2.AdminUpdateScreenshotsV2Builder AdminUpdateScreenshotsV2Op
        {
            get
            {
                var opBuilder = new Operation.AdminUpdateScreenshotsV2.AdminUpdateScreenshotsV2Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminUploadContentScreenshotV2.AdminUploadContentScreenshotV2Builder AdminUploadContentScreenshotV2Op
        {
            get
            {
                var opBuilder = new Operation.AdminUploadContentScreenshotV2.AdminUploadContentScreenshotV2Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminDeleteContentScreenshotV2.AdminDeleteContentScreenshotV2Builder AdminDeleteContentScreenshotV2Op
        {
            get
            {
                var opBuilder = new Operation.AdminDeleteContentScreenshotV2.AdminDeleteContentScreenshotV2Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public ListContentVersionsV2.ListContentVersionsV2Builder ListContentVersionsV2Op
        {
            get
            {
                var opBuilder = new Operation.ListContentVersionsV2.ListContentVersionsV2Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminUpdateContentByShareCodeV2.AdminUpdateContentByShareCodeV2Builder AdminUpdateContentByShareCodeV2Op
        {
            get
            {
                var opBuilder = new Operation.AdminUpdateContentByShareCodeV2.AdminUpdateContentByShareCodeV2Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminDeleteContentByShareCodeV2.AdminDeleteContentByShareCodeV2Builder AdminDeleteContentByShareCodeV2Op
        {
            get
            {
                var opBuilder = new Operation.AdminDeleteContentByShareCodeV2.AdminDeleteContentByShareCodeV2Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminDeleteUserContentV2.AdminDeleteUserContentV2Builder AdminDeleteUserContentV2Op
        {
            get
            {
                var opBuilder = new Operation.AdminDeleteUserContentV2.AdminDeleteUserContentV2Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminUpdateUserContentV2.AdminUpdateUserContentV2Builder AdminUpdateUserContentV2Op
        {
            get
            {
                var opBuilder = new Operation.AdminUpdateUserContentV2.AdminUpdateUserContentV2Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminUpdateUserContentFileLocation.AdminUpdateUserContentFileLocationBuilder AdminUpdateUserContentFileLocationOp
        {
            get
            {
                var opBuilder = new Operation.AdminUpdateUserContentFileLocation.AdminUpdateUserContentFileLocationBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminGenerateUserContentUploadURLV2.AdminGenerateUserContentUploadURLV2Builder AdminGenerateUserContentUploadURLV2Op
        {
            get
            {
                var opBuilder = new Operation.AdminGenerateUserContentUploadURLV2.AdminGenerateUserContentUploadURLV2Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminGetContentByUserIDV2.AdminGetContentByUserIDV2Builder AdminGetContentByUserIDV2Op
        {
            get
            {
                var opBuilder = new Operation.AdminGetContentByUserIDV2.AdminGetContentByUserIDV2Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminUpdateContentHideStatusV2.AdminUpdateContentHideStatusV2Builder AdminUpdateContentHideStatusV2Op
        {
            get
            {
                var opBuilder = new Operation.AdminUpdateContentHideStatusV2.AdminUpdateContentHideStatusV2Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        #endregion

        public AdminGetContentByChannelIDV2.Response AdminGetContentByChannelIDV2(AdminGetContentByChannelIDV2 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminGetContentByChannelIDV2.Response> AdminGetContentByChannelIDV2Async(AdminGetContentByChannelIDV2 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminCreateContentV2.Response AdminCreateContentV2(AdminCreateContentV2 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminCreateContentV2.Response> AdminCreateContentV2Async(AdminCreateContentV2 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public AdminCreateContentV2.Response<T1> AdminCreateContentV2<T1>(AdminCreateContentV2 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminCreateContentV2.Response<T1>> AdminCreateContentV2Async<T1>(AdminCreateContentV2 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminDeleteOfficialContentV2.Response AdminDeleteOfficialContentV2(AdminDeleteOfficialContentV2 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminDeleteOfficialContentV2.Response> AdminDeleteOfficialContentV2Async(AdminDeleteOfficialContentV2 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminUpdateOfficialContentV2.Response AdminUpdateOfficialContentV2(AdminUpdateOfficialContentV2 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminUpdateOfficialContentV2.Response> AdminUpdateOfficialContentV2Async(AdminUpdateOfficialContentV2 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public AdminUpdateOfficialContentV2.Response<T1> AdminUpdateOfficialContentV2<T1>(AdminUpdateOfficialContentV2 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminUpdateOfficialContentV2.Response<T1>> AdminUpdateOfficialContentV2Async<T1>(AdminUpdateOfficialContentV2 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminCopyContent.Response AdminCopyContent(AdminCopyContent input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminCopyContent.Response> AdminCopyContentAsync(AdminCopyContent input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public AdminCopyContent.Response<T1> AdminCopyContent<T1>(AdminCopyContent input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminCopyContent.Response<T1>> AdminCopyContentAsync<T1>(AdminCopyContent input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminUpdateOfficialContentFileLocation.Response AdminUpdateOfficialContentFileLocation(AdminUpdateOfficialContentFileLocation input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminUpdateOfficialContentFileLocation.Response> AdminUpdateOfficialContentFileLocationAsync(AdminUpdateOfficialContentFileLocation input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public AdminUpdateOfficialContentFileLocation.Response<T1> AdminUpdateOfficialContentFileLocation<T1>(AdminUpdateOfficialContentFileLocation input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminUpdateOfficialContentFileLocation.Response<T1>> AdminUpdateOfficialContentFileLocationAsync<T1>(AdminUpdateOfficialContentFileLocation input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminGenerateOfficialContentUploadURLV2.Response AdminGenerateOfficialContentUploadURLV2(AdminGenerateOfficialContentUploadURLV2 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminGenerateOfficialContentUploadURLV2.Response> AdminGenerateOfficialContentUploadURLV2Async(AdminGenerateOfficialContentUploadURLV2 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminListContentV2.Response AdminListContentV2(AdminListContentV2 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminListContentV2.Response> AdminListContentV2Async(AdminListContentV2 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminBulkGetContentByIDsV2.Response AdminBulkGetContentByIDsV2(AdminBulkGetContentByIDsV2 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminBulkGetContentByIDsV2.Response> AdminBulkGetContentByIDsV2Async(AdminBulkGetContentByIDsV2 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public AdminBulkGetContentByIDsV2.Response<T1> AdminBulkGetContentByIDsV2<T1>(AdminBulkGetContentByIDsV2 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminBulkGetContentByIDsV2.Response<T1>> AdminBulkGetContentByIDsV2Async<T1>(AdminBulkGetContentByIDsV2 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminGetContentBulkByShareCodesV2.Response AdminGetContentBulkByShareCodesV2(AdminGetContentBulkByShareCodesV2 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminGetContentBulkByShareCodesV2.Response> AdminGetContentBulkByShareCodesV2Async(AdminGetContentBulkByShareCodesV2 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public AdminGetContentBulkByShareCodesV2.Response<T1> AdminGetContentBulkByShareCodesV2<T1>(AdminGetContentBulkByShareCodesV2 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminGetContentBulkByShareCodesV2.Response<T1>> AdminGetContentBulkByShareCodesV2Async<T1>(AdminGetContentBulkByShareCodesV2 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminGetContentByShareCodeV2.Response AdminGetContentByShareCodeV2(AdminGetContentByShareCodeV2 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminGetContentByShareCodeV2.Response> AdminGetContentByShareCodeV2Async(AdminGetContentByShareCodeV2 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public AdminGetContentByShareCodeV2.Response<T1> AdminGetContentByShareCodeV2<T1>(AdminGetContentByShareCodeV2 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminGetContentByShareCodeV2.Response<T1>> AdminGetContentByShareCodeV2Async<T1>(AdminGetContentByShareCodeV2 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminGetContentByContentIDV2.Response AdminGetContentByContentIDV2(AdminGetContentByContentIDV2 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminGetContentByContentIDV2.Response> AdminGetContentByContentIDV2Async(AdminGetContentByContentIDV2 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public AdminGetContentByContentIDV2.Response<T1> AdminGetContentByContentIDV2<T1>(AdminGetContentByContentIDV2 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminGetContentByContentIDV2.Response<T1>> AdminGetContentByContentIDV2Async<T1>(AdminGetContentByContentIDV2 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public RollbackContentVersionV2.Response RollbackContentVersionV2(RollbackContentVersionV2 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<RollbackContentVersionV2.Response> RollbackContentVersionV2Async(RollbackContentVersionV2 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public RollbackContentVersionV2.Response<T1> RollbackContentVersionV2<T1>(RollbackContentVersionV2 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<RollbackContentVersionV2.Response<T1>> RollbackContentVersionV2Async<T1>(RollbackContentVersionV2 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminUpdateScreenshotsV2.Response AdminUpdateScreenshotsV2(AdminUpdateScreenshotsV2 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminUpdateScreenshotsV2.Response> AdminUpdateScreenshotsV2Async(AdminUpdateScreenshotsV2 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminUploadContentScreenshotV2.Response AdminUploadContentScreenshotV2(AdminUploadContentScreenshotV2 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminUploadContentScreenshotV2.Response> AdminUploadContentScreenshotV2Async(AdminUploadContentScreenshotV2 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminDeleteContentScreenshotV2.Response AdminDeleteContentScreenshotV2(AdminDeleteContentScreenshotV2 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminDeleteContentScreenshotV2.Response> AdminDeleteContentScreenshotV2Async(AdminDeleteContentScreenshotV2 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public ListContentVersionsV2.Response ListContentVersionsV2(ListContentVersionsV2 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<ListContentVersionsV2.Response> ListContentVersionsV2Async(ListContentVersionsV2 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminUpdateContentByShareCodeV2.Response AdminUpdateContentByShareCodeV2(AdminUpdateContentByShareCodeV2 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminUpdateContentByShareCodeV2.Response> AdminUpdateContentByShareCodeV2Async(AdminUpdateContentByShareCodeV2 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public AdminUpdateContentByShareCodeV2.Response<T1> AdminUpdateContentByShareCodeV2<T1>(AdminUpdateContentByShareCodeV2 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminUpdateContentByShareCodeV2.Response<T1>> AdminUpdateContentByShareCodeV2Async<T1>(AdminUpdateContentByShareCodeV2 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminDeleteContentByShareCodeV2.Response AdminDeleteContentByShareCodeV2(AdminDeleteContentByShareCodeV2 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminDeleteContentByShareCodeV2.Response> AdminDeleteContentByShareCodeV2Async(AdminDeleteContentByShareCodeV2 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminDeleteUserContentV2.Response AdminDeleteUserContentV2(AdminDeleteUserContentV2 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminDeleteUserContentV2.Response> AdminDeleteUserContentV2Async(AdminDeleteUserContentV2 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminUpdateUserContentV2.Response AdminUpdateUserContentV2(AdminUpdateUserContentV2 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminUpdateUserContentV2.Response> AdminUpdateUserContentV2Async(AdminUpdateUserContentV2 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public AdminUpdateUserContentV2.Response<T1> AdminUpdateUserContentV2<T1>(AdminUpdateUserContentV2 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminUpdateUserContentV2.Response<T1>> AdminUpdateUserContentV2Async<T1>(AdminUpdateUserContentV2 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminUpdateUserContentFileLocation.Response AdminUpdateUserContentFileLocation(AdminUpdateUserContentFileLocation input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminUpdateUserContentFileLocation.Response> AdminUpdateUserContentFileLocationAsync(AdminUpdateUserContentFileLocation input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public AdminUpdateUserContentFileLocation.Response<T1> AdminUpdateUserContentFileLocation<T1>(AdminUpdateUserContentFileLocation input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminUpdateUserContentFileLocation.Response<T1>> AdminUpdateUserContentFileLocationAsync<T1>(AdminUpdateUserContentFileLocation input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminGenerateUserContentUploadURLV2.Response AdminGenerateUserContentUploadURLV2(AdminGenerateUserContentUploadURLV2 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminGenerateUserContentUploadURLV2.Response> AdminGenerateUserContentUploadURLV2Async(AdminGenerateUserContentUploadURLV2 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminGetContentByUserIDV2.Response AdminGetContentByUserIDV2(AdminGetContentByUserIDV2 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminGetContentByUserIDV2.Response> AdminGetContentByUserIDV2Async(AdminGetContentByUserIDV2 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminUpdateContentHideStatusV2.Response AdminUpdateContentHideStatusV2(AdminUpdateContentHideStatusV2 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminUpdateContentHideStatusV2.Response> AdminUpdateContentHideStatusV2Async(AdminUpdateContentHideStatusV2 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }

        public AdminUpdateContentHideStatusV2.Response<T1> AdminUpdateContentHideStatusV2<T1>(AdminUpdateContentHideStatusV2 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminUpdateContentHideStatusV2.Response<T1>> AdminUpdateContentHideStatusV2Async<T1>(AdminUpdateContentHideStatusV2 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
    }
}