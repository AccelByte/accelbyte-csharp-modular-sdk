// Copyright (c) 2023 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using System;

using AccelByte.Sdk.Core;

using AccelByte.Sdk.Api.Ugc;

namespace AccelByte.Sdk.Api.Ugc
{
    public class UgcApi : ISdkApi
    {
        private IAccelByteSdk _Sdk;

        public Wrapper.AdminChannel AdminChannel
        {
            get
            {
                if (_AdminChannel == null)
                    _AdminChannel = new Wrapper.AdminChannel(_Sdk);
                return _AdminChannel;
            }
        }
        private Wrapper.AdminChannel? _AdminChannel = null;

        public Wrapper.AdminContent AdminContent
        {
            get
            {
                if (_AdminContent == null)
                    _AdminContent = new Wrapper.AdminContent(_Sdk);
                return _AdminContent;
            }
        }
        private Wrapper.AdminContent? _AdminContent = null;

        public Wrapper.AdminGroup AdminGroup
        {
            get
            {
                if (_AdminGroup == null)
                    _AdminGroup = new Wrapper.AdminGroup(_Sdk);
                return _AdminGroup;
            }
        }
        private Wrapper.AdminGroup? _AdminGroup = null;

        public Wrapper.AdminTag AdminTag
        {
            get
            {
                if (_AdminTag == null)
                    _AdminTag = new Wrapper.AdminTag(_Sdk);
                return _AdminTag;
            }
        }
        private Wrapper.AdminTag? _AdminTag = null;

        public Wrapper.AdminType AdminType
        {
            get
            {
                if (_AdminType == null)
                    _AdminType = new Wrapper.AdminType(_Sdk);
                return _AdminType;
            }
        }
        private Wrapper.AdminType? _AdminType = null;

        public Wrapper.Anonymization Anonymization
        {
            get
            {
                if (_Anonymization == null)
                    _Anonymization = new Wrapper.Anonymization(_Sdk);
                return _Anonymization;
            }
        }
        private Wrapper.Anonymization? _Anonymization = null;

        public Wrapper.PublicContentLegacy PublicContentLegacy
        {
            get
            {
                if (_PublicContentLegacy == null)
                    _PublicContentLegacy = new Wrapper.PublicContentLegacy(_Sdk);
                return _PublicContentLegacy;
            }
        }
        private Wrapper.PublicContentLegacy? _PublicContentLegacy = null;

        public Wrapper.PublicFollow PublicFollow
        {
            get
            {
                if (_PublicFollow == null)
                    _PublicFollow = new Wrapper.PublicFollow(_Sdk);
                return _PublicFollow;
            }
        }
        private Wrapper.PublicFollow? _PublicFollow = null;

        public Wrapper.PublicLikeLegacy PublicLikeLegacy
        {
            get
            {
                if (_PublicLikeLegacy == null)
                    _PublicLikeLegacy = new Wrapper.PublicLikeLegacy(_Sdk);
                return _PublicLikeLegacy;
            }
        }
        private Wrapper.PublicLikeLegacy? _PublicLikeLegacy = null;

        public Wrapper.PublicDownloadCountLegacy PublicDownloadCountLegacy
        {
            get
            {
                if (_PublicDownloadCountLegacy == null)
                    _PublicDownloadCountLegacy = new Wrapper.PublicDownloadCountLegacy(_Sdk);
                return _PublicDownloadCountLegacy;
            }
        }
        private Wrapper.PublicDownloadCountLegacy? _PublicDownloadCountLegacy = null;

        public Wrapper.PublicTag PublicTag
        {
            get
            {
                if (_PublicTag == null)
                    _PublicTag = new Wrapper.PublicTag(_Sdk);
                return _PublicTag;
            }
        }
        private Wrapper.PublicTag? _PublicTag = null;

        public Wrapper.PublicType PublicType
        {
            get
            {
                if (_PublicType == null)
                    _PublicType = new Wrapper.PublicType(_Sdk);
                return _PublicType;
            }
        }
        private Wrapper.PublicType? _PublicType = null;

        public Wrapper.PublicCreator PublicCreator
        {
            get
            {
                if (_PublicCreator == null)
                    _PublicCreator = new Wrapper.PublicCreator(_Sdk);
                return _PublicCreator;
            }
        }
        private Wrapper.PublicCreator? _PublicCreator = null;

        public Wrapper.PublicChannel PublicChannel
        {
            get
            {
                if (_PublicChannel == null)
                    _PublicChannel = new Wrapper.PublicChannel(_Sdk);
                return _PublicChannel;
            }
        }
        private Wrapper.PublicChannel? _PublicChannel = null;

        public Wrapper.PublicGroup PublicGroup
        {
            get
            {
                if (_PublicGroup == null)
                    _PublicGroup = new Wrapper.PublicGroup(_Sdk);
                return _PublicGroup;
            }
        }
        private Wrapper.PublicGroup? _PublicGroup = null;

        public Wrapper.AdminContentV2 AdminContentV2
        {
            get
            {
                if (_AdminContentV2 == null)
                    _AdminContentV2 = new Wrapper.AdminContentV2(_Sdk);
                return _AdminContentV2;
            }
        }
        private Wrapper.AdminContentV2? _AdminContentV2 = null;

        public Wrapper.AdminConfig AdminConfig
        {
            get
            {
                if (_AdminConfig == null)
                    _AdminConfig = new Wrapper.AdminConfig(_Sdk);
                return _AdminConfig;
            }
        }
        private Wrapper.AdminConfig? _AdminConfig = null;

        public Wrapper.AdminStagingContent AdminStagingContent
        {
            get
            {
                if (_AdminStagingContent == null)
                    _AdminStagingContent = new Wrapper.AdminStagingContent(_Sdk);
                return _AdminStagingContent;
            }
        }
        private Wrapper.AdminStagingContent? _AdminStagingContent = null;

        public Wrapper.PublicContentV2 PublicContentV2
        {
            get
            {
                if (_PublicContentV2 == null)
                    _PublicContentV2 = new Wrapper.PublicContentV2(_Sdk);
                return _PublicContentV2;
            }
        }
        private Wrapper.PublicContentV2? _PublicContentV2 = null;

        public Wrapper.PublicDownloadCountV2 PublicDownloadCountV2
        {
            get
            {
                if (_PublicDownloadCountV2 == null)
                    _PublicDownloadCountV2 = new Wrapper.PublicDownloadCountV2(_Sdk);
                return _PublicDownloadCountV2;
            }
        }
        private Wrapper.PublicDownloadCountV2? _PublicDownloadCountV2 = null;

        public Wrapper.PublicLikeV2 PublicLikeV2
        {
            get
            {
                if (_PublicLikeV2 == null)
                    _PublicLikeV2 = new Wrapper.PublicLikeV2(_Sdk);
                return _PublicLikeV2;
            }
        }
        private Wrapper.PublicLikeV2? _PublicLikeV2 = null;

        public Wrapper.PublicStagingContent PublicStagingContent
        {
            get
            {
                if (_PublicStagingContent == null)
                    _PublicStagingContent = new Wrapper.PublicStagingContent(_Sdk);
                return _PublicStagingContent;
            }
        }
        private Wrapper.PublicStagingContent? _PublicStagingContent = null;

        internal UgcApi(IAccelByteSdk sdk)
        {
            _Sdk = sdk;
        }
    }
}

namespace AccelByte.Sdk.Api
{
    public static class UgcApi_SdkExts
    {
        public static UgcApi GetUgcApi(this IAccelByteSdk sdk)
        {
            return sdk.GetApi<UgcApi>("ugc", () =>
            {
                return new UgcApi(sdk);
            });
        }
    }
}