// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Ugc.Model;

namespace AccelByte.Sdk.Api.Ugc.Operation
{
    /// <summary>
    /// RollbackContentVersion
    ///
    /// Required permission: ADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENT [UPDATE]
    /// Rollback content's payload to specified version.
    /// </summary>
    public class RollbackContentVersion : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static RollbackContentVersionBuilder Builder { get => new RollbackContentVersionBuilder(); }

        public class RollbackContentVersionBuilder
            : OperationBuilder<RollbackContentVersionBuilder>
        {





            internal RollbackContentVersionBuilder() { }

            internal RollbackContentVersionBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }






            public RollbackContentVersion Build(
                string contentId,
                string namespace_,
                string versionId
            )
            {
                RollbackContentVersion op = new RollbackContentVersion(this,
                    contentId,
                    namespace_,
                    versionId
                );

                op.SetBaseFields<RollbackContentVersionBuilder>(this);
                return op;
            }

            public Model.ModelsContentDownloadResponse? Execute(
                string contentId,
                string namespace_,
                string versionId
            )
            {
                RollbackContentVersion op = Build(
                    contentId,
                    namespace_,
                    versionId
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
            public async Task<Model.ModelsContentDownloadResponse?> ExecuteAsync(
                string contentId,
                string namespace_,
                string versionId
            )
            {
                RollbackContentVersion op = Build(
                    contentId,
                    namespace_,
                    versionId
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }

            public Model.ModelsContentDownloadResponse<T1>? Execute<T1>(
                string contentId,
                string namespace_,
                string versionId
            )
            {
                RollbackContentVersion op = Build(
                    contentId,
                    namespace_,
                    versionId
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
            public async Task<Model.ModelsContentDownloadResponse<T1>?> ExecuteAsync<T1>(
                string contentId,
                string namespace_,
                string versionId
            )
            {
                RollbackContentVersion op = Build(
                    contentId,
                    namespace_,
                    versionId
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
        }

        private RollbackContentVersion(RollbackContentVersionBuilder builder,
            string contentId,
            string namespace_,
            string versionId
        )
        {
            PathParams["contentId"] = contentId;
            PathParams["namespace"] = namespace_;
            PathParams["versionId"] = versionId;







            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public RollbackContentVersion(
            string contentId,
            string namespace_,
            string versionId
        )
        {
            PathParams["contentId"] = contentId;
            PathParams["namespace"] = namespace_;
            PathParams["versionId"] = versionId;







            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/ugc/v1/admin/namespaces/{namespace}/contents/{contentId}/rollback/{versionId}";

        public override HttpMethod Method => HttpMethod.Put;

        public override List<string> Consumes => new() { "*/*" };

        public override List<string> Produces => new() { "application/json" };

        public Model.ModelsContentDownloadResponse? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                return JsonSerializer.Deserialize<Model.ModelsContentDownloadResponse>(payload, ResponseJsonOptions);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.ModelsContentDownloadResponse>(payload, ResponseJsonOptions);
            }

            var payloadString = payload.ReadToString();

            throw new HttpResponseException(code, payloadString);
        }

        public Model.ModelsContentDownloadResponse<T1>? ParseResponse<T1>(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                return JsonSerializer.Deserialize<Model.ModelsContentDownloadResponse<T1>>(payload, ResponseJsonOptions);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.ModelsContentDownloadResponse<T1>>(payload, ResponseJsonOptions);
            }

            var payloadString = payload.ReadToString();
            throw new HttpResponseException(code, payloadString);
        }
    }

}