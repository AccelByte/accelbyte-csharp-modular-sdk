// Copyright (c) 2022-2023 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Lobby.Model;

namespace AccelByte.Sdk.Api.Lobby.Operation
{
    /// <summary>
    /// adminVerifyMessageProfanityResponse
    ///
    /// Required permission : `ADMIN:NAMESPACE:{namespace}:PROFANITY [READ]` with scope `social`
    /// 
    /// verify a message directly from the UI or other services
    /// </summary>
    public class AdminVerifyMessageProfanityResponse : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static AdminVerifyMessageProfanityResponseBuilder Builder { get => new AdminVerifyMessageProfanityResponseBuilder(); }

        public class AdminVerifyMessageProfanityResponseBuilder
            : OperationBuilder<AdminVerifyMessageProfanityResponseBuilder>
        {





            internal AdminVerifyMessageProfanityResponseBuilder() { }

            internal AdminVerifyMessageProfanityResponseBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }






            public AdminVerifyMessageProfanityResponse Build(
                ModelsAdminVerifyMessageProfanityRequest body,
                string namespace_
            )
            {
                AdminVerifyMessageProfanityResponse op = new AdminVerifyMessageProfanityResponse(this,
                    body,                    
                    namespace_                    
                );
                op.PreferredSecurityMethod = PreferredSecurityMethod;

                return op;
            }

            public Model.ModelsAdminVerifyMessageProfanityResponse? Execute(
                ModelsAdminVerifyMessageProfanityRequest body,
                string namespace_
            )
            {
                AdminVerifyMessageProfanityResponse op = Build(
                    body,
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
        }

        private AdminVerifyMessageProfanityResponse(AdminVerifyMessageProfanityResponseBuilder builder,
            ModelsAdminVerifyMessageProfanityRequest body,
            string namespace_
        )
        {
            PathParams["namespace"] = namespace_;
            
            

            
            
            BodyParams = body;
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public AdminVerifyMessageProfanityResponse(
            string namespace_,            
            Model.ModelsAdminVerifyMessageProfanityRequest body            
        )
        {
            PathParams["namespace"] = namespace_;
            
            

            
            
            BodyParams = body;
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/lobby/v1/admin/profanity/namespaces/{namespace}/verify";

        public override HttpMethod Method => HttpMethod.Post;

        public override List<string> Consumes => new() { "application/json" };

        public override List<string> Produces => new() { "application/json" };        
        
        public Model.ModelsAdminVerifyMessageProfanityResponse? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {            
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                return JsonSerializer.Deserialize<Model.ModelsAdminVerifyMessageProfanityResponse>(payload);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.ModelsAdminVerifyMessageProfanityResponse>(payload);
            }
            
            var payloadString = payload.ReadToString();
            
            throw new HttpResponseException(code, payloadString);
        }
    }

}