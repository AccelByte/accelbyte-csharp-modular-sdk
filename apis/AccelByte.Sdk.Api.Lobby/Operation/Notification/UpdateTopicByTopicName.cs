// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Lobby.Model;

namespace AccelByte.Sdk.Api.Lobby.Operation
{
    /// <summary>
    /// updateTopicByTopicName
    ///
    /// update topic information by topic name.
    /// 
    /// topic should be alphabets, no special char except underscore, uppercase and no spacing. for example: TOPIC_TEST.
    /// Already existing topic can not be created
    /// </summary>
    public class UpdateTopicByTopicName : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static UpdateTopicByTopicNameBuilder Builder { get => new UpdateTopicByTopicNameBuilder(); }

        public class UpdateTopicByTopicNameBuilder
            : OperationBuilder<UpdateTopicByTopicNameBuilder>
        {





            internal UpdateTopicByTopicNameBuilder() { }

            internal UpdateTopicByTopicNameBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }






            public UpdateTopicByTopicName Build(
                ModelUpdateTopicRequest body,
                string namespace_,
                string topic
            )
            {
                UpdateTopicByTopicName op = new UpdateTopicByTopicName(this,
                    body,
                    namespace_,
                    topic
                );

                op.SetBaseFields<UpdateTopicByTopicNameBuilder>(this);
                return op;
            }

            public UpdateTopicByTopicName.Response Execute(
                ModelUpdateTopicRequest body,
                string namespace_,
                string topic
            )
            {
                UpdateTopicByTopicName op = Build(
                    body,
                    namespace_,
                    topic
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
            public async Task<UpdateTopicByTopicName.Response> ExecuteAsync(
                ModelUpdateTopicRequest body,
                string namespace_,
                string topic
            )
            {
                UpdateTopicByTopicName op = Build(
                    body,
                    namespace_,
                    topic
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
        }

        private UpdateTopicByTopicName(UpdateTopicByTopicNameBuilder builder,
            ModelUpdateTopicRequest body,
            string namespace_,
            string topic
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["topic"] = topic;





            BodyParams = body;


            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        #region Response Part        
        public class Response : ApiResponse
        {

            public RestapiErrorResponseBody? Error401 { get; set; } = null;

            public RestapiErrorResponseBody? Error403 { get; set; } = null;

            public RestapiErrorResponseBody? Error404 { get; set; } = null;

            public RestapiErrorResponseBody? Error500 { get; set; } = null;


            protected override string GetFullOperationId() => "Lobby::Notification::UpdateTopicByTopicName";
        }

        #endregion

        public UpdateTopicByTopicName(
            string namespace_,
            string topic,
            Model.ModelUpdateTopicRequest body
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["topic"] = topic;





            BodyParams = body;


            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/notification/namespaces/{namespace}/topics/{topic}";

        public override HttpMethod Method => HttpMethod.Put;

        public override List<string> Consumes => new() { "application/json" };

        public override List<string> Produces => new() { "application/json" };

        public UpdateTopicByTopicName.Response ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            var response = new UpdateTopicByTopicName.Response()
            {
                StatusCode = code,
                ContentType = contentType,
                IsSuccess = true
            };

            if (code == (HttpStatusCode)401)

            {
                response.Error401 = JsonSerializer.Deserialize<RestapiErrorResponseBody>(payload, ResponseJsonOptions);
                response.Error = response.Error401!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)403)

            {
                response.Error403 = JsonSerializer.Deserialize<RestapiErrorResponseBody>(payload, ResponseJsonOptions);
                response.Error = response.Error403!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)404)

            {
                response.Error404 = JsonSerializer.Deserialize<RestapiErrorResponseBody>(payload, ResponseJsonOptions);
                response.Error = response.Error404!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)500)

            {
                response.Error500 = JsonSerializer.Deserialize<RestapiErrorResponseBody>(payload, ResponseJsonOptions);
                response.Error = response.Error500!.TranslateToApiError();
            }

            return response;
        }
    }

}