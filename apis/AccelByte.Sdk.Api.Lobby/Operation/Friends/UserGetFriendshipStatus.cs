// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Lobby.Model;

namespace AccelByte.Sdk.Api.Lobby.Operation
{
    /// <summary>
    /// userGetFriendshipStatus
    ///
    /// User get friendship status.
    /// Code: 0 - Message: "not friend"
    /// Code: 1 - Message: "outgoing"
    /// Code: 2 - Message: "incoming"
    /// Code: 3 - Message: "friend"
    /// </summary>
    public class UserGetFriendshipStatus : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static UserGetFriendshipStatusBuilder Builder { get => new UserGetFriendshipStatusBuilder(); }

        public class UserGetFriendshipStatusBuilder
            : OperationBuilder<UserGetFriendshipStatusBuilder>
        {





            internal UserGetFriendshipStatusBuilder() { }

            internal UserGetFriendshipStatusBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }






            public UserGetFriendshipStatus Build(
                string friendId,
                string namespace_
            )
            {
                UserGetFriendshipStatus op = new UserGetFriendshipStatus(this,
                    friendId,
                    namespace_
                );

                op.SetBaseFields<UserGetFriendshipStatusBuilder>(this);
                return op;
            }

            public Model.ModelUserGetFriendshipStatusResponse? Execute(
                string friendId,
                string namespace_
            )
            {
                UserGetFriendshipStatus op = Build(
                    friendId,
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
            public async Task<Model.ModelUserGetFriendshipStatusResponse?> ExecuteAsync(
                string friendId,
                string namespace_
            )
            {
                UserGetFriendshipStatus op = Build(
                    friendId,
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
        }

        private UserGetFriendshipStatus(UserGetFriendshipStatusBuilder builder,
            string friendId,
            string namespace_
        )
        {
            PathParams["friendId"] = friendId;
            PathParams["namespace"] = namespace_;







            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public UserGetFriendshipStatus(
            string friendId,
            string namespace_
        )
        {
            PathParams["friendId"] = friendId;
            PathParams["namespace"] = namespace_;







            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/friends/namespaces/{namespace}/me/status/{friendId}";

        public override HttpMethod Method => HttpMethod.Get;

        public override List<string> Consumes => new() { };

        public override List<string> Produces => new() { "application/json" };

        public Model.ModelUserGetFriendshipStatusResponse? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                return JsonSerializer.Deserialize<Model.ModelUserGetFriendshipStatusResponse>(payload, ResponseJsonOptions);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.ModelUserGetFriendshipStatusResponse>(payload, ResponseJsonOptions);
            }

            var payloadString = payload.ReadToString();

            throw new HttpResponseException(code, payloadString);
        }
    }

}