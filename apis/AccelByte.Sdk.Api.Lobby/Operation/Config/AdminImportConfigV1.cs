// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Lobby.Model;

namespace AccelByte.Sdk.Api.Lobby.Operation
{
    /// <summary>
    /// adminImportConfigV1
    ///
    /// 
    /// Import config configuration from file. The existing configuration will be replaced.
    /// The json file to import can be obtained from the /export endpoint.
    /// 
    /// MaxDSWaitTime value is cannot less than 1, if null it will use default value in 120 (second)
    /// </summary>
    public class AdminImportConfigV1 : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static AdminImportConfigV1Builder Builder { get => new AdminImportConfigV1Builder(); }

        public class AdminImportConfigV1Builder
            : OperationBuilder<AdminImportConfigV1Builder>
        {



            public Stream? File { get; set; }



            internal AdminImportConfigV1Builder() { }

            internal AdminImportConfigV1Builder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }




            public AdminImportConfigV1Builder SetFile(Stream _file)
            {
                File = _file;
                return this;
            }



            public AdminImportConfigV1 Build(
                string namespace_
            )
            {
                AdminImportConfigV1 op = new AdminImportConfigV1(this,
                    namespace_
                );

                op.SetBaseFields<AdminImportConfigV1Builder>(this);
                return op;
            }

            public AdminImportConfigV1.Response Execute(
                string namespace_
            )
            {
                AdminImportConfigV1 op = Build(
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
            public async Task<AdminImportConfigV1.Response> ExecuteAsync(
                string namespace_
            )
            {
                AdminImportConfigV1 op = Build(
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
        }

        private AdminImportConfigV1(AdminImportConfigV1Builder builder,
            string namespace_
        )
        {
            PathParams["namespace"] = namespace_;


            if (builder.File is not null) FormParams["file"] = builder.File;





            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        #region Response Part        
        public class Response : ApiResponse<Model.ModelsImportConfigResponse>
        {

            public ResponseError? Error401 { get; set; } = null;

            public ResponseError? Error403 { get; set; } = null;

            public ResponseError? Error500 { get; set; } = null;


            protected override string GetFullOperationId() => "Lobby::Config::AdminImportConfigV1";
        }

        #endregion

        public AdminImportConfigV1(
            string namespace_,
            Stream? file
        )
        {
            PathParams["namespace"] = namespace_;


            if (file is not null) FormParams["file"] = file;





            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/lobby/v1/admin/config/namespaces/{namespace}/import";

        public override HttpMethod Method => HttpMethod.Post;

        public override List<string> Consumes => new() { "multipart/form-data" };

        public override List<string> Produces => new() { "application/json" };

        public AdminImportConfigV1.Response ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            var response = new AdminImportConfigV1.Response()
            {
                StatusCode = code,
                ContentType = contentType
            };

            if (code == (HttpStatusCode)204)
            {
                response.IsSuccess = true;
            }
            else if ((code == (HttpStatusCode)201) || (code == (HttpStatusCode)202) || (code == (HttpStatusCode)200))
            {
                response.Data = JsonSerializer.Deserialize<Model.ModelsImportConfigResponse>(payload, ResponseJsonOptions);
                response.IsSuccess = true;
            }
            else if (code == (HttpStatusCode)401)
            {
                response.Error401 = JsonSerializer.Deserialize<ResponseError>(payload, ResponseJsonOptions);
                response.Error = response.Error401!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)403)
            {
                response.Error403 = JsonSerializer.Deserialize<ResponseError>(payload, ResponseJsonOptions);
                response.Error = response.Error403!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)500)
            {
                response.Error500 = JsonSerializer.Deserialize<ResponseError>(payload, ResponseJsonOptions);
                response.Error = response.Error500!.TranslateToApiError();
            }

            return response;
        }
    }

}