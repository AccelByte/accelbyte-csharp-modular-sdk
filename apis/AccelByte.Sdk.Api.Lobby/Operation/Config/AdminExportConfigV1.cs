// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Lobby.Model;

namespace AccelByte.Sdk.Api.Lobby.Operation
{
    /// <summary>
    /// adminExportConfigV1
    ///
    /// 
    /// Export lobby configuration to a json file. The file can then be imported from the /import endpoint.
    /// 
    /// JSON Schema of the exported file:
    /// {
    /// "required": [
    /// "namespace",
    /// "entitlementItemID",
    /// "chatRateLimitDuration",
    /// "unregisterDelay",
    /// "generalRateLimitDuration",
    /// "autoKickOnDisconnectDelay",
    /// "chatRateLimitBurst",
    /// "generalRateLimitBurst",
    /// "maxPartyMember",
    /// "autoKickOnDisconnect",
    /// "profanityFilter",
    /// "enableChat",
    /// "entitlementCheck",
    /// "cancelTicketOnDisconnect",
    /// "concurrentUsersLimit",
    /// "readyConsentTimeout",
    /// "disableInvitationOnJoinParty",
    /// "allowJoinPartyDuringMatchmaking",
    /// "allowInviteNonConnectedUser",
    /// "keepPresenceActivityOnDisconnect",
    /// "maxDSWaitTime",
    /// "maxFriendsLimit",
    /// "requestMetadataMaxSize"
    /// ],
    /// "properties": {
    /// "allowInviteNonConnectedUser": {
    /// "type": "boolean"
    /// },
    /// "allowJoinPartyDuringMatchmaking": {
    /// "type": "boolean"
    /// },
    /// "autoKickOnDisconnect": {
    /// "type": "boolean"
    /// },
    /// "autoKickOnDisconnectDelay": {
    /// "type": "integer",
    /// "format": "int64"
    /// },
    /// "cancelTicketOnDisconnect": {
    /// "type": "boolean"
    /// },
    /// "chatRateLimitBurst": {
    /// "type": "integer",
    /// "format": "int32"
    /// },
    /// "chatRateLimitDuration": {
    /// "type": "integer",
    /// "format": "int64"
    /// },
    /// "concurrentUsersLimit": {
    /// "type": "integer",
    /// "format": "int32"
    /// },
    /// "disableInvitationOnJoinParty": {
    /// "type": "boolean"
    /// },
    /// "enableChat": {
    /// "type": "boolean"
    /// },
    /// "entitlementCheck": {
    /// "type": "boolean"
    /// },
    /// "entitlementItemID": {
    /// "type": "string"
    /// },
    /// "generalRateLimitBurst": {
    /// "type": "integer",
    /// "format": "int32"
    /// },
    /// "generalRateLimitDuration": {
    /// "type": "integer",
    /// "format": "int64"
    /// },
    /// "keepPresenceActivityOnDisconnect": {
    /// "type": "boolean"
    /// },
    /// "maxDSWaitTime": {
    /// "type": "integer",
    /// "format": "int64"
    /// },
    /// "maxFriendsLimit": {
    /// "type": "integer",
    /// "format": "int32"
    /// },
    /// "maxPartyMember": {
    /// "type": "integer",
    /// "format": "int32"
    /// },
    /// "namespace": {
    /// "type": "string"
    /// },
    /// "profanityFilter": {
    /// "type": "boolean"
    /// },
    /// "readyConsentTimeout": {
    /// "type": "integer",
    /// "format": "int64"
    /// },
    /// "requestMetadataMaxSize": {
    /// "type": "integer",
    /// "format": "int32"
    /// },
    /// "unregisterDelay": {
    /// "type": "integer",
    /// "format": "int64"
    /// }
    /// }
    /// }
    /// </summary>
    public class AdminExportConfigV1 : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static AdminExportConfigV1Builder Builder { get => new AdminExportConfigV1Builder(); }

        public class AdminExportConfigV1Builder
            : OperationBuilder<AdminExportConfigV1Builder>
        {





            internal AdminExportConfigV1Builder() { }

            internal AdminExportConfigV1Builder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }






            public AdminExportConfigV1 Build(
                string namespace_
            )
            {
                AdminExportConfigV1 op = new AdminExportConfigV1(this,
                    namespace_
                );

                op.SetBaseFields<AdminExportConfigV1Builder>(this);
                return op;
            }

            public AdminExportConfigV1.Response Execute(
                string namespace_
            )
            {
                AdminExportConfigV1 op = Build(
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
            public async Task<AdminExportConfigV1.Response> ExecuteAsync(
                string namespace_
            )
            {
                AdminExportConfigV1 op = Build(
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
        }

        private AdminExportConfigV1(AdminExportConfigV1Builder builder,
            string namespace_
        )
        {
            PathParams["namespace"] = namespace_;







            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        #region Response Part        
        public class Response : ApiResponse<Stream>
        {

            public ResponseError? Error401 { get; set; } = null;

            public ResponseError? Error403 { get; set; } = null;

            public ResponseError? Error500 { get; set; } = null;


            protected override string GetFullOperationId() => "Lobby::Config::AdminExportConfigV1";
        }

        #endregion

        public AdminExportConfigV1(
            string namespace_
        )
        {
            PathParams["namespace"] = namespace_;







            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/lobby/v1/admin/config/namespaces/{namespace}/export";

        public override HttpMethod Method => HttpMethod.Get;

        public override List<string> Consumes => new() { };

        public override List<string> Produces => new() { "application/json" };

        public AdminExportConfigV1.Response ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            var response = new AdminExportConfigV1.Response()
            {
                StatusCode = code,
                ContentType = contentType
            };

            if (code == (HttpStatusCode)204)
            {
                response.IsSuccess = true;
            }
            else if ((code == (HttpStatusCode)201) || (code == (HttpStatusCode)202) || (code == (HttpStatusCode)200))
            {
                response.Data = payload;
                response.IsSuccess = true;
            }
            else if (code == (HttpStatusCode)401)
            {
                response.Error401 = JsonSerializer.Deserialize<ResponseError>(payload, ResponseJsonOptions);
                response.Error = response.Error401!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)403)
            {
                response.Error403 = JsonSerializer.Deserialize<ResponseError>(payload, ResponseJsonOptions);
                response.Error = response.Error403!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)500)
            {
                response.Error500 = JsonSerializer.Deserialize<ResponseError>(payload, ResponseJsonOptions);
                response.Error = response.Error500!.TranslateToApiError();
            }

            return response;
        }
    }

}