// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;

using AccelByte.Sdk.Api.Lobby.Model;
using AccelByte.Sdk.Api.Lobby.Operation;

namespace AccelByte.Sdk.Api.Lobby.Wrapper
{
    public class ThirdParty
    {
        private readonly IAccelByteSdk _sdk;

        private string _CustomBasePath = String.Empty;

        public ThirdParty(IAccelByteSdk sdk)
        {
            _sdk = sdk;
        }

        public ThirdParty(IAccelByteSdk sdk, string customBasePath)
        {
            _sdk = sdk;
            _CustomBasePath = customBasePath;
        }

        #region Operation Builders
        public AdminGetThirdPartyConfig.AdminGetThirdPartyConfigBuilder AdminGetThirdPartyConfigOp
        {
            get
            {
                var opBuilder = new Operation.AdminGetThirdPartyConfig.AdminGetThirdPartyConfigBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminUpdateThirdPartyConfig.AdminUpdateThirdPartyConfigBuilder AdminUpdateThirdPartyConfigOp
        {
            get
            {
                var opBuilder = new Operation.AdminUpdateThirdPartyConfig.AdminUpdateThirdPartyConfigBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminCreateThirdPartyConfig.AdminCreateThirdPartyConfigBuilder AdminCreateThirdPartyConfigOp
        {
            get
            {
                var opBuilder = new Operation.AdminCreateThirdPartyConfig.AdminCreateThirdPartyConfigBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminDeleteThirdPartyConfig.AdminDeleteThirdPartyConfigBuilder AdminDeleteThirdPartyConfigOp
        {
            get
            {
                var opBuilder = new Operation.AdminDeleteThirdPartyConfig.AdminDeleteThirdPartyConfigBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        #endregion

        public Model.ModelsGetConfigResponse? AdminGetThirdPartyConfig(AdminGetThirdPartyConfig input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ModelsGetConfigResponse?> AdminGetThirdPartyConfigAsync(AdminGetThirdPartyConfig input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ModelsUpdateConfigResponse? AdminUpdateThirdPartyConfig(AdminUpdateThirdPartyConfig input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ModelsUpdateConfigResponse?> AdminUpdateThirdPartyConfigAsync(AdminUpdateThirdPartyConfig input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ModelsCreateConfigResponse? AdminCreateThirdPartyConfig(AdminCreateThirdPartyConfig input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ModelsCreateConfigResponse?> AdminCreateThirdPartyConfigAsync(AdminCreateThirdPartyConfig input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public string? AdminDeleteThirdPartyConfig(AdminDeleteThirdPartyConfig input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<string?> AdminDeleteThirdPartyConfigAsync(AdminDeleteThirdPartyConfig input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
    }
}