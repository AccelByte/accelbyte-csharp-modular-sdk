// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;

using AccelByte.Sdk.Api.Lobby.Model;
using AccelByte.Sdk.Api.Lobby.Operation;

namespace AccelByte.Sdk.Api.Lobby.Wrapper
{
    public class Player
    {
        private readonly IAccelByteSdk _sdk;

        private string _CustomBasePath = String.Empty;

        public Player(IAccelByteSdk sdk)
        {
            _sdk = sdk;
        }

        public Player(IAccelByteSdk sdk, string customBasePath)
        {
            _sdk = sdk;
            _CustomBasePath = customBasePath;
        }

        #region Operation Builders
        public AdminGetLobbyCCU.AdminGetLobbyCCUBuilder AdminGetLobbyCCUOp
        {
            get
            {
                var opBuilder = new Operation.AdminGetLobbyCCU.AdminGetLobbyCCUBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminGetBulkPlayerBlockedPlayersV1.AdminGetBulkPlayerBlockedPlayersV1Builder AdminGetBulkPlayerBlockedPlayersV1Op
        {
            get
            {
                var opBuilder = new Operation.AdminGetBulkPlayerBlockedPlayersV1.AdminGetBulkPlayerBlockedPlayersV1Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminGetAllPlayerSessionAttribute.AdminGetAllPlayerSessionAttributeBuilder AdminGetAllPlayerSessionAttributeOp
        {
            get
            {
                var opBuilder = new Operation.AdminGetAllPlayerSessionAttribute.AdminGetAllPlayerSessionAttributeBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminSetPlayerSessionAttribute.AdminSetPlayerSessionAttributeBuilder AdminSetPlayerSessionAttributeOp
        {
            get
            {
                var opBuilder = new Operation.AdminSetPlayerSessionAttribute.AdminSetPlayerSessionAttributeBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminGetPlayerSessionAttribute.AdminGetPlayerSessionAttributeBuilder AdminGetPlayerSessionAttributeOp
        {
            get
            {
                var opBuilder = new Operation.AdminGetPlayerSessionAttribute.AdminGetPlayerSessionAttributeBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminGetPlayerBlockedPlayersV1.AdminGetPlayerBlockedPlayersV1Builder AdminGetPlayerBlockedPlayersV1Op
        {
            get
            {
                var opBuilder = new Operation.AdminGetPlayerBlockedPlayersV1.AdminGetPlayerBlockedPlayersV1Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminGetPlayerBlockedByPlayersV1.AdminGetPlayerBlockedByPlayersV1Builder AdminGetPlayerBlockedByPlayersV1Op
        {
            get
            {
                var opBuilder = new Operation.AdminGetPlayerBlockedByPlayersV1.AdminGetPlayerBlockedByPlayersV1Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminBulkBlockPlayersV1.AdminBulkBlockPlayersV1Builder AdminBulkBlockPlayersV1Op
        {
            get
            {
                var opBuilder = new Operation.AdminBulkBlockPlayersV1.AdminBulkBlockPlayersV1Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminBulkUnblockPlayersV1.AdminBulkUnblockPlayersV1Builder AdminBulkUnblockPlayersV1Op
        {
            get
            {
                var opBuilder = new Operation.AdminBulkUnblockPlayersV1.AdminBulkUnblockPlayersV1Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public PublicPlayerBlockPlayersV1.PublicPlayerBlockPlayersV1Builder PublicPlayerBlockPlayersV1Op
        {
            get
            {
                var opBuilder = new Operation.PublicPlayerBlockPlayersV1.PublicPlayerBlockPlayersV1Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public PublicGetPlayerBlockedPlayersV1.PublicGetPlayerBlockedPlayersV1Builder PublicGetPlayerBlockedPlayersV1Op
        {
            get
            {
                var opBuilder = new Operation.PublicGetPlayerBlockedPlayersV1.PublicGetPlayerBlockedPlayersV1Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public PublicGetPlayerBlockedByPlayersV1.PublicGetPlayerBlockedByPlayersV1Builder PublicGetPlayerBlockedByPlayersV1Op
        {
            get
            {
                var opBuilder = new Operation.PublicGetPlayerBlockedByPlayersV1.PublicGetPlayerBlockedByPlayersV1Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public PublicUnblockPlayerV1.PublicUnblockPlayerV1Builder PublicUnblockPlayerV1Op
        {
            get
            {
                var opBuilder = new Operation.PublicUnblockPlayerV1.PublicUnblockPlayerV1Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        #endregion

        public AdminGetLobbyCCU.Response AdminGetLobbyCCU(AdminGetLobbyCCU input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminGetLobbyCCU.Response> AdminGetLobbyCCUAsync(AdminGetLobbyCCU input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminGetBulkPlayerBlockedPlayersV1.Response AdminGetBulkPlayerBlockedPlayersV1(AdminGetBulkPlayerBlockedPlayersV1 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminGetBulkPlayerBlockedPlayersV1.Response> AdminGetBulkPlayerBlockedPlayersV1Async(AdminGetBulkPlayerBlockedPlayersV1 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminGetAllPlayerSessionAttribute.Response AdminGetAllPlayerSessionAttribute(AdminGetAllPlayerSessionAttribute input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminGetAllPlayerSessionAttribute.Response> AdminGetAllPlayerSessionAttributeAsync(AdminGetAllPlayerSessionAttribute input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminSetPlayerSessionAttribute.Response AdminSetPlayerSessionAttribute(AdminSetPlayerSessionAttribute input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminSetPlayerSessionAttribute.Response> AdminSetPlayerSessionAttributeAsync(AdminSetPlayerSessionAttribute input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminGetPlayerSessionAttribute.Response AdminGetPlayerSessionAttribute(AdminGetPlayerSessionAttribute input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminGetPlayerSessionAttribute.Response> AdminGetPlayerSessionAttributeAsync(AdminGetPlayerSessionAttribute input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminGetPlayerBlockedPlayersV1.Response AdminGetPlayerBlockedPlayersV1(AdminGetPlayerBlockedPlayersV1 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminGetPlayerBlockedPlayersV1.Response> AdminGetPlayerBlockedPlayersV1Async(AdminGetPlayerBlockedPlayersV1 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminGetPlayerBlockedByPlayersV1.Response AdminGetPlayerBlockedByPlayersV1(AdminGetPlayerBlockedByPlayersV1 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminGetPlayerBlockedByPlayersV1.Response> AdminGetPlayerBlockedByPlayersV1Async(AdminGetPlayerBlockedByPlayersV1 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminBulkBlockPlayersV1.Response AdminBulkBlockPlayersV1(AdminBulkBlockPlayersV1 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminBulkBlockPlayersV1.Response> AdminBulkBlockPlayersV1Async(AdminBulkBlockPlayersV1 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminBulkUnblockPlayersV1.Response AdminBulkUnblockPlayersV1(AdminBulkUnblockPlayersV1 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminBulkUnblockPlayersV1.Response> AdminBulkUnblockPlayersV1Async(AdminBulkUnblockPlayersV1 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public PublicPlayerBlockPlayersV1.Response PublicPlayerBlockPlayersV1(PublicPlayerBlockPlayersV1 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<PublicPlayerBlockPlayersV1.Response> PublicPlayerBlockPlayersV1Async(PublicPlayerBlockPlayersV1 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public PublicGetPlayerBlockedPlayersV1.Response PublicGetPlayerBlockedPlayersV1(PublicGetPlayerBlockedPlayersV1 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<PublicGetPlayerBlockedPlayersV1.Response> PublicGetPlayerBlockedPlayersV1Async(PublicGetPlayerBlockedPlayersV1 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public PublicGetPlayerBlockedByPlayersV1.Response PublicGetPlayerBlockedByPlayersV1(PublicGetPlayerBlockedByPlayersV1 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<PublicGetPlayerBlockedByPlayersV1.Response> PublicGetPlayerBlockedByPlayersV1Async(PublicGetPlayerBlockedByPlayersV1 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public PublicUnblockPlayerV1.Response PublicUnblockPlayerV1(PublicUnblockPlayerV1 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<PublicUnblockPlayerV1.Response> PublicUnblockPlayerV1Async(PublicUnblockPlayerV1 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
    }
}