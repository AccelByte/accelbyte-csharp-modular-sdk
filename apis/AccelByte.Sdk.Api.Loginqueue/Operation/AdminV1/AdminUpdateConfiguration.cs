// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Loginqueue.Model;

namespace AccelByte.Sdk.Api.Loginqueue.Operation
{
    /// <summary>
    /// adminUpdateConfiguration
    ///
    /// This API is used to set/update log queue configuration of a namespace.
    /// This endpoint has upsert behavior. Calling the endpoint to a namespace with no configuration will make the service to create a new configuration.
    /// When creating new configuration, empty field will have default value:
    /// * enabled = false
    /// * maxConcurrency = 1000000
    /// * maxLoginRate = 500
    /// * safetyMarginPercentage = 5
    /// * minActivationPeriodInSecond = 600
    /// * playerReconnectGracePeriodInSecond = 300
    /// * queueReconnectGracePeriodInSecond = 60
    /// * playerPollingTimeInSecond = 20
    /// 
    /// Calling this endpoint with namespace that has configuration will replace the old configuration.
    /// 
    /// Input validation:
    /// * maxConcurrency must be > 0 and <= 10000000 (0 < x <= 10000000)
    /// * maxLoginRate must be > 0 and <= 100000 (0 < x <= 100000)
    /// * minActivationPeriodInSecond, playerReconnectGracePeriodInSecond, playerPollingTimeInSecond and queueReconnectGracePeriodInSecond must be > 0 and <= 21600 (0 < x <= 21600)
    /// * playerPollingTimeInSecond must be smaller than queueReconnectGracePeriodInSecond
    /// * safetyMarginPercentage must be >= 0 and < 100 (0 <= x < 100)
    /// </summary>
    public class AdminUpdateConfiguration : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static AdminUpdateConfigurationBuilder Builder { get => new AdminUpdateConfigurationBuilder(); }

        public class AdminUpdateConfigurationBuilder
            : OperationBuilder<AdminUpdateConfigurationBuilder>
        {





            internal AdminUpdateConfigurationBuilder() { }

            internal AdminUpdateConfigurationBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }






            public AdminUpdateConfiguration Build(
                ApimodelsConfigurationRequest body,
                string namespace_
            )
            {
                AdminUpdateConfiguration op = new AdminUpdateConfiguration(this,
                    body,
                    namespace_
                );

                op.SetBaseFields<AdminUpdateConfigurationBuilder>(this);
                return op;
            }

            public AdminUpdateConfiguration.Response Execute(
                ApimodelsConfigurationRequest body,
                string namespace_
            )
            {
                AdminUpdateConfiguration op = Build(
                    body,
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
            public async Task<AdminUpdateConfiguration.Response> ExecuteAsync(
                ApimodelsConfigurationRequest body,
                string namespace_
            )
            {
                AdminUpdateConfiguration op = Build(
                    body,
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
        }

        private AdminUpdateConfiguration(AdminUpdateConfigurationBuilder builder,
            ApimodelsConfigurationRequest body,
            string namespace_
        )
        {
            PathParams["namespace"] = namespace_;





            BodyParams = body;


            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        #region Response Part        
        public class Response : ApiResponse<Model.ApimodelsConfigurationResponse>
        {

            public ResponseError? Error400 { get; set; } = null;

            public ResponseError? Error401 { get; set; } = null;

            public ResponseError? Error403 { get; set; } = null;

            public ResponseError? Error500 { get; set; } = null;


            protected override string GetFullOperationId() => "Loginqueue::AdminV1::AdminUpdateConfiguration";
        }

        #endregion

        public AdminUpdateConfiguration(
            string namespace_,
            Model.ApimodelsConfigurationRequest body
        )
        {
            PathParams["namespace"] = namespace_;





            BodyParams = body;


            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/login-queue/v1/admin/namespaces/{namespace}/config";

        public override HttpMethod Method => HttpMethod.Put;

        public override List<string> Consumes => new() { "application/json" };

        public override List<string> Produces => new() { "application/json" };

        public AdminUpdateConfiguration.Response ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            var response = new AdminUpdateConfiguration.Response()
            {
                StatusCode = code,
                ContentType = contentType
            };

            if (code == (HttpStatusCode)204)
            {
                response.IsSuccess = true;
            }
            else if ((code == (HttpStatusCode)201) || (code == (HttpStatusCode)202) || (code == (HttpStatusCode)200))
            {
                response.Data = JsonSerializer.Deserialize<Model.ApimodelsConfigurationResponse>(payload, ResponseJsonOptions);
                response.IsSuccess = true;
            }
            else if (code == (HttpStatusCode)400)
            {
                response.Error400 = JsonSerializer.Deserialize<ResponseError>(payload, ResponseJsonOptions);
                response.Error = response.Error400!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)401)
            {
                response.Error401 = JsonSerializer.Deserialize<ResponseError>(payload, ResponseJsonOptions);
                response.Error = response.Error401!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)403)
            {
                response.Error403 = JsonSerializer.Deserialize<ResponseError>(payload, ResponseJsonOptions);
                response.Error = response.Error403!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)500)
            {
                response.Error500 = JsonSerializer.Deserialize<ResponseError>(payload, ResponseJsonOptions);
                response.Error = response.Error500!.TranslateToApiError();
            }

            return response;
        }
    }

}