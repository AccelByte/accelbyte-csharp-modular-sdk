// Copyright (c) 2023 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using System;

using AccelByte.Sdk.Core;

using AccelByte.Sdk.Api.Loginqueue;

namespace AccelByte.Sdk.Api.Loginqueue
{
    public class LoginqueueApi : ISdkApi
    {
        private IAccelByteSdk _Sdk;

        private string _CustomBasePath = String.Empty;

        public Wrapper.AdminV1 AdminV1
        {
            get
            {
                if (_AdminV1 == null)
                    _AdminV1 = new Wrapper.AdminV1(_Sdk, _CustomBasePath);
                return _AdminV1;
            }
        }
        private Wrapper.AdminV1? _AdminV1 = null;

        public Wrapper.TicketV1 TicketV1
        {
            get
            {
                if (_TicketV1 == null)
                    _TicketV1 = new Wrapper.TicketV1(_Sdk, _CustomBasePath);
                return _TicketV1;
            }
        }
        private Wrapper.TicketV1? _TicketV1 = null;

        internal LoginqueueApi(IAccelByteSdk sdk)
        {
            _Sdk = sdk;
        }

        public LoginqueueApi WithCustomBasePath(string value)
        {
            _CustomBasePath = value;
            return this;
        }
    }
}

namespace AccelByte.Sdk.Api
{
    public static class LoginqueueApi_SdkExts
    {
        public static LoginqueueApi GetLoginqueueApi(this IAccelByteSdk sdk)
        {
            return sdk.GetApi<LoginqueueApi>("loginqueue", () =>
            {
                string customPath = sdk.Configuration.ConfigRepository.GetCustomServiceBasePath("loginqueue");
                if (customPath != "")
                    return (new LoginqueueApi(sdk)).WithCustomBasePath(customPath);
                else
                    return new LoginqueueApi(sdk);
            });
        }
    }
}