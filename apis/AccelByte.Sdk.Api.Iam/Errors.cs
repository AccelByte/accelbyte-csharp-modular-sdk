// Copyright (c) 2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

/*
serviceName: Iam

*/
using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json.Serialization;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Converters;

using AccelByte.Sdk.Api.Iam.Model;
using AccelByte.Sdk.Api.Iam.Operation;

namespace AccelByte.Sdk.Api.Iam
{
    public static class IamErrors
    {
        public static readonly ApiError Error20001 = new ApiError("20001", "unauthorized access");
        public static readonly ApiError Error20013 = new ApiError("20013", "insufficient permissions");
        public static readonly ApiError Error1014001 = new ApiError("1014001", "unable to parse request body");
        public static readonly ApiError Error1014002 = new ApiError("1014002", "user already exists");
        public static readonly ApiError Error10157 = new ApiError("10157", "specified role is not admin role");
        public static readonly ApiError Error20000 = new ApiError("20000", "internal server error");
        public static readonly ApiError Error20002 = new ApiError("20002", "validation error");
        public static readonly ApiError Error20021 = new ApiError("20021", "invalid pagination parameter");
        public static readonly ApiError Error20008 = new ApiError("20008", "user not found");
        public static readonly ApiError Error1014016 = new ApiError("1014016", "unable to parse request body");
        public static readonly ApiError Error1014017 = new ApiError("1014017", "user not found");
        public static readonly ApiError Error1014018 = new ApiError("1014018", "verification code not found");
        public static readonly ApiError Error1014019 = new ApiError("1014019", "verification code already used");
        public static readonly ApiError Error1014020 = new ApiError("1014020", "verification code invalid");
        public static readonly ApiError Error1014021 = new ApiError("1014021", "verification code expired");
        public static readonly ApiError Error1015073 = new ApiError("1015073", "new password same as old password");
        public static readonly ApiError Error10139 = new ApiError("10139", "platform account not found");
        public static readonly ApiError Error10130 = new ApiError("10130", "user under age");
        public static readonly ApiError Error10131 = new ApiError("10131", "invalid date of birth");
        public static readonly ApiError Error10132 = new ApiError("10132", "invalid email address");
        public static readonly ApiError Error10133 = new ApiError("10133", "email already used");
        public static readonly ApiError Error10154 = new ApiError("10154", "country not found");
        public static readonly ApiError Error10155 = new ApiError("10155", "country is not defined");
        public static readonly ApiError Error20019 = new ApiError("20019", "unable to parse request body");
        public static readonly ApiError Error10158 = new ApiError("10158", "ban not found");
        public static readonly ApiError Error10145 = new ApiError("10145", "disallow game access publisher user's ban");
        public static readonly ApiError Error10144 = new ApiError("10144", "user has no bans");
        public static readonly ApiError Error10142 = new ApiError("10142", "new password cannot be same with original");
        public static readonly ApiError Error10143 = new ApiError("10143", "password not match");
        public static readonly ApiError Error10163 = new ApiError("10163", "platform is already linked with the user account");
        public static readonly ApiError Error10156 = new ApiError("10156", "role not found");
        public static readonly ApiError Error10159 = new ApiError("10159", "operator is not a role manager");
        public static readonly ApiError Error10160 = new ApiError("10160", "user already has the role");
        public static readonly ApiError Error10161 = new ApiError("10161", "user already the role member");
        public static readonly ApiError Error10136 = new ApiError("10136", "code is either been used or not valid anymore");
        public static readonly ApiError Error10137 = new ApiError("10137", "code is expired");
        public static readonly ApiError Error10138 = new ApiError("10138", "code not match");
        public static readonly ApiError Error10148 = new ApiError("10148", "verification code context doesn't match the required context");
        public static readonly ApiError Error10149 = new ApiError("10149", "verification contact type doesn't match");
        public static readonly ApiError Error10152 = new ApiError("10152", "verification code not found");
        public static readonly ApiError Error10162 = new ApiError("10162", "invalid verification");
        public static readonly ApiError Error10140 = new ApiError("10140", "user verified");
        public static readonly ApiError Error10146 = new ApiError("10146", "userID not match");
        public static readonly ApiError Error10171 = new ApiError("10171", "email address not found");
        public static readonly ApiError Error20007 = new ApiError("20007", "too many requests");
        public static readonly ApiError Error10188 = new ApiError("10188", "input validation field not found");
        public static readonly ApiError Error10169 = new ApiError("10169", "age restriction not found");
        public static readonly ApiError Error10365 = new ApiError("10365", "client not found");
        public static readonly ApiError Error10364 = new ApiError("10364", "client exists");
        public static readonly ApiError Error20009 = new ApiError("20009", "request_conflict");
        public static readonly ApiError Error10240 = new ApiError("10240", "namespace is not game namespace");
        public static readonly ApiError Error10470 = new ApiError("10470", "role is empty");
        public static readonly ApiError Error10175 = new ApiError("10175", "third party credential not found");
        public static readonly ApiError Error10456 = new ApiError("10456", "role not found");
        public static readonly ApiError Error20022 = new ApiError("20022", "token is not user token");
        public static readonly ApiError Error10185 = new ApiError("10185", "publisher namespace not allowed");
        public static readonly ApiError Error10222 = new ApiError("10222", "unique display name already exists");
        public static readonly ApiError Error10153 = new ApiError("10153", "user exist");
        public static readonly ApiError Error10170 = new ApiError("10170", "account is already a full account");
        public static readonly ApiError Error10213 = new ApiError("10213", "country is blocked");
        public static readonly ApiError Error20025 = new ApiError("20025", "not a publisher user");
        public static readonly ApiError Error10173 = new ApiError("10173", "platform is already linked with another user account");
        public static readonly ApiError Error10200 = new ApiError("10200", "link to a different platform account is not allowed");
        public static readonly ApiError Error10208 = new ApiError("10208", "platform token expired");
        public static readonly ApiError Error20003 = new ApiError("20003", "forbidden access");
        public static readonly ApiError Error422 = new ApiError("422", "request is unprocessable");
        public static readonly ApiError Error10226 = new ApiError("10226", "third party platform is not supported");
        public static readonly ApiError Error10466 = new ApiError("10466", "invalid role members");
        public static readonly ApiError Error10467 = new ApiError("10467", "role has no manager");
        public static readonly ApiError Error10468 = new ApiError("10468", "role manager exist");
        public static readonly ApiError Error10457 = new ApiError("10457", "specified role is not admin role");
        public static readonly ApiError Error10459 = new ApiError("10459", "operator is not a role manager");
        public static readonly ApiError Error10469 = new ApiError("10469", "role member exist");
        public static readonly ApiError Error10189 = new ApiError("10189", "invalid factor");
        public static readonly ApiError Error10215 = new ApiError("10215", "Simultaneous ticket is required");
        public static readonly ApiError Error10216 = new ApiError("10216", "Native ticket is required");
        public static readonly ApiError Error10217 = new ApiError("10217", "Native ticket's account linked AGS account has different linking history with input simultaneous ticket's");
        public static readonly ApiError Error10218 = new ApiError("10218", "Simultaneous ticket's account linked AGS account has different linking history with input native ticket's");
        public static readonly ApiError Error10219 = new ApiError("10219", "Native ticket's account linked AGS is already linked simultaneous but different with the input simultaneous ticket's");
        public static readonly ApiError Error10220 = new ApiError("10220", "Native ticket's account linked AGS account is different with the one which simultaneous ticket's linked to");
        public static readonly ApiError Error10221 = new ApiError("10221", "Simultaneous ticket's account linked AGS is already linked native but different with the input native ticket's");
        public static readonly ApiError Error10180 = new ApiError("10180", "admin invitation not found or expired");
        public static readonly ApiError Error10235 = new ApiError("10235", "date of birth not allowed to update");
        public static readonly ApiError Error10236 = new ApiError("10236", "username not allowed to update");
        public static readonly ApiError Error10237 = new ApiError("10237", "display name not allowed to update");
        public static readonly ApiError Error10238 = new ApiError("10238", "country not allowed to update");
        public static readonly ApiError Error10141 = new ApiError("10141", "email verified");
        public static readonly ApiError Error10228 = new ApiError("10228", "invalid mfa token");
        public static readonly ApiError Error10172 = new ApiError("10172", "platform user is already linked with the account");
        public static readonly ApiError Error10174 = new ApiError("10174", "platform client not found");
        public static readonly ApiError Error20024 = new ApiError("20024", "not implemented");
        public static readonly ApiError Error10202 = new ApiError("10202", "active device ban config already exists");
        public static readonly ApiError Error10204 = new ApiError("10204", "device can not be banned");
        public static readonly ApiError Error10177 = new ApiError("10177", "username already used");
        public static readonly ApiError Error10191 = new ApiError("10191", "email address not verified");
        public static readonly ApiError Error10193 = new ApiError("10193", "mfa not enabled");
        public static readonly ApiError Error10183 = new ApiError("10183", "unprocessable entity");
        public static readonly ApiError Error10182 = new ApiError("10182", "given namespace cannot be assigned to the role");
        public static readonly ApiError Error10190 = new ApiError("10190", "auth secret key expired");
        public static readonly ApiError Error10194 = new ApiError("10194", "factor already enabled");
        public static readonly ApiError Error10192 = new ApiError("10192", "factor not enabled");
        public static readonly ApiError Error10195 = new ApiError("10195", "no valid backup code found");
        public static readonly ApiError Error10229 = new ApiError("10229", "request body exceed max limitation");
        public static readonly ApiError Error10207 = new ApiError("10207", "user namespace is not available");
    }

    public class OauthmodelErrorResponse : AccelByte.Sdk.Core.Model
    {
        [JsonPropertyName("clientId")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? ClientId { get; set; }

        [JsonPropertyName("default_factor")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? DefaultFactor { get; set; }

        [JsonPropertyName("email")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? Email { get; set; }

        [JsonPropertyName("error")]
        public string? Error { get; set; }

        [JsonPropertyName("error_description")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? ErrorDescription { get; set; }

        [JsonPropertyName("error_uri")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? ErrorUri { get; set; }

        [JsonPropertyName("factors")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public List<string>? Factors { get; set; }

        [JsonPropertyName("linkingToken")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? LinkingToken { get; set; }

        [JsonPropertyName("login_queue_ticket")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public OauthmodelLoginQueueTicketResponse? LoginQueueTicket { get; set; }

        [JsonPropertyName("messageVariables")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public Dictionary<string, string>? MessageVariables { get; set; }

        [JsonPropertyName("mfa_token")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? MfaToken { get; set; }

        [JsonPropertyName("platformId")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? PlatformId { get; set; }

        [JsonPropertyName("remainingBackupCodeCount")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public int? RemainingBackupCodeCount { get; set; }

        [JsonPropertyName("userBan")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public OauthmodelUserBan? UserBan { get; set; }


        public ApiError TranslateToApiError()
        {
            return new ApiError(
                Error != null ? Error.ToString() : "",
                ErrorDescription != null ? ErrorDescription.ToString() : ""
            );
        }
    }

    public class RestErrorResponse : AccelByte.Sdk.Core.Model
    {
        [JsonPropertyName("errorCode")]
        public int? ErrorCode { get; set; }

        [JsonPropertyName("errorMessage")]
        public string? ErrorMessage { get; set; }

        [JsonPropertyName("messageVariables")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public Dictionary<string, string>? MessageVariables { get; set; }

        [JsonPropertyName("requiredPermission")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public RestPermission? RequiredPermission { get; set; }


        public ApiError TranslateToApiError()
        {
            return new ApiError(
                ErrorCode != null ? ErrorCode.Value.ToString() : "",
                ErrorMessage != null ? ErrorMessage.ToString() : ""
            );
        }
    }

}