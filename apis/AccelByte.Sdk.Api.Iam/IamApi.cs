// Copyright (c) 2023 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using System;

using AccelByte.Sdk.Core;

using AccelByte.Sdk.Api.Iam;

namespace AccelByte.Sdk.Api.Iam
{
    public class IamApi : ISdkApi
    {
        private IAccelByteSdk _Sdk;

        public Wrapper.Bans Bans
        {
            get
            {
                if (_Bans == null)
                    _Bans = new Wrapper.Bans(_Sdk);
                return _Bans;
            }
        }
        private Wrapper.Bans? _Bans = null;

        public Wrapper.Clients Clients
        {
            get
            {
                if (_Clients == null)
                    _Clients = new Wrapper.Clients(_Sdk);
                return _Clients;
            }
        }
        private Wrapper.Clients? _Clients = null;

        public Wrapper.Users Users
        {
            get
            {
                if (_Users == null)
                    _Users = new Wrapper.Users(_Sdk);
                return _Users;
            }
        }
        private Wrapper.Users? _Users = null;

        public Wrapper.OAuth OAuth
        {
            get
            {
                if (_OAuth == null)
                    _OAuth = new Wrapper.OAuth(_Sdk);
                return _OAuth;
            }
        }
        private Wrapper.OAuth? _OAuth = null;

        public Wrapper.Roles Roles
        {
            get
            {
                if (_Roles == null)
                    _Roles = new Wrapper.Roles(_Sdk);
                return _Roles;
            }
        }
        private Wrapper.Roles? _Roles = null;

        public Wrapper.ClientsConfigV3 ClientsConfigV3
        {
            get
            {
                if (_ClientsConfigV3 == null)
                    _ClientsConfigV3 = new Wrapper.ClientsConfigV3(_Sdk);
                return _ClientsConfigV3;
            }
        }
        private Wrapper.ClientsConfigV3? _ClientsConfigV3 = null;

        public Wrapper.InputValidations InputValidations
        {
            get
            {
                if (_InputValidations == null)
                    _InputValidations = new Wrapper.InputValidations(_Sdk);
                return _InputValidations;
            }
        }
        private Wrapper.InputValidations? _InputValidations = null;

        public Wrapper.Config Config
        {
            get
            {
                if (_Config == null)
                    _Config = new Wrapper.Config(_Sdk);
                return _Config;
            }
        }
        private Wrapper.Config? _Config = null;

        public Wrapper.Country Country
        {
            get
            {
                if (_Country == null)
                    _Country = new Wrapper.Country(_Sdk);
                return _Country;
            }
        }
        private Wrapper.Country? _Country = null;

        public Wrapper.ThirdPartyCredential ThirdPartyCredential
        {
            get
            {
                if (_ThirdPartyCredential == null)
                    _ThirdPartyCredential = new Wrapper.ThirdPartyCredential(_Sdk);
                return _ThirdPartyCredential;
            }
        }
        private Wrapper.ThirdPartyCredential? _ThirdPartyCredential = null;

        public Wrapper.SSOCredential SSOCredential
        {
            get
            {
                if (_SSOCredential == null)
                    _SSOCredential = new Wrapper.SSOCredential(_Sdk);
                return _SSOCredential;
            }
        }
        private Wrapper.SSOCredential? _SSOCredential = null;

        public Wrapper.OAuth20Extension OAuth20Extension
        {
            get
            {
                if (_OAuth20Extension == null)
                    _OAuth20Extension = new Wrapper.OAuth20Extension(_Sdk);
                return _OAuth20Extension;
            }
        }
        private Wrapper.OAuth20Extension? _OAuth20Extension = null;

        public Wrapper.OAuth20 OAuth20
        {
            get
            {
                if (_OAuth20 == null)
                    _OAuth20 = new Wrapper.OAuth20(_Sdk);
                return _OAuth20;
            }
        }
        private Wrapper.OAuth20? _OAuth20 = null;

        public Wrapper.SSOSAML20 SSOSAML20
        {
            get
            {
                if (_SSOSAML20 == null)
                    _SSOSAML20 = new Wrapper.SSOSAML20(_Sdk);
                return _SSOSAML20;
            }
        }
        private Wrapper.SSOSAML20? _SSOSAML20 = null;

        public Wrapper.SSO SSO
        {
            get
            {
                if (_SSO == null)
                    _SSO = new Wrapper.SSO(_Sdk);
                return _SSO;
            }
        }
        private Wrapper.SSO? _SSO = null;

        public Wrapper.DevicesV4 DevicesV4
        {
            get
            {
                if (_DevicesV4 == null)
                    _DevicesV4 = new Wrapper.DevicesV4(_Sdk);
                return _DevicesV4;
            }
        }
        private Wrapper.DevicesV4? _DevicesV4 = null;

        public Wrapper.UsersV4 UsersV4
        {
            get
            {
                if (_UsersV4 == null)
                    _UsersV4 = new Wrapper.UsersV4(_Sdk);
                return _UsersV4;
            }
        }
        private Wrapper.UsersV4? _UsersV4 = null;

        public Wrapper.OAuth20V4 OAuth20V4
        {
            get
            {
                if (_OAuth20V4 == null)
                    _OAuth20V4 = new Wrapper.OAuth20V4(_Sdk);
                return _OAuth20V4;
            }
        }
        private Wrapper.OAuth20V4? _OAuth20V4 = null;

        internal IamApi(IAccelByteSdk sdk)
        {
            _Sdk = sdk;
        }
    }
}

namespace AccelByte.Sdk.Api
{
    public static class IamApi_SdkExts
    {
        public static IamApi GetIamApi(this IAccelByteSdk sdk)
        {
            return sdk.GetApi<IamApi>("iam", () =>
            {
                return new IamApi(sdk);
            });
        }
    }
}