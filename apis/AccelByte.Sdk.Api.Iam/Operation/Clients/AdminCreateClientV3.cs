// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Iam.Model;

namespace AccelByte.Sdk.Api.Iam.Operation
{
    /// <summary>
    /// AdminCreateClientV3
    ///
    /// Add a new OAuth 2.0 client
    /// A new client automatically granted with these scopes: commerce, account, analytics, publishing, social.
    /// 
    /// **Note for Multi Tenant Mode (Confidential Client):**
    /// Only Super admin can set permission with resource & action.
    /// Studio admin & game admin need set permission with permission module.
    /// 
    /// action code: 10301
    /// 
    /// **Fields Description:**
    /// - **clientId** : The client ID. e.g f815e5c44f364993961be3b3f26a7bf4
    /// - **clientName** : The client name. e.g E-commerce
    /// - **secret** : The client's secret. It's empty if the client's type is a public client. Otherwise, the client secret is required
    /// - **namespace** : The namespace where the client lives. e.g sample-game
    /// - **redirectUri** : Contains the redirect URI used in OAuth callback. e.g https://example.net/platform
    /// - **oauthClientType** : The OAuth 2.0 client type. The client type determines whether the authorization needs Proof Of Key Exchange or not.
    /// A public client type doesn't have a client secret and should use PKCE flow.
    /// A confidential client type has a client secret and don't use PKCE flow
    /// Supported oAuthClientType :
    /// - **Public**
    /// - **Confidential**
    /// - **audiences** : List of target client IDs who is intended to receive the token. e.g ["eaaa65618fe24293b00a61454182b435", "40073ee9bc3446d3a051a71b48509a5d"]
    /// - **baseUri** : A base URI of the application. It is used for making sure the token is intended to be used by the client. e.g https://example.net/platform
    /// - **clientPermissions** : Contains the client's permissions
    /// - **deletable** : The flag to identify whether client is deletable (optional). default value: true
    /// - **clientPlatform**: available client platform (optional). default value: ""
    /// - Playstation
    /// - Xbox
    /// - Steam
    /// - Epic
    /// - IOS
    /// - GooglePlay
    /// - Nintendo
    /// - Oculus
    /// - **twoFactorEnabled**: The flag to indicate whether 2FA validation is enable for this client. default value: false
    /// - **oauthAccessTokenExpiration**: a configurable expiration time for **access_token**, default value: 0 (mean fetch value from environment variable)
    /// - **oauthRefreshTokenExpiration**: a configurable expiration time for **refresh_token**, default value: 0 (mean fetch value from environment variable)
    /// - **oauthAccessTokenExpirationTimeUnit**: a configurable expiration time unit for **access_token**, default value: SECONDS
    /// - **oauthRefreshTokenExpirationTimeUnit**: a configurable expiration time unit for **refresh_token**, default value: SECONDS
    /// </summary>
    public class AdminCreateClientV3 : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static AdminCreateClientV3Builder Builder { get => new AdminCreateClientV3Builder(); }

        public class AdminCreateClientV3Builder
            : OperationBuilder<AdminCreateClientV3Builder>
        {





            internal AdminCreateClientV3Builder() { }

            internal AdminCreateClientV3Builder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }






            public AdminCreateClientV3 Build(
                ClientmodelClientCreationV3Request body,
                string namespace_
            )
            {
                AdminCreateClientV3 op = new AdminCreateClientV3(this,
                    body,                    
                    namespace_                    
                );

                op.SetBaseFields<AdminCreateClientV3Builder>(this);
                return op;
            }

            public AdminCreateClientV3.Response Execute(
                ClientmodelClientCreationV3Request body,
                string namespace_
            )
            {
                AdminCreateClientV3 op = Build(
                    body,
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
            public async Task<AdminCreateClientV3.Response> ExecuteAsync(
                ClientmodelClientCreationV3Request body,
                string namespace_
            )
            {
                AdminCreateClientV3 op = Build(
                    body,
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
        }

        private AdminCreateClientV3(AdminCreateClientV3Builder builder,
            ClientmodelClientCreationV3Request body,
            string namespace_
        )
        {
            PathParams["namespace"] = namespace_;
            
            

            
            
            BodyParams = body;
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        #region Response Part        
        public class Response : ApiResponse<Model.ClientmodelClientV3Response>
        {

            public RestErrorResponse? Error400 { get; set; } = null;

            public RestErrorResponse? Error401 { get; set; } = null;

            public RestErrorResponse? Error403 { get; set; } = null;

            public RestErrorResponse? Error409 { get; set; } = null;


            protected override string GetFullOperationId() => "Iam::Clients::AdminCreateClientV3";
        }

        #endregion

        public AdminCreateClientV3(
            string namespace_,            
            Model.ClientmodelClientCreationV3Request body            
        )
        {
            PathParams["namespace"] = namespace_;
            
            

            
            
            BodyParams = body;
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/iam/v3/admin/namespaces/{namespace}/clients";

        public override HttpMethod Method => HttpMethod.Post;

        public override List<string> Consumes => new() { "application/json" };

        public override List<string> Produces => new() { "application/json" };
        
        public AdminCreateClientV3.Response ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            var response = new AdminCreateClientV3.Response()
            {
                StatusCode = code,
                ContentType = contentType
            };

            if (code == (HttpStatusCode)204)
            {
                response.IsSuccess = true;
            }
            else if ((code == (HttpStatusCode)201) || (code == (HttpStatusCode)202) || (code == (HttpStatusCode)200))
            {
                response.Data = JsonSerializer.Deserialize<Model.ClientmodelClientV3Response>(payload, ResponseJsonOptions);
                response.IsSuccess = true;
            }
            else if (code == (HttpStatusCode)400)
            {
                response.Error400 = JsonSerializer.Deserialize<RestErrorResponse>(payload, ResponseJsonOptions);
                response.Error = response.Error400!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)401)
            {
                response.Error401 = JsonSerializer.Deserialize<RestErrorResponse>(payload, ResponseJsonOptions);
                response.Error = response.Error401!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)403)
            {
                response.Error403 = JsonSerializer.Deserialize<RestErrorResponse>(payload, ResponseJsonOptions);
                response.Error = response.Error403!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)409)
            {
                response.Error409 = JsonSerializer.Deserialize<RestErrorResponse>(payload, ResponseJsonOptions);
                response.Error = response.Error409!.TranslateToApiError();
            }

            return response;
        }
    }

}