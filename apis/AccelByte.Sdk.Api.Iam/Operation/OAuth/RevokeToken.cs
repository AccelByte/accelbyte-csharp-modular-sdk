// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Iam.Model;

namespace AccelByte.Sdk.Api.Iam.Operation
{
    /// <summary>
    /// RevokeToken
    ///
    /// ## The endpoint is going to be deprecated
    /// Revokes a token.
    /// This endpoint requires all requests to have Authorization header set with Basic access authentication constructed from client id and client secret or Bearer access authentication with valid access token.
    /// 
    /// ### Endpoint migration guide
    /// - **Substitute endpoint: _/v3/oauth/revoke [POST]_**
    /// </summary>
    [Obsolete(DiagnosticId ="ab_deprecated_operation")]
    public class RevokeToken : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static RevokeTokenBuilder Builder { get => new RevokeTokenBuilder(); }

        public class RevokeTokenBuilder
            : OperationBuilder<RevokeTokenBuilder>
        {





            internal RevokeTokenBuilder() { }

            internal RevokeTokenBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }






            public RevokeToken Build(
                string token
            )
            {
                RevokeToken op = new RevokeToken(this,
                    token                    
                );

                op.SetBaseFields<RevokeTokenBuilder>(this);
                return op;
            }

            [Obsolete(DiagnosticId ="ab_deprecated_operation_wrapper")]
            public RevokeToken.Response Execute(
                string token
            )
            {
                RevokeToken op = Build(
                    token
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
            public async Task<RevokeToken.Response> ExecuteAsync(
                string token
            )
            {
                RevokeToken op = Build(
                    token
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
        }

        private RevokeToken(RevokeTokenBuilder builder,
            string token
        )
        {
            
            
            if (token is not null) FormParams["token"] = token;

            
            
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        #region Response Part        
        public class Response : ApiResponse
        {

            public string Error400 { get; set; } = "";

            public string Error401 { get; set; } = "";


            protected override string GetFullOperationId() => "Iam::OAuth::RevokeToken";
        }

        #endregion

        public RevokeToken(
            string token            
        )
        {
            
            
            if (token is not null) FormParams["token"] = token;

            
            
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/iam/oauth/revoke/token";

        public override HttpMethod Method => HttpMethod.Post;

        public override List<string> Consumes => new() { "application/x-www-form-urlencoded" };

        public override List<string> Produces => new() { "application/json" };
        
        public RevokeToken.Response ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            var response = new RevokeToken.Response()
            {
                StatusCode = code,
                ContentType = contentType
            };

            int statusCode = (int)code;
            if (statusCode >= 200 && statusCode < 300)
            {
                response.IsSuccess = true;
            }
            else if (code == (HttpStatusCode)400)
            {
                response.Error400 = payload.ReadToString();
                response.Error = new ApiError("-1", response.Error400!);
            }
            else if (code == (HttpStatusCode)401)
            {
                response.Error401 = payload.ReadToString();
                response.Error = new ApiError("-1", response.Error401!);
            }

            return response;
        }
    }

}