// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Iam.Model;

namespace AccelByte.Sdk.Api.Iam.Operation
{
    /// <summary>
    /// PlatformTokenRequestHandler
    ///
    /// ## The endpoint is going to be deprecated
    /// This endpoint requires all requests to have Authorization header set with Basic access authentication
    /// constructed from client id and client secret. For publisher-game namespace schema : Specify only either platform_token or device_id. Device token grant
    /// should be requested along with device_id parameter against game namespace. Another 3rd party platform token grant should be requested
    /// along with platform_token parameter against publisher namespace.
    /// 
    /// Supported platforms:
    /// - **steamopenid**: Steam's user authentication method using OpenID 2.0. The expected value of the platform token is the URL generated by Steam on web authentication
    /// The JWT contains user's active bans with its expiry date. List of ban types can be obtained from /iam/bans..
    /// 
    /// ### Endpoint migration guide
    /// - **Substitute endpoint: _/iam/v3/oauth/platforms/{platformId}/token [POST]_**
    /// </summary>
    [Obsolete(DiagnosticId = "ab_deprecated_operation")]
    public class PlatformTokenRequestHandler : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static PlatformTokenRequestHandlerBuilder Builder { get => new PlatformTokenRequestHandlerBuilder(); }

        public class PlatformTokenRequestHandlerBuilder
            : OperationBuilder<PlatformTokenRequestHandlerBuilder>
        {



            public string? DeviceId { get; set; }

            public string? MacAddress { get; set; }

            public string? PlatformToken { get; set; }



            internal PlatformTokenRequestHandlerBuilder() { }

            internal PlatformTokenRequestHandlerBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }




            public PlatformTokenRequestHandlerBuilder SetDeviceId(string _deviceId)
            {
                DeviceId = _deviceId;
                return this;
            }

            public PlatformTokenRequestHandlerBuilder SetMacAddress(string _macAddress)
            {
                MacAddress = _macAddress;
                return this;
            }

            public PlatformTokenRequestHandlerBuilder SetPlatformToken(string _platformToken)
            {
                PlatformToken = _platformToken;
                return this;
            }



            public PlatformTokenRequestHandler Build(
                string namespace_,
                string platformId
            )
            {
                PlatformTokenRequestHandler op = new PlatformTokenRequestHandler(this,
                    namespace_,
                    platformId
                );

                op.SetBaseFields<PlatformTokenRequestHandlerBuilder>(this);
                return op;
            }

            [Obsolete(DiagnosticId = "ab_deprecated_operation_wrapper")]
            public PlatformTokenRequestHandler.Response Execute(
                string namespace_,
                string platformId
            )
            {
                PlatformTokenRequestHandler op = Build(
                    namespace_,
                    platformId
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
            public async Task<PlatformTokenRequestHandler.Response> ExecuteAsync(
                string namespace_,
                string platformId
            )
            {
                PlatformTokenRequestHandler op = Build(
                    namespace_,
                    platformId
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
        }

        private PlatformTokenRequestHandler(PlatformTokenRequestHandlerBuilder builder,
            string namespace_,
            string platformId
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["platformId"] = platformId;


            if (builder.DeviceId is not null) FormParams["device_id"] = builder.DeviceId;
            if (builder.MacAddress is not null) FormParams["macAddress"] = builder.MacAddress;
            if (builder.PlatformToken is not null) FormParams["platform_token"] = builder.PlatformToken;





            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        #region Response Part        
        public class Response : ApiResponse<Model.OauthmodelTokenResponse>
        {

            public OauthmodelErrorResponse? Error400 { get; set; } = null;

            public OauthmodelErrorResponse? Error401 { get; set; } = null;


            protected override string GetFullOperationId() => "Iam::OAuth::PlatformTokenRequestHandler";
        }

        #endregion

        public PlatformTokenRequestHandler(
            string namespace_,
            string platformId,
            string? deviceId,
            string? macAddress,
            string? platformToken
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["platformId"] = platformId;


            if (deviceId is not null) FormParams["device_id"] = deviceId;
            if (macAddress is not null) FormParams["macAddress"] = macAddress;
            if (platformToken is not null) FormParams["platform_token"] = platformToken;





            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/iam/oauth/namespaces/{namespace}/platforms/{platformId}/token";

        public override HttpMethod Method => HttpMethod.Post;

        public override List<string> Consumes => new() { "application/x-www-form-urlencoded" };

        public override List<string> Produces => new() { "application/json" };

        public PlatformTokenRequestHandler.Response ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            var response = new PlatformTokenRequestHandler.Response()
            {
                StatusCode = code,
                ContentType = contentType
            };

            if (code == (HttpStatusCode)204)
            {
                response.IsSuccess = true;
            }
            else if ((code == (HttpStatusCode)201) || (code == (HttpStatusCode)202) || (code == (HttpStatusCode)200))
            {
                response.Data = JsonSerializer.Deserialize<Model.OauthmodelTokenResponse>(payload, ResponseJsonOptions);
                response.IsSuccess = true;
            }
            else if (code == (HttpStatusCode)400)
            {
                response.Error400 = JsonSerializer.Deserialize<OauthmodelErrorResponse>(payload, ResponseJsonOptions);
                response.Error = response.Error400!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)401)
            {
                response.Error401 = JsonSerializer.Deserialize<OauthmodelErrorResponse>(payload, ResponseJsonOptions);
                response.Error = response.Error401!.TranslateToApiError();
            }

            return response;
        }
    }

}