// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Iam.Model;

namespace AccelByte.Sdk.Api.Iam.Operation
{
    /// <summary>
    /// AdminCheckThirdPartyLoginPlatformAvailabilityV3
    ///
    /// This is the API to check specific 3rd party platform availability.
    /// Passing platform group name or it's member will return same platform availability data
    /// Supported third party platform and platform group:
    /// - PSN group(psn)
    /// - ps4web
    /// - ps4
    /// - ps5
    /// </summary>
    public class AdminCheckThirdPartyLoginPlatformAvailabilityV3 : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static AdminCheckThirdPartyLoginPlatformAvailabilityV3Builder Builder { get => new AdminCheckThirdPartyLoginPlatformAvailabilityV3Builder(); }

        public class AdminCheckThirdPartyLoginPlatformAvailabilityV3Builder
            : OperationBuilder<AdminCheckThirdPartyLoginPlatformAvailabilityV3Builder>
        {





            internal AdminCheckThirdPartyLoginPlatformAvailabilityV3Builder() { }

            internal AdminCheckThirdPartyLoginPlatformAvailabilityV3Builder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }






            public AdminCheckThirdPartyLoginPlatformAvailabilityV3 Build(
                string platformId
            )
            {
                AdminCheckThirdPartyLoginPlatformAvailabilityV3 op = new AdminCheckThirdPartyLoginPlatformAvailabilityV3(this,
                    platformId
                );

                op.SetBaseFields<AdminCheckThirdPartyLoginPlatformAvailabilityV3Builder>(this);
                return op;
            }

            public Model.ModelCheckAvailabilityResponse? Execute(
                string platformId
            )
            {
                AdminCheckThirdPartyLoginPlatformAvailabilityV3 op = Build(
                    platformId
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
            public async Task<Model.ModelCheckAvailabilityResponse?> ExecuteAsync(
                string platformId
            )
            {
                AdminCheckThirdPartyLoginPlatformAvailabilityV3 op = Build(
                    platformId
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
        }

        private AdminCheckThirdPartyLoginPlatformAvailabilityV3(AdminCheckThirdPartyLoginPlatformAvailabilityV3Builder builder,
            string platformId
        )
        {
            PathParams["platformId"] = platformId;







            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public AdminCheckThirdPartyLoginPlatformAvailabilityV3(
            string platformId
        )
        {
            PathParams["platformId"] = platformId;







            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/iam/v3/admin/platforms/{platformId}/availability";

        public override HttpMethod Method => HttpMethod.Get;

        public override List<string> Consumes => new() { };

        public override List<string> Produces => new() { "application/json" };

        public Model.ModelCheckAvailabilityResponse? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                return JsonSerializer.Deserialize<Model.ModelCheckAvailabilityResponse>(payload, ResponseJsonOptions);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.ModelCheckAvailabilityResponse>(payload, ResponseJsonOptions);
            }

            var payloadString = payload.ReadToString();

            throw new HttpResponseException(code, payloadString);
        }
    }

}