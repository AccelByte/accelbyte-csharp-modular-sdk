// Copyright (c) 2022-2023 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Iam.Model;

namespace AccelByte.Sdk.Api.Iam.Operation
{
    /// <summary>
    /// UpdateThirdPartyLoginPlatformDomainV3
    ///
    /// 
    /// 
    /// This is the API to set 3rd Platform domain.
    /// 
    /// 
    /// 
    /// 
    /// It needs ADMIN:NAMESPACE:{namespace}:CLIENTDOMAIN [UPDATE] resource.
    /// </summary>
    public class UpdateThirdPartyLoginPlatformDomainV3 : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static UpdateThirdPartyLoginPlatformDomainV3Builder Builder { get => new UpdateThirdPartyLoginPlatformDomainV3Builder(); }

        public class UpdateThirdPartyLoginPlatformDomainV3Builder
            : OperationBuilder<UpdateThirdPartyLoginPlatformDomainV3Builder>
        {





            internal UpdateThirdPartyLoginPlatformDomainV3Builder() { }

            internal UpdateThirdPartyLoginPlatformDomainV3Builder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }






            public UpdateThirdPartyLoginPlatformDomainV3 Build(
                ModelPlatformDomainUpdateRequest body,
                string namespace_,
                string platformId
            )
            {
                UpdateThirdPartyLoginPlatformDomainV3 op = new UpdateThirdPartyLoginPlatformDomainV3(this,
                    body,
                    namespace_,
                    platformId
                );
                op.PreferredSecurityMethod = PreferredSecurityMethod;
                op.RequestJsonOptions = RequestJsonOptions;
                op.ResponseJsonOptions = ResponseJsonOptions;

                return op;
            }

            public Model.ModelPlatformDomainResponse? Execute(
                ModelPlatformDomainUpdateRequest body,
                string namespace_,
                string platformId
            )
            {
                UpdateThirdPartyLoginPlatformDomainV3 op = Build(
                    body,
                    namespace_,
                    platformId
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
        }

        private UpdateThirdPartyLoginPlatformDomainV3(UpdateThirdPartyLoginPlatformDomainV3Builder builder,
            ModelPlatformDomainUpdateRequest body,
            string namespace_,
            string platformId
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["platformId"] = platformId;





            BodyParams = body;


            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public UpdateThirdPartyLoginPlatformDomainV3(
            string namespace_,
            string platformId,
            Model.ModelPlatformDomainUpdateRequest body
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["platformId"] = platformId;





            BodyParams = body;


            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/iam/v3/admin/namespaces/{namespace}/platforms/{platformId}/clients/domain";

        public override HttpMethod Method => HttpMethod.Put;

        public override List<string> Consumes => new() { "application/json" };

        public override List<string> Produces => new() { "application/json" };

        public Model.ModelPlatformDomainResponse? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                return JsonSerializer.Deserialize<Model.ModelPlatformDomainResponse>(payload, ResponseJsonOptions);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.ModelPlatformDomainResponse>(payload, ResponseJsonOptions);
            }

            var payloadString = payload.ReadToString();

            throw new HttpResponseException(code, payloadString);
        }
    }

}