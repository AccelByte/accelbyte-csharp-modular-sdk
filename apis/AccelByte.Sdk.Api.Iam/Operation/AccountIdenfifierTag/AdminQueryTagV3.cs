// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Iam.Model;

namespace AccelByte.Sdk.Api.Iam.Operation
{
    /// <summary>
    /// AdminQueryTagV3
    ///
    /// Retrieve Account Identifier Tags. This endpoint allows administrators to retrieve tags that are used to identify and categorize user accounts.
    /// Tag Name can be used for partial content search.
    /// </summary>
    public class AdminQueryTagV3 : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static AdminQueryTagV3Builder Builder { get => new AdminQueryTagV3Builder(); }

        public class AdminQueryTagV3Builder
            : OperationBuilder<AdminQueryTagV3Builder>
        {

            public long? Limit { get; set; }

            public long? Offset { get; set; }

            public string? TagName { get; set; }





            internal AdminQueryTagV3Builder() { }

            internal AdminQueryTagV3Builder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }


            public AdminQueryTagV3Builder SetLimit(long _limit)
            {
                Limit = _limit;
                return this;
            }

            public AdminQueryTagV3Builder SetOffset(long _offset)
            {
                Offset = _offset;
                return this;
            }

            public AdminQueryTagV3Builder SetTagName(string _tagName)
            {
                TagName = _tagName;
                return this;
            }





            public AdminQueryTagV3 Build(
                string namespace_
            )
            {
                AdminQueryTagV3 op = new AdminQueryTagV3(this,
                    namespace_
                );

                op.SetBaseFields<AdminQueryTagV3Builder>(this);
                return op;
            }

            public AdminQueryTagV3.Response Execute(
                string namespace_
            )
            {
                AdminQueryTagV3 op = Build(
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
            public async Task<AdminQueryTagV3.Response> ExecuteAsync(
                string namespace_
            )
            {
                AdminQueryTagV3 op = Build(
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
        }

        private AdminQueryTagV3(AdminQueryTagV3Builder builder,
            string namespace_
        )
        {
            PathParams["namespace"] = namespace_;

            if (builder.Limit != null) QueryParams["limit"] = Convert.ToString(builder.Limit)!;
            if (builder.Offset != null) QueryParams["offset"] = Convert.ToString(builder.Offset)!;
            if (builder.TagName is not null) QueryParams["tagName"] = builder.TagName;






            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        #region Response Part        
        public class Response : ApiResponse<Model.AccountcommonTagsGetResponseV3>
        {

            public RestErrorResponse? Error500 { get; set; } = null;


            protected override string GetFullOperationId() => "Iam::AccountIdenfifierTag::AdminQueryTagV3";
        }

        #endregion

        public AdminQueryTagV3(
            string namespace_,
            long? limit,
            long? offset,
            string? tagName
        )
        {
            PathParams["namespace"] = namespace_;

            if (limit != null) QueryParams["limit"] = Convert.ToString(limit)!;
            if (offset != null) QueryParams["offset"] = Convert.ToString(offset)!;
            if (tagName is not null) QueryParams["tagName"] = tagName;






            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/iam/v3/admin/namespaces/{namespace}/tags";

        public override HttpMethod Method => HttpMethod.Get;

        public override List<string> Consumes => new() { };

        public override List<string> Produces => new() { "application/json" };

        public AdminQueryTagV3.Response ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            var response = new AdminQueryTagV3.Response()
            {
                StatusCode = code,
                ContentType = contentType
            };

            if (code == (HttpStatusCode)204)
            {
                response.IsSuccess = true;
            }
            else if ((code == (HttpStatusCode)201) || (code == (HttpStatusCode)202) || (code == (HttpStatusCode)200))
            {
                response.Data = JsonSerializer.Deserialize<Model.AccountcommonTagsGetResponseV3>(payload, ResponseJsonOptions);
                response.IsSuccess = true;
            }
            else if (code == (HttpStatusCode)500)
            {
                response.Error500 = JsonSerializer.Deserialize<RestErrorResponse>(payload, ResponseJsonOptions);
                response.Error = response.Error500!.TranslateToApiError();
            }

            return response;
        }
    }

}