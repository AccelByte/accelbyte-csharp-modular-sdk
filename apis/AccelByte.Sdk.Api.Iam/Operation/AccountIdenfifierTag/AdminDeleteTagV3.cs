// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Iam.Model;

namespace AccelByte.Sdk.Api.Iam.Operation
{
    /// <summary>
    /// AdminDeleteTagV3
    ///
    /// Delete an Account Identifier Tag. This endpoint allows administrators to delete a tag that is used to identify and categorize user accounts.
    /// </summary>
    public class AdminDeleteTagV3 : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static AdminDeleteTagV3Builder Builder { get => new AdminDeleteTagV3Builder(); }

        public class AdminDeleteTagV3Builder
            : OperationBuilder<AdminDeleteTagV3Builder>
        {





            internal AdminDeleteTagV3Builder() { }

            internal AdminDeleteTagV3Builder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }






            public AdminDeleteTagV3 Build(
                string namespace_,
                string tagId
            )
            {
                AdminDeleteTagV3 op = new AdminDeleteTagV3(this,
                    namespace_,
                    tagId
                );

                op.SetBaseFields<AdminDeleteTagV3Builder>(this);
                return op;
            }

            public AdminDeleteTagV3.Response Execute(
                string namespace_,
                string tagId
            )
            {
                AdminDeleteTagV3 op = Build(
                    namespace_,
                    tagId
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
            public async Task<AdminDeleteTagV3.Response> ExecuteAsync(
                string namespace_,
                string tagId
            )
            {
                AdminDeleteTagV3 op = Build(
                    namespace_,
                    tagId
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
        }

        private AdminDeleteTagV3(AdminDeleteTagV3Builder builder,
            string namespace_,
            string tagId
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["tagId"] = tagId;







            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        #region Response Part        
        public class Response : ApiResponse
        {

            public RestErrorResponse? Error404 { get; set; } = null;

            public RestErrorResponse? Error500 { get; set; } = null;


            protected override string GetFullOperationId() => "Iam::AccountIdenfifierTag::AdminDeleteTagV3";
        }

        #endregion

        public AdminDeleteTagV3(
            string namespace_,
            string tagId
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["tagId"] = tagId;







            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/iam/v3/admin/namespaces/{namespace}/tags/{tagId}";

        public override HttpMethod Method => HttpMethod.Delete;

        public override List<string> Consumes => new() { };

        public override List<string> Produces => new() { "application/json" };

        public AdminDeleteTagV3.Response ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            var response = new AdminDeleteTagV3.Response()
            {
                StatusCode = code,
                ContentType = contentType,
                IsSuccess = true
            };

            if (code == (HttpStatusCode)404)

            {
                response.Error404 = JsonSerializer.Deserialize<RestErrorResponse>(payload, ResponseJsonOptions);
                response.Error = response.Error404!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)500)

            {
                response.Error500 = JsonSerializer.Deserialize<RestErrorResponse>(payload, ResponseJsonOptions);
                response.Error = response.Error500!.TranslateToApiError();
            }

            return response;
        }
    }

}