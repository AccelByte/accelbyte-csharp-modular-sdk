// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Iam.Model;

namespace AccelByte.Sdk.Api.Iam.Operation
{
    /// <summary>
    /// AdminUpdateAvailablePermissionsByModule
    ///
    /// Update Client available permissions, if module or group not exists, it will auto create.
    /// </summary>
    public class AdminUpdateAvailablePermissionsByModule : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static AdminUpdateAvailablePermissionsByModuleBuilder Builder { get => new AdminUpdateAvailablePermissionsByModuleBuilder(); }

        public class AdminUpdateAvailablePermissionsByModuleBuilder
            : OperationBuilder<AdminUpdateAvailablePermissionsByModuleBuilder>
        {

            public bool? ForceDelete { get; set; }





            internal AdminUpdateAvailablePermissionsByModuleBuilder() { }

            internal AdminUpdateAvailablePermissionsByModuleBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }


            public AdminUpdateAvailablePermissionsByModuleBuilder SetForceDelete(bool _forceDelete)
            {
                ForceDelete = _forceDelete;
                return this;
            }





            public AdminUpdateAvailablePermissionsByModule Build(
                ClientmodelListUpsertModulesRequest body
            )
            {
                AdminUpdateAvailablePermissionsByModule op = new AdminUpdateAvailablePermissionsByModule(this,
                    body
                );

                op.SetBaseFields<AdminUpdateAvailablePermissionsByModuleBuilder>(this);
                return op;
            }

            public AdminUpdateAvailablePermissionsByModule.Response Execute(
                ClientmodelListUpsertModulesRequest body
            )
            {
                AdminUpdateAvailablePermissionsByModule op = Build(
                    body
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
            public async Task<AdminUpdateAvailablePermissionsByModule.Response> ExecuteAsync(
                ClientmodelListUpsertModulesRequest body
            )
            {
                AdminUpdateAvailablePermissionsByModule op = Build(
                    body
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
        }

        private AdminUpdateAvailablePermissionsByModule(AdminUpdateAvailablePermissionsByModuleBuilder builder,
            ClientmodelListUpsertModulesRequest body
        )
        {

            if (builder.ForceDelete != null) QueryParams["forceDelete"] = Convert.ToString(builder.ForceDelete)!;




            BodyParams = body;


            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        #region Response Part        
        public class Response : ApiResponse
        {

            public RestErrorResponse? Error401 { get; set; } = null;

            public RestErrorResponse? Error403 { get; set; } = null;


            protected override string GetFullOperationId() => "Iam::ClientsConfigV3::AdminUpdateAvailablePermissionsByModule";
        }

        #endregion

        public AdminUpdateAvailablePermissionsByModule(
            bool? forceDelete,
            Model.ClientmodelListUpsertModulesRequest body
        )
        {

            if (forceDelete != null) QueryParams["forceDelete"] = Convert.ToString(forceDelete)!;




            BodyParams = body;


            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/iam/v3/admin/clientConfig/permissions";

        public override HttpMethod Method => HttpMethod.Put;

        public override List<string> Consumes => new() { "application/json" };

        public override List<string> Produces => new() { "application/json" };

        public AdminUpdateAvailablePermissionsByModule.Response ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            var response = new AdminUpdateAvailablePermissionsByModule.Response()
            {
                StatusCode = code,
                ContentType = contentType,
                IsSuccess = true
            };

            if (code == (HttpStatusCode)401)

            {
                response.Error401 = JsonSerializer.Deserialize<RestErrorResponse>(payload, ResponseJsonOptions);
                response.Error = response.Error401!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)403)

            {
                response.Error403 = JsonSerializer.Deserialize<RestErrorResponse>(payload, ResponseJsonOptions);
                response.Error = response.Error403!.TranslateToApiError();
            }

            return response;
        }
    }

}