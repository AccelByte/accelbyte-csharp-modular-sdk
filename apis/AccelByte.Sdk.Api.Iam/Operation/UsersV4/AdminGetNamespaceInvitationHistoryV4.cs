// Copyright (c) 2022-2023 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Iam.Model;

namespace AccelByte.Sdk.Api.Iam.Operation
{
    /// <summary>
    /// AdminGetNamespaceInvitationHistoryV4
    ///
    /// This endpoint is to Invitation Historiy for specific new studio namespace in multi tenant mode.
    /// It will return error if the service multi tenant mode is set to false.
    /// </summary>
    public class AdminGetNamespaceInvitationHistoryV4 : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static AdminGetNamespaceInvitationHistoryV4Builder Builder { get => new AdminGetNamespaceInvitationHistoryV4Builder(); }

        public class AdminGetNamespaceInvitationHistoryV4Builder
            : OperationBuilder<AdminGetNamespaceInvitationHistoryV4Builder>
        {





            internal AdminGetNamespaceInvitationHistoryV4Builder() { }

            internal AdminGetNamespaceInvitationHistoryV4Builder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }






            public AdminGetNamespaceInvitationHistoryV4 Build(
                string namespace_
            )
            {
                AdminGetNamespaceInvitationHistoryV4 op = new AdminGetNamespaceInvitationHistoryV4(this,
                    namespace_
                );

                op.SetBaseFields<AdminGetNamespaceInvitationHistoryV4Builder>(this);
                return op;
            }

            public Model.ModelInvitationHistoryResponse? Execute(
                string namespace_
            )
            {
                AdminGetNamespaceInvitationHistoryV4 op = Build(
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
        }

        private AdminGetNamespaceInvitationHistoryV4(AdminGetNamespaceInvitationHistoryV4Builder builder,
            string namespace_
        )
        {
            PathParams["namespace"] = namespace_;







            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public AdminGetNamespaceInvitationHistoryV4(
            string namespace_
        )
        {
            PathParams["namespace"] = namespace_;







            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/iam/v4/admin/namespaces/{namespace}/invitationHistories";

        public override HttpMethod Method => HttpMethod.Get;

        public override List<string> Consumes => new() { };

        public override List<string> Produces => new() { "application/json" };

        public Model.ModelInvitationHistoryResponse? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                return JsonSerializer.Deserialize<Model.ModelInvitationHistoryResponse>(payload, ResponseJsonOptions);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.ModelInvitationHistoryResponse>(payload, ResponseJsonOptions);
            }

            var payloadString = payload.ReadToString();

            throw new HttpResponseException(code, payloadString);
        }
    }

}