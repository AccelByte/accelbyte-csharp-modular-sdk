// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Iam.Model;

namespace AccelByte.Sdk.Api.Iam.Operation
{
    /// <summary>
    /// PublicChallengeMyMFAV4
    ///
    /// This endpoint will verify user's' MFA code and generate a MFA token for the action.
    /// </summary>
    public class PublicChallengeMyMFAV4 : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static PublicChallengeMyMFAV4Builder Builder { get => new PublicChallengeMyMFAV4Builder(); }

        public class PublicChallengeMyMFAV4Builder
            : OperationBuilder<PublicChallengeMyMFAV4Builder>
        {



            public string? Code { get; set; }

            public string? Factor { get; set; }



            internal PublicChallengeMyMFAV4Builder() { }

            internal PublicChallengeMyMFAV4Builder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }




            public PublicChallengeMyMFAV4Builder SetCode(string _code)
            {
                Code = _code;
                return this;
            }

            public PublicChallengeMyMFAV4Builder SetFactor(string _factor)
            {
                Factor = _factor;
                return this;
            }



            public PublicChallengeMyMFAV4 Build(
                string namespace_
            )
            {
                PublicChallengeMyMFAV4 op = new PublicChallengeMyMFAV4(this,
                    namespace_
                );

                op.SetBaseFields<PublicChallengeMyMFAV4Builder>(this);
                return op;
            }

            public Model.ModelUserMFATokenResponseV4? Execute(
                string namespace_
            )
            {
                PublicChallengeMyMFAV4 op = Build(
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
            public async Task<Model.ModelUserMFATokenResponseV4?> ExecuteAsync(
                string namespace_
            )
            {
                PublicChallengeMyMFAV4 op = Build(
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
        }

        private PublicChallengeMyMFAV4(PublicChallengeMyMFAV4Builder builder,
            string namespace_
        )
        {
            PathParams["namespace"] = namespace_;


            if (builder.Code is not null) FormParams["code"] = builder.Code;
            if (builder.Factor is not null) FormParams["factor"] = builder.Factor;





            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public PublicChallengeMyMFAV4(
            string namespace_,
            string? code,
            string? factor
        )
        {
            PathParams["namespace"] = namespace_;


            if (code is not null) FormParams["code"] = code;
            if (factor is not null) FormParams["factor"] = factor;





            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/iam/v4/public/namespaces/{namespace}/users/me/mfa/challenge/verify";

        public override HttpMethod Method => HttpMethod.Post;

        public override List<string> Consumes => new() { "application/x-www-form-urlencoded" };

        public override List<string> Produces => new() { "application/json" };

        public Model.ModelUserMFATokenResponseV4? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                return JsonSerializer.Deserialize<Model.ModelUserMFATokenResponseV4>(payload, ResponseJsonOptions);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.ModelUserMFATokenResponseV4>(payload, ResponseJsonOptions);
            }

            var payloadString = payload.ReadToString();

            throw new HttpResponseException(code, payloadString);
        }
    }

}