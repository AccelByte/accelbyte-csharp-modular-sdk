// Copyright (c) 2022-2023 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Iam.Model;

namespace AccelByte.Sdk.Api.Iam.Operation
{
    /// <summary>
    /// PublicMakeFactorMyDefaultV4
    ///
    /// This endpoint is used to make 2FA factor default.
    /// </summary>
    public class PublicMakeFactorMyDefaultV4 : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static PublicMakeFactorMyDefaultV4Builder Builder { get => new PublicMakeFactorMyDefaultV4Builder(); }

        public class PublicMakeFactorMyDefaultV4Builder
            : OperationBuilder<PublicMakeFactorMyDefaultV4Builder>
        {





            internal PublicMakeFactorMyDefaultV4Builder() { }

            internal PublicMakeFactorMyDefaultV4Builder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }






            public PublicMakeFactorMyDefaultV4 Build(
                string factor,
                string namespace_
            )
            {
                PublicMakeFactorMyDefaultV4 op = new PublicMakeFactorMyDefaultV4(this,
                    factor,
                    namespace_
                );

                op.SetBaseFields<PublicMakeFactorMyDefaultV4Builder>(this);
                return op;
            }

            public void Execute(
                string factor,
                string namespace_
            )
            {
                PublicMakeFactorMyDefaultV4 op = Build(
                    factor,
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
        }

        private PublicMakeFactorMyDefaultV4(PublicMakeFactorMyDefaultV4Builder builder,
            string factor,
            string namespace_
        )
        {
            PathParams["namespace"] = namespace_;


            if (factor is not null) FormParams["factor"] = factor;





            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public PublicMakeFactorMyDefaultV4(
            string namespace_,
            string factor
        )
        {
            PathParams["namespace"] = namespace_;


            if (factor is not null) FormParams["factor"] = factor;





            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/iam/v4/public/namespaces/{namespace}/users/me/mfa/factor";

        public override HttpMethod Method => HttpMethod.Post;

        public override List<string> Consumes => new() { "application/x-www-form-urlencoded" };

        public override List<string> Produces => new() { "application/json" };

        public void ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return;
            }

            var payloadString = payload.ReadToString();

            throw new HttpResponseException(code, payloadString);
        }
    }

}