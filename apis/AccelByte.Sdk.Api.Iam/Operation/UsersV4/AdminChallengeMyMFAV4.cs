// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Iam.Model;

namespace AccelByte.Sdk.Api.Iam.Operation
{
    /// <summary>
    /// AdminChallengeMyMFAV4
    ///
    /// This endpoint will verify user's' MFA code and generate a MFA token.
    /// </summary>
    public class AdminChallengeMyMFAV4 : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static AdminChallengeMyMFAV4Builder Builder { get => new AdminChallengeMyMFAV4Builder(); }

        public class AdminChallengeMyMFAV4Builder
            : OperationBuilder<AdminChallengeMyMFAV4Builder>
        {



            public string? Code { get; set; }

            public string? Factor { get; set; }



            internal AdminChallengeMyMFAV4Builder() { }

            internal AdminChallengeMyMFAV4Builder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }




            public AdminChallengeMyMFAV4Builder SetCode(string _code)
            {
                Code = _code;
                return this;
            }

            public AdminChallengeMyMFAV4Builder SetFactor(string _factor)
            {
                Factor = _factor;
                return this;
            }



            public AdminChallengeMyMFAV4 Build(
            )
            {
                AdminChallengeMyMFAV4 op = new AdminChallengeMyMFAV4(this
                );

                op.SetBaseFields<AdminChallengeMyMFAV4Builder>(this);
                return op;
            }

            public AdminChallengeMyMFAV4.Response Execute(
            )
            {
                AdminChallengeMyMFAV4 op = Build(
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
            public async Task<AdminChallengeMyMFAV4.Response> ExecuteAsync(
            )
            {
                AdminChallengeMyMFAV4 op = Build(
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
        }

        private AdminChallengeMyMFAV4(AdminChallengeMyMFAV4Builder builder
        )
        {
            
            
            if (builder.Code is not null) FormParams["code"] = builder.Code;
            if (builder.Factor is not null) FormParams["factor"] = builder.Factor;

            
            
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        #region Response Part        
        public class Response : ApiResponse<Model.ModelUserMFATokenResponseV4>
        {

            public RestErrorResponse? Error400 { get; set; } = null;

            public RestErrorResponse? Error401 { get; set; } = null;

            public RestErrorResponse? Error403 { get; set; } = null;

            public RestErrorResponse? Error404 { get; set; } = null;

            public RestErrorResponse? Error500 { get; set; } = null;


            protected override string GetFullOperationId() => "Iam::UsersV4::AdminChallengeMyMFAV4";
        }

        #endregion

        public AdminChallengeMyMFAV4(
            string? code,            
            string? factor            
        )
        {
            
            
            if (code is not null) FormParams["code"] = code;
            if (factor is not null) FormParams["factor"] = factor;

            
            
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/iam/v4/admin/users/me/mfa/challenge/verify";

        public override HttpMethod Method => HttpMethod.Post;

        public override List<string> Consumes => new() { "application/x-www-form-urlencoded" };

        public override List<string> Produces => new() { "application/json" };
        
        public AdminChallengeMyMFAV4.Response ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            var response = new AdminChallengeMyMFAV4.Response()
            {
                StatusCode = code,
                ContentType = contentType
            };

            if (code == (HttpStatusCode)204)
            {
                response.IsSuccess = true;
            }
            else if ((code == (HttpStatusCode)201) || (code == (HttpStatusCode)202) || (code == (HttpStatusCode)200))
            {
                response.Data = JsonSerializer.Deserialize<Model.ModelUserMFATokenResponseV4>(payload, ResponseJsonOptions);
                response.IsSuccess = true;
            }
            else if (code == (HttpStatusCode)400)
            {
                response.Error400 = JsonSerializer.Deserialize<RestErrorResponse>(payload, ResponseJsonOptions);
                response.Error = response.Error400!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)401)
            {
                response.Error401 = JsonSerializer.Deserialize<RestErrorResponse>(payload, ResponseJsonOptions);
                response.Error = response.Error401!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)403)
            {
                response.Error403 = JsonSerializer.Deserialize<RestErrorResponse>(payload, ResponseJsonOptions);
                response.Error = response.Error403!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)404)
            {
                response.Error404 = JsonSerializer.Deserialize<RestErrorResponse>(payload, ResponseJsonOptions);
                response.Error = response.Error404!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)500)
            {
                response.Error500 = JsonSerializer.Deserialize<RestErrorResponse>(payload, ResponseJsonOptions);
                response.Error = response.Error500!.TranslateToApiError();
            }

            return response;
        }
    }

}