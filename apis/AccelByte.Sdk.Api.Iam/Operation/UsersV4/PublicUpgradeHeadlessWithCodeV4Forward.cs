// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Iam.Model;

namespace AccelByte.Sdk.Api.Iam.Operation
{
    /// <summary>
    /// PublicUpgradeHeadlessWithCodeV4Forward
    ///
    /// This is a forward version for code verify.
    /// The endpoint upgrades a headless account by linking the headless account with the email address, username, and password.
    /// By upgrading the headless account into a full account, the user could use the email address, username, and password for using Justice IAM.
    /// 
    /// The endpoint is a shortcut for upgrading a headless account and verifying the email address in one call.
    /// In order to get a verification code for the endpoint, please check the [send verification code endpoint](#operations-Users-PublicSendCodeForwardV3).
    /// 
    /// This endpoint also have an ability to update user data (if the user data field is specified) right after the upgrade account process is done.
    /// </summary>
    public class PublicUpgradeHeadlessWithCodeV4Forward : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static PublicUpgradeHeadlessWithCodeV4ForwardBuilder Builder { get => new PublicUpgradeHeadlessWithCodeV4ForwardBuilder(); }

        public class PublicUpgradeHeadlessWithCodeV4ForwardBuilder
            : OperationBuilder<PublicUpgradeHeadlessWithCodeV4ForwardBuilder>
        {





            internal PublicUpgradeHeadlessWithCodeV4ForwardBuilder() { }

            internal PublicUpgradeHeadlessWithCodeV4ForwardBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }






            public PublicUpgradeHeadlessWithCodeV4Forward Build(
                AccountUpgradeHeadlessAccountWithVerificationCodeForwardRequestV4 body
            )
            {
                PublicUpgradeHeadlessWithCodeV4Forward op = new PublicUpgradeHeadlessWithCodeV4Forward(this,
                    body
                );

                op.SetBaseFields<PublicUpgradeHeadlessWithCodeV4ForwardBuilder>(this);
                return op;
            }

            public PublicUpgradeHeadlessWithCodeV4Forward.Response Execute(
                AccountUpgradeHeadlessAccountWithVerificationCodeForwardRequestV4 body
            )
            {
                PublicUpgradeHeadlessWithCodeV4Forward op = Build(
                    body
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
            public async Task<PublicUpgradeHeadlessWithCodeV4Forward.Response> ExecuteAsync(
                AccountUpgradeHeadlessAccountWithVerificationCodeForwardRequestV4 body
            )
            {
                PublicUpgradeHeadlessWithCodeV4Forward op = Build(
                    body
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
        }

        private PublicUpgradeHeadlessWithCodeV4Forward(PublicUpgradeHeadlessWithCodeV4ForwardBuilder builder,
            AccountUpgradeHeadlessAccountWithVerificationCodeForwardRequestV4 body
        )
        {





            BodyParams = body;


            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        #region Response Part        
        public class Response : ApiResponse<string>
        {

            public string Error302 { get; set; } = "";


            protected override string GetFullOperationId() => "Iam::UsersV4::PublicUpgradeHeadlessWithCodeV4Forward";
        }

        #endregion

        public PublicUpgradeHeadlessWithCodeV4Forward(
            Model.AccountUpgradeHeadlessAccountWithVerificationCodeForwardRequestV4 body
        )
        {





            BodyParams = body;


            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/iam/v4/public/users/me/headless/code/verify/forward";

        public override HttpMethod Method => HttpMethod.Post;

        public override List<string> Consumes => new() { "application/json" };

        public override List<string> Produces => new() { "application/json" };

        public PublicUpgradeHeadlessWithCodeV4Forward.Response ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            var response = new PublicUpgradeHeadlessWithCodeV4Forward.Response()
            {
                StatusCode = code,
                ContentType = contentType
            };

            if (code == (HttpStatusCode)302)
            {
                response.Data = payload.ReadToString();
                response.IsSuccess = true;
            }

            return response;
        }
    }

}