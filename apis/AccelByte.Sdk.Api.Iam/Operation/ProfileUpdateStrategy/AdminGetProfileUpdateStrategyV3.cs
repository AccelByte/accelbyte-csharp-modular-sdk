// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Iam.Model;

namespace AccelByte.Sdk.Api.Iam.Operation
{
    /// <summary>
    /// AdminGetProfileUpdateStrategyV3
    ///
    /// This API is for admin to get profile update strategy by namespace and field.
    /// Note: If the config is not found, this API will return a config with unlimited.
    /// </summary>
    public class AdminGetProfileUpdateStrategyV3 : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static AdminGetProfileUpdateStrategyV3Builder Builder { get => new AdminGetProfileUpdateStrategyV3Builder(); }

        public class AdminGetProfileUpdateStrategyV3Builder
            : OperationBuilder<AdminGetProfileUpdateStrategyV3Builder>
        {

            public AdminGetProfileUpdateStrategyV3Field? Field { get; set; }





            internal AdminGetProfileUpdateStrategyV3Builder() { }

            internal AdminGetProfileUpdateStrategyV3Builder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }


            public AdminGetProfileUpdateStrategyV3Builder SetField(AdminGetProfileUpdateStrategyV3Field _field)
            {
                Field = _field;
                return this;
            }





            public AdminGetProfileUpdateStrategyV3 Build(
                string namespace_
            )
            {
                AdminGetProfileUpdateStrategyV3 op = new AdminGetProfileUpdateStrategyV3(this,
                    namespace_
                );

                op.SetBaseFields<AdminGetProfileUpdateStrategyV3Builder>(this);
                return op;
            }

            public Model.ModelGetProfileUpdateStrategyConfigResponse? Execute(
                string namespace_
            )
            {
                AdminGetProfileUpdateStrategyV3 op = Build(
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
            public async Task<Model.ModelGetProfileUpdateStrategyConfigResponse?> ExecuteAsync(
                string namespace_
            )
            {
                AdminGetProfileUpdateStrategyV3 op = Build(
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
        }

        private AdminGetProfileUpdateStrategyV3(AdminGetProfileUpdateStrategyV3Builder builder,
            string namespace_
        )
        {
            PathParams["namespace"] = namespace_;

            if (builder.Field is not null) QueryParams["field"] = builder.Field.Value;






            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public AdminGetProfileUpdateStrategyV3(
            string namespace_,
            AdminGetProfileUpdateStrategyV3Field? field
        )
        {
            PathParams["namespace"] = namespace_;

            if (field is not null) QueryParams["field"] = field.Value;






            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/iam/v3/admin/namespaces/{namespace}/profileUpdateStrategies";

        public override HttpMethod Method => HttpMethod.Get;

        public override List<string> Consumes => new() { };

        public override List<string> Produces => new() { "application/json" };

        public Model.ModelGetProfileUpdateStrategyConfigResponse? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                return JsonSerializer.Deserialize<Model.ModelGetProfileUpdateStrategyConfigResponse>(payload, ResponseJsonOptions);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.ModelGetProfileUpdateStrategyConfigResponse>(payload, ResponseJsonOptions);
            }

            var payloadString = payload.ReadToString();

            throw new HttpResponseException(code, payloadString);
        }
    }

    public class AdminGetProfileUpdateStrategyV3Field : StringEnum<AdminGetProfileUpdateStrategyV3Field>
    {
        public static readonly AdminGetProfileUpdateStrategyV3Field Country
            = new AdminGetProfileUpdateStrategyV3Field("country");

        public static readonly AdminGetProfileUpdateStrategyV3Field DisplayName
            = new AdminGetProfileUpdateStrategyV3Field("display_name");

        public static readonly AdminGetProfileUpdateStrategyV3Field Dob
            = new AdminGetProfileUpdateStrategyV3Field("dob");

        public static readonly AdminGetProfileUpdateStrategyV3Field Username
            = new AdminGetProfileUpdateStrategyV3Field("username");


        public static implicit operator AdminGetProfileUpdateStrategyV3Field(string value)
        {
            return NewValue(value);
        }

        public AdminGetProfileUpdateStrategyV3Field(string enumValue)
            : base(enumValue)
        {

        }
    }

}