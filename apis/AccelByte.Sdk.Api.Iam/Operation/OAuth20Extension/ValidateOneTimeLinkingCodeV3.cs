// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Iam.Model;

namespace AccelByte.Sdk.Api.Iam.Operation
{
    /// <summary>
    /// ValidateOneTimeLinkingCodeV3
    ///
    /// This endpoint is being used to validate one time link code.
    /// </summary>
    public class ValidateOneTimeLinkingCodeV3 : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static ValidateOneTimeLinkingCodeV3Builder Builder { get => new ValidateOneTimeLinkingCodeV3Builder(); }

        public class ValidateOneTimeLinkingCodeV3Builder
            : OperationBuilder<ValidateOneTimeLinkingCodeV3Builder>
        {





            internal ValidateOneTimeLinkingCodeV3Builder() { }

            internal ValidateOneTimeLinkingCodeV3Builder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }






            public ValidateOneTimeLinkingCodeV3 Build(
                string oneTimeLinkCode
            )
            {
                ValidateOneTimeLinkingCodeV3 op = new ValidateOneTimeLinkingCodeV3(this,
                    oneTimeLinkCode                    
                );

                op.SetBaseFields<ValidateOneTimeLinkingCodeV3Builder>(this);
                return op;
            }

            public ValidateOneTimeLinkingCodeV3.Response Execute(
                string oneTimeLinkCode
            )
            {
                ValidateOneTimeLinkingCodeV3 op = Build(
                    oneTimeLinkCode
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
            public async Task<ValidateOneTimeLinkingCodeV3.Response> ExecuteAsync(
                string oneTimeLinkCode
            )
            {
                ValidateOneTimeLinkingCodeV3 op = Build(
                    oneTimeLinkCode
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
        }

        private ValidateOneTimeLinkingCodeV3(ValidateOneTimeLinkingCodeV3Builder builder,
            string oneTimeLinkCode
        )
        {
            
            
            if (oneTimeLinkCode is not null) FormParams["oneTimeLinkCode"] = oneTimeLinkCode;

            
            
            

        }
        #endregion

        #region Response Part        
        public class Response : ApiResponse<Model.OauthmodelOneTimeLinkingCodeValidationResponse>
        {


            protected override string GetFullOperationId() => "Iam::OAuth20Extension::ValidateOneTimeLinkingCodeV3";
        }

        #endregion

        public ValidateOneTimeLinkingCodeV3(
            string oneTimeLinkCode            
        )
        {
            
            
            if (oneTimeLinkCode is not null) FormParams["oneTimeLinkCode"] = oneTimeLinkCode;

            
            
            

        }

        public override string Path => "/iam/v3/link/code/validate";

        public override HttpMethod Method => HttpMethod.Post;

        public override List<string> Consumes => new() { "application/x-www-form-urlencoded" };

        public override List<string> Produces => new() { "application/json" };
        
        public ValidateOneTimeLinkingCodeV3.Response ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            var response = new ValidateOneTimeLinkingCodeV3.Response()
            {
                StatusCode = code,
                ContentType = contentType
            };

            if (code == (HttpStatusCode)204)
            {
                response.IsSuccess = true;
            }
            else if ((code == (HttpStatusCode)201) || (code == (HttpStatusCode)202) || (code == (HttpStatusCode)200))
            {
                response.Data = JsonSerializer.Deserialize<Model.OauthmodelOneTimeLinkingCodeValidationResponse>(payload, ResponseJsonOptions);
                response.IsSuccess = true;
            }

            return response;
        }
    }

}