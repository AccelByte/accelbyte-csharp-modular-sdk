// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Iam.Model;

namespace AccelByte.Sdk.Api.Iam.Operation
{
    /// <summary>
    /// UpgradeAndAuthenticateForwardV3
    ///
    /// In login website based flow, after account upgraded, we need this API to handle the forward
    /// </summary>
    public class UpgradeAndAuthenticateForwardV3 : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static UpgradeAndAuthenticateForwardV3Builder Builder { get => new UpgradeAndAuthenticateForwardV3Builder(); }

        public class UpgradeAndAuthenticateForwardV3Builder
            : OperationBuilder<UpgradeAndAuthenticateForwardV3Builder>
        {





            internal UpgradeAndAuthenticateForwardV3Builder() { }

            internal UpgradeAndAuthenticateForwardV3Builder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }






            public UpgradeAndAuthenticateForwardV3 Build(
                string clientId,
                string upgradeSuccessToken
            )
            {
                UpgradeAndAuthenticateForwardV3 op = new UpgradeAndAuthenticateForwardV3(this,
                    clientId,
                    upgradeSuccessToken
                );

                op.SetBaseFields<UpgradeAndAuthenticateForwardV3Builder>(this);
                return op;
            }

            public UpgradeAndAuthenticateForwardV3.Response Execute(
                string clientId,
                string upgradeSuccessToken
            )
            {
                UpgradeAndAuthenticateForwardV3 op = Build(
                    clientId,
                    upgradeSuccessToken
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
            public async Task<UpgradeAndAuthenticateForwardV3.Response> ExecuteAsync(
                string clientId,
                string upgradeSuccessToken
            )
            {
                UpgradeAndAuthenticateForwardV3 op = Build(
                    clientId,
                    upgradeSuccessToken
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
        }

        private UpgradeAndAuthenticateForwardV3(UpgradeAndAuthenticateForwardV3Builder builder,
            string clientId,
            string upgradeSuccessToken
        )
        {


            if (clientId is not null) FormParams["client_id"] = clientId;
            if (upgradeSuccessToken is not null) FormParams["upgrade_success_token"] = upgradeSuccessToken;





            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        #region Response Part        
        public class Response : ApiResponse<string>
        {

            public string Error302 { get; set; } = "";


            protected override string GetFullOperationId() => "Iam::OAuth20Extension::UpgradeAndAuthenticateForwardV3";
        }

        #endregion

        public UpgradeAndAuthenticateForwardV3(
            string clientId,
            string upgradeSuccessToken
        )
        {


            if (clientId is not null) FormParams["client_id"] = clientId;
            if (upgradeSuccessToken is not null) FormParams["upgrade_success_token"] = upgradeSuccessToken;





            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/iam/v3/upgrade/forward";

        public override HttpMethod Method => HttpMethod.Post;

        public override List<string> Consumes => new() { "application/x-www-form-urlencoded" };

        public override List<string> Produces => new() { "application/json" };

        public UpgradeAndAuthenticateForwardV3.Response ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            var response = new UpgradeAndAuthenticateForwardV3.Response()
            {
                StatusCode = code,
                ContentType = contentType
            };

            if (code == (HttpStatusCode)302)
            {
                response.Data = payload.ReadToString();
                response.IsSuccess = true;
            }

            return response;
        }
    }

}