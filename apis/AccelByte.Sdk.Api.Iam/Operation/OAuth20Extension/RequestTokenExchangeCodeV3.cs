// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Iam.Model;

namespace AccelByte.Sdk.Api.Iam.Operation
{
    /// <summary>
    /// RequestTokenExchangeCodeV3
    ///
    /// This endpoint is being used to request the code to exchange a new token.
    /// The target new token's clientId should NOT be same with current using one.
    /// Path namespace should be target namespace.
    /// Client ID should match the target namespace.
    /// 
    /// The code in response can be consumed by `/iam/v3/token/exchange`
    /// </summary>
    public class RequestTokenExchangeCodeV3 : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static RequestTokenExchangeCodeV3Builder Builder { get => new RequestTokenExchangeCodeV3Builder(); }

        public class RequestTokenExchangeCodeV3Builder
            : OperationBuilder<RequestTokenExchangeCodeV3Builder>
        {

            public string? CodeChallenge { get; set; }

            public RequestTokenExchangeCodeV3CodeChallengeMethod? CodeChallengeMethod { get; set; }





            internal RequestTokenExchangeCodeV3Builder() { }

            internal RequestTokenExchangeCodeV3Builder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }


            public RequestTokenExchangeCodeV3Builder SetCodeChallenge(string _codeChallenge)
            {
                CodeChallenge = _codeChallenge;
                return this;
            }

            public RequestTokenExchangeCodeV3Builder SetCodeChallengeMethod(RequestTokenExchangeCodeV3CodeChallengeMethod _codeChallengeMethod)
            {
                CodeChallengeMethod = _codeChallengeMethod;
                return this;
            }





            public RequestTokenExchangeCodeV3 Build(
                string clientId,
                string namespace_
            )
            {
                RequestTokenExchangeCodeV3 op = new RequestTokenExchangeCodeV3(this,
                    clientId,                    
                    namespace_                    
                );

                op.SetBaseFields<RequestTokenExchangeCodeV3Builder>(this);
                return op;
            }

            public RequestTokenExchangeCodeV3.Response Execute(
                string clientId,
                string namespace_
            )
            {
                RequestTokenExchangeCodeV3 op = Build(
                    clientId,
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
            public async Task<RequestTokenExchangeCodeV3.Response> ExecuteAsync(
                string clientId,
                string namespace_
            )
            {
                RequestTokenExchangeCodeV3 op = Build(
                    clientId,
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
        }

        private RequestTokenExchangeCodeV3(RequestTokenExchangeCodeV3Builder builder,
            string clientId,
            string namespace_
        )
        {
            PathParams["namespace"] = namespace_;
            
            if (builder.CodeChallenge is not null) QueryParams["code_challenge"] = builder.CodeChallenge;
            if (builder.CodeChallengeMethod is not null) QueryParams["code_challenge_method"] = builder.CodeChallengeMethod.Value;
            
            if (clientId is not null) FormParams["client_id"] = clientId;

            
            
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        #region Response Part        
        public class Response : ApiResponse<Model.OauthmodelTargetTokenCodeResponse>
        {


            protected override string GetFullOperationId() => "Iam::OAuth20Extension::RequestTokenExchangeCodeV3";
        }

        #endregion

        public RequestTokenExchangeCodeV3(
            string namespace_,            
            string? codeChallenge,            
            RequestTokenExchangeCodeV3CodeChallengeMethod? codeChallengeMethod,            
            string clientId            
        )
        {
            PathParams["namespace"] = namespace_;
            
            if (codeChallenge is not null) QueryParams["code_challenge"] = codeChallenge;
            if (codeChallengeMethod is not null) QueryParams["code_challenge_method"] = codeChallengeMethod.Value;
            
            if (clientId is not null) FormParams["client_id"] = clientId;

            
            
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/iam/v3/namespace/{namespace}/token/request";

        public override HttpMethod Method => HttpMethod.Post;

        public override List<string> Consumes => new() { "application/x-www-form-urlencoded" };

        public override List<string> Produces => new() { "application/json" };
        
        public RequestTokenExchangeCodeV3.Response ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            var response = new RequestTokenExchangeCodeV3.Response()
            {
                StatusCode = code,
                ContentType = contentType
            };

            if (code == (HttpStatusCode)204)
            {
                response.IsSuccess = true;
            }
            else if ((code == (HttpStatusCode)201) || (code == (HttpStatusCode)202) || (code == (HttpStatusCode)200))
            {
                response.Data = JsonSerializer.Deserialize<Model.OauthmodelTargetTokenCodeResponse>(payload, ResponseJsonOptions);
                response.IsSuccess = true;
            }

            return response;
        }
    }

    public class RequestTokenExchangeCodeV3CodeChallengeMethod : StringEnum<RequestTokenExchangeCodeV3CodeChallengeMethod>
    {
        public static readonly RequestTokenExchangeCodeV3CodeChallengeMethod S256
            = new RequestTokenExchangeCodeV3CodeChallengeMethod("S256");

        public static readonly RequestTokenExchangeCodeV3CodeChallengeMethod Plain
            = new RequestTokenExchangeCodeV3CodeChallengeMethod("plain");


        public static implicit operator RequestTokenExchangeCodeV3CodeChallengeMethod(string value)
        {
            return NewValue(value);
        }

        public RequestTokenExchangeCodeV3CodeChallengeMethod(string enumValue)
            : base(enumValue)
        {

        }
    }

}