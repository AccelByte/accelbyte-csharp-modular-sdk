// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Iam.Model;

namespace AccelByte.Sdk.Api.Iam.Operation
{
    /// <summary>
    /// PlatformTokenRefreshV3
    ///
    /// This endpoint will validate the third party platform token, for some platforms will also refresh the token stored in IAM, it will not generate any event or AB access/refresh token.
    /// This endpoint can be used by game client to refresh third party token if game client got platform token not found error, for example got 404
    /// platform token not found from IAP/DLC.
    /// 
    /// ## Platforms will refresh stored token:
    /// - **twitch**: The platform_tokenâs value is the authorization code returned by Twitch OAuth.
    /// - **epicgames**: The platform_tokenâs value is an access-token or authorization code obtained from Epicgames EOS Account Service.
    /// - **ps4**: The platform_tokenâs value is the authorization code returned by Sony OAuth.
    /// - **ps5**: The platform_tokenâs value is the authorization code returned by Sony OAuth.
    /// - **amazon**: The platform_tokenâs value is authorization code.
    /// - **awscognito**: The platform_tokenâs value is the aws cognito access token or id token (JWT).
    /// - **live**: The platform_tokenâs value is xbox XSTS token
    /// - **snapchat**: The platform_tokenâs value is the authorization code returned by Snapchat OAuth.
    /// - **for specific generic oauth (OIDC)**: The platform_tokenâs value should be the same type as created OIDC auth type whether it is auth code, idToken or bearerToken.
    /// </summary>
    public class PlatformTokenRefreshV3 : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static PlatformTokenRefreshV3Builder Builder { get => new PlatformTokenRefreshV3Builder(); }

        public class PlatformTokenRefreshV3Builder
            : OperationBuilder<PlatformTokenRefreshV3Builder>
        {





            internal PlatformTokenRefreshV3Builder() { }

            internal PlatformTokenRefreshV3Builder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }






            public PlatformTokenRefreshV3 Build(
                string platformToken,
                string platformId
            )
            {
                PlatformTokenRefreshV3 op = new PlatformTokenRefreshV3(this,
                    platformToken,                    
                    platformId                    
                );

                op.SetBaseFields<PlatformTokenRefreshV3Builder>(this);
                return op;
            }

            public PlatformTokenRefreshV3.Response Execute(
                string platformToken,
                string platformId
            )
            {
                PlatformTokenRefreshV3 op = Build(
                    platformToken,
                    platformId
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
            public async Task<PlatformTokenRefreshV3.Response> ExecuteAsync(
                string platformToken,
                string platformId
            )
            {
                PlatformTokenRefreshV3 op = Build(
                    platformToken,
                    platformId
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
        }

        private PlatformTokenRefreshV3(PlatformTokenRefreshV3Builder builder,
            string platformToken,
            string platformId
        )
        {
            PathParams["platformId"] = platformId;
            
            
            if (platformToken is not null) FormParams["platform_token"] = platformToken;

            
            
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        #region Response Part        
        public class Response : ApiResponse<Model.OauthmodelPlatformTokenRefreshResponseV3>
        {

            public OauthmodelErrorResponse? Error400 { get; set; } = null;

            public OauthmodelErrorResponse? Error401 { get; set; } = null;

            public OauthmodelErrorResponse? Error403 { get; set; } = null;

            public OauthmodelErrorResponse? Error503 { get; set; } = null;


            protected override string GetFullOperationId() => "Iam::OAuth20Extension::PlatformTokenRefreshV3";
        }

        #endregion

        public PlatformTokenRefreshV3(
            string platformId,            
            string platformToken            
        )
        {
            PathParams["platformId"] = platformId;
            
            
            if (platformToken is not null) FormParams["platform_token"] = platformToken;

            
            
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/iam/v3/platforms/{platformId}/token/verify";

        public override HttpMethod Method => HttpMethod.Post;

        public override List<string> Consumes => new() { "application/x-www-form-urlencoded" };

        public override List<string> Produces => new() { "application/json" };
        
        public PlatformTokenRefreshV3.Response ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            var response = new PlatformTokenRefreshV3.Response()
            {
                StatusCode = code,
                ContentType = contentType
            };

            if (code == (HttpStatusCode)204)
            {
                response.IsSuccess = true;
            }
            else if ((code == (HttpStatusCode)201) || (code == (HttpStatusCode)202) || (code == (HttpStatusCode)200))
            {
                response.Data = JsonSerializer.Deserialize<Model.OauthmodelPlatformTokenRefreshResponseV3>(payload, ResponseJsonOptions);
                response.IsSuccess = true;
            }
            else if (code == (HttpStatusCode)400)
            {
                response.Error400 = JsonSerializer.Deserialize<OauthmodelErrorResponse>(payload, ResponseJsonOptions);
                response.Error = response.Error400!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)401)
            {
                response.Error401 = JsonSerializer.Deserialize<OauthmodelErrorResponse>(payload, ResponseJsonOptions);
                response.Error = response.Error401!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)403)
            {
                response.Error403 = JsonSerializer.Deserialize<OauthmodelErrorResponse>(payload, ResponseJsonOptions);
                response.Error = response.Error403!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)503)
            {
                response.Error503 = JsonSerializer.Deserialize<OauthmodelErrorResponse>(payload, ResponseJsonOptions);
                response.Error = response.Error503!.TranslateToApiError();
            }

            return response;
        }
    }

}