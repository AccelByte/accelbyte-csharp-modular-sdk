// Copyright (c) 2022-2023 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Iam.Model;

namespace AccelByte.Sdk.Api.Iam.Operation
{
    /// <summary>
    /// Change2FAMethod
    ///
    /// Change 2FA method
    /// This endpoint is used for change 2FA method. Only enabled methods are accepted.
    /// Supported methods:
    /// - authenticator
    /// - backupCode
    /// - email
    /// </summary>
    public class Change2faMethod : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static Change2faMethodBuilder Builder { get => new Change2faMethodBuilder(); }

        public class Change2faMethodBuilder
            : OperationBuilder<Change2faMethodBuilder>
        {





            internal Change2faMethodBuilder() { }

            internal Change2faMethodBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }






            public Change2faMethod Build(
                string factor,
                string mfaToken
            )
            {
                Change2faMethod op = new Change2faMethod(this,
                    factor,
                    mfaToken
                );

                op.SetBaseFields<Change2faMethodBuilder>(this);
                return op;
            }

            public void Execute(
                string factor,
                string mfaToken
            )
            {
                Change2faMethod op = Build(
                    factor,
                    mfaToken
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
        }

        private Change2faMethod(Change2faMethodBuilder builder,
            string factor,
            string mfaToken
        )
        {


            if (factor is not null) FormParams["factor"] = factor;
            if (mfaToken is not null) FormParams["mfaToken"] = mfaToken;





            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public Change2faMethod(
            string factor,
            string mfaToken
        )
        {


            if (factor is not null) FormParams["factor"] = factor;
            if (mfaToken is not null) FormParams["mfaToken"] = mfaToken;





            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/iam/v3/oauth/mfa/factor/change";

        public override HttpMethod Method => HttpMethod.Post;

        public override List<string> Consumes => new() { "application/x-www-form-urlencoded" };

        public override List<string> Produces => new() { "application/json" };

        public void ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return;
            }

            var payloadString = payload.ReadToString();

            throw new HttpResponseException(code, payloadString);
        }
    }

}