// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Iam.Model;

namespace AccelByte.Sdk.Api.Iam.Operation
{
    /// <summary>
    /// SimultaneousLoginV3
    ///
    /// # This endpoint is in ALPHA, avoid using this endpoint fow now, reach out to AB support for inquiries
    /// 
    /// Simultaneous login flow.
    /// 
    /// The primary goals of this project are to entitle players to authenticate on a native PC platform(Steam/Epic) and the PlayStation platform,
    /// link their accounts, and provide support for platform sync with a valid 3rd platform access token.
    /// 
    /// ## Given a valid native ticket and empty simultaneous ticket, these cases will be failed
    /// - Native ticket's account is not linked AGS account yet
    /// - Native ticket's account is linked AGS account, but AGS account is not linked simultaneous platform yet
    /// - Native ticket's account is linked AGS account, AGS account is linked simultaneous platform but there is no available simultaneous token.(only if this platform is expected to store the platform token)
    /// 
    /// ## Given a valid native ticket and empty simultaneous ticket, this case will be success
    /// - Native ticket's account already linked AGS account, this AGS account already linked simultaneous platform. There is valid simultaneous token.(this is required only when this simultaneous is expected to cache platform token)
    /// 
    /// ## Given a valid native ticket token and valid simultaneous ticket, these cases will be failed
    /// #### Native ticket's account is already linked with AGS account
    /// - Native linked AGS account is linked this simultaneous platform but is different with simultaneous ticket's account
    /// - Native linked AGS account is not linked with simultaneous but has a linking history with simultaneous platform and it is different with simultaneous ticket's account
    /// #### Native ticket's account is not linked with AGS account and Simultaneous ticket's account is already linked wth AGS account
    /// - Simultaneous linked AGS account is linked this native platform but is different with native ticket's account
    /// - Simultaneous linked AGS account is not linked with native but has a linking history with native platform and it is different with native ticket's account
    /// 
    /// ## Given a valid native ticket and valid simultaneous ticket, these cases will be success
    /// - Native ticket's account & Simultaneous ticket's account are both not linked to AGS account yet
    /// - Native ticket's account & Simultaneous ticket's account are already linked to same AGS account
    /// </summary>
    public class SimultaneousLoginV3 : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static SimultaneousLoginV3Builder Builder { get => new SimultaneousLoginV3Builder(); }

        public class SimultaneousLoginV3Builder
            : OperationBuilder<SimultaneousLoginV3Builder>
        {



            public string? SimultaneousPlatform { get; set; }

            public string? SimultaneousTicket { get; set; }



            internal SimultaneousLoginV3Builder() { }

            internal SimultaneousLoginV3Builder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }




            public SimultaneousLoginV3Builder SetSimultaneousPlatform(string _simultaneousPlatform)
            {
                SimultaneousPlatform = _simultaneousPlatform;
                return this;
            }

            public SimultaneousLoginV3Builder SetSimultaneousTicket(string _simultaneousTicket)
            {
                SimultaneousTicket = _simultaneousTicket;
                return this;
            }



            public SimultaneousLoginV3 Build(
                SimultaneousLoginV3NativePlatform nativePlatform,
                string nativePlatformTicket
            )
            {
                SimultaneousLoginV3 op = new SimultaneousLoginV3(this,
                    nativePlatform,                    
                    nativePlatformTicket                    
                );

                op.SetBaseFields<SimultaneousLoginV3Builder>(this);
                return op;
            }

            public SimultaneousLoginV3.Response Execute(
                string nativePlatform,
                string nativePlatformTicket
            )
            {
                SimultaneousLoginV3 op = Build(
                    nativePlatform,
                    nativePlatformTicket
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
            public async Task<SimultaneousLoginV3.Response> ExecuteAsync(
                string nativePlatform,
                string nativePlatformTicket
            )
            {
                SimultaneousLoginV3 op = Build(
                    nativePlatform,
                    nativePlatformTicket
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
        }

        private SimultaneousLoginV3(SimultaneousLoginV3Builder builder,
            SimultaneousLoginV3NativePlatform nativePlatform,
            string nativePlatformTicket
        )
        {
            
            
            if (builder.SimultaneousPlatform is not null) FormParams["simultaneousPlatform"] = builder.SimultaneousPlatform;
            if (builder.SimultaneousTicket is not null) FormParams["simultaneousTicket"] = builder.SimultaneousTicket;
            if (nativePlatform is not null) FormParams["nativePlatform"] = nativePlatform.Value;
            if (nativePlatformTicket is not null) FormParams["nativePlatformTicket"] = nativePlatformTicket;

            
            
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        #region Response Part        
        public class Response : ApiResponse<Model.OauthmodelTokenResponseV3>
        {

            public RestErrorResponse? Error400 { get; set; } = null;

            public RestErrorResponse? Error401 { get; set; } = null;

            public RestErrorResponse? Error409 { get; set; } = null;

            public RestErrorResponse? Error500 { get; set; } = null;


            protected override string GetFullOperationId() => "Iam::OAuth20::SimultaneousLoginV3";
        }

        #endregion

        public SimultaneousLoginV3(
            string? simultaneousPlatform,            
            string? simultaneousTicket,            
            SimultaneousLoginV3NativePlatform nativePlatform,            
            string nativePlatformTicket            
        )
        {
            
            
            if (simultaneousPlatform is not null) FormParams["simultaneousPlatform"] = simultaneousPlatform;
            if (simultaneousTicket is not null) FormParams["simultaneousTicket"] = simultaneousTicket;
            if (nativePlatform is not null) FormParams["nativePlatform"] = nativePlatform.Value;
            if (nativePlatformTicket is not null) FormParams["nativePlatformTicket"] = nativePlatformTicket;

            
            
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/iam/v3/oauth/simultaneousLogin";

        public override HttpMethod Method => HttpMethod.Post;

        public override List<string> Consumes => new() { "application/x-www-form-urlencoded" };

        public override List<string> Produces => new() { "application/json" };
        
        public SimultaneousLoginV3.Response ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            var response = new SimultaneousLoginV3.Response()
            {
                StatusCode = code,
                ContentType = contentType
            };

            if (code == (HttpStatusCode)204)
            {
                response.IsSuccess = true;
            }
            else if ((code == (HttpStatusCode)201) || (code == (HttpStatusCode)202) || (code == (HttpStatusCode)200))
            {
                response.Data = JsonSerializer.Deserialize<Model.OauthmodelTokenResponseV3>(payload, ResponseJsonOptions);
                response.IsSuccess = true;
            }
            else if (code == (HttpStatusCode)400)
            {
                response.Error400 = JsonSerializer.Deserialize<RestErrorResponse>(payload, ResponseJsonOptions);
                response.Error = response.Error400!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)401)
            {
                response.Error401 = JsonSerializer.Deserialize<RestErrorResponse>(payload, ResponseJsonOptions);
                response.Error = response.Error401!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)409)
            {
                response.Error409 = JsonSerializer.Deserialize<RestErrorResponse>(payload, ResponseJsonOptions);
                response.Error = response.Error409!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)500)
            {
                response.Error500 = JsonSerializer.Deserialize<RestErrorResponse>(payload, ResponseJsonOptions);
                response.Error = response.Error500!.TranslateToApiError();
            }

            return response;
        }
    }

    public class SimultaneousLoginV3NativePlatform : StringEnum<SimultaneousLoginV3NativePlatform>
    {
        public static readonly SimultaneousLoginV3NativePlatform Epicgames
            = new SimultaneousLoginV3NativePlatform("epicgames");

        public static readonly SimultaneousLoginV3NativePlatform Steam
            = new SimultaneousLoginV3NativePlatform("steam");


        public static implicit operator SimultaneousLoginV3NativePlatform(string value)
        {
            return NewValue(value);
        }

        public SimultaneousLoginV3NativePlatform(string enumValue)
            : base(enumValue)
        {

        }
    }

}