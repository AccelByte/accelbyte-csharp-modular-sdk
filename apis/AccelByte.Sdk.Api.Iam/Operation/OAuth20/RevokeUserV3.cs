// Copyright (c) 2022-2023 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Iam.Model;

namespace AccelByte.Sdk.Api.Iam.Operation
{
    /// <summary>
    /// RevokeUserV3
    ///
    /// This endpoint revokes all access tokens and refresh tokens a user has prior the revocation time.
    /// This endpoint requires authorized requests header with valid access token.
    /// It is a convenient feature for the developer (or admin) who wanted to revokes all user's access tokens and refresh tokens generated before some period of time.
    /// action code : 10707
    /// </summary>
    public class RevokeUserV3 : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static RevokeUserV3Builder Builder { get => new RevokeUserV3Builder(); }

        public class RevokeUserV3Builder
            : OperationBuilder<RevokeUserV3Builder>
        {

            public bool? IncludeGameNamespace { get; set; }





            internal RevokeUserV3Builder() { }

            internal RevokeUserV3Builder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }


            public RevokeUserV3Builder SetIncludeGameNamespace(bool _includeGameNamespace)
            {
                IncludeGameNamespace = _includeGameNamespace;
                return this;
            }





            public RevokeUserV3 Build(
                string namespace_,
                string userId
            )
            {
                RevokeUserV3 op = new RevokeUserV3(this,
                    namespace_,
                    userId
                );
                op.PreferredSecurityMethod = PreferredSecurityMethod;
                op.RequestJsonOptions = RequestJsonOptions;
                op.ResponseJsonOptions = ResponseJsonOptions;

                return op;
            }

            public void Execute(
                string namespace_,
                string userId
            )
            {
                RevokeUserV3 op = Build(
                    namespace_,
                    userId
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
        }

        private RevokeUserV3(RevokeUserV3Builder builder,
            string namespace_,
            string userId
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["userId"] = userId;

            if (builder.IncludeGameNamespace != null) QueryParams["includeGameNamespace"] = Convert.ToString(builder.IncludeGameNamespace)!;






            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public RevokeUserV3(
            string namespace_,
            string userId,
            bool? includeGameNamespace
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["userId"] = userId;

            if (includeGameNamespace != null) QueryParams["includeGameNamespace"] = Convert.ToString(includeGameNamespace)!;






            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/iam/v3/oauth/admin/namespaces/{namespace}/users/{userId}/revoke";

        public override HttpMethod Method => HttpMethod.Post;

        public override List<string> Consumes => new() { "*/*" };

        public override List<string> Produces => new() { "application/json" };

        public void ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return;
            }

            var payloadString = payload.ReadToString();

            throw new HttpResponseException(code, payloadString);
        }
    }

}