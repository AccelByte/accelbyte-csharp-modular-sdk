// Copyright (c) 2022-2023 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Iam.Model;

namespace AccelByte.Sdk.Api.Iam.Operation
{
    /// <summary>
    /// AddSSOLoginPlatformCredential
    ///
    /// This is the API to Add SSO Platform Credential.
    /// ## Supported platforms:
    /// - **discourse**
    /// the ssoUrl of the discourse is the discourse forum url. example: https://forum.example.com
    /// - **azure with SAML**
    /// **appId** is an application identifier in IdP, in azure it's called EntityID
    /// **acsUrl** is an endpoint on the service provider where the identity provider will redirect to with its authentication response. example: /iam/v3/sso/saml/azuresaml/authenticate
    /// **federationMetadataUrl** is an endpoint on the Identity Provider(IdP) to get IdP federation metadata for service provider to build trust relationship
    /// </summary>
    public class AddSSOLoginPlatformCredential : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static AddSSOLoginPlatformCredentialBuilder Builder { get => new AddSSOLoginPlatformCredentialBuilder(); }

        public class AddSSOLoginPlatformCredentialBuilder
            : OperationBuilder<AddSSOLoginPlatformCredentialBuilder>
        {





            internal AddSSOLoginPlatformCredentialBuilder() { }

            internal AddSSOLoginPlatformCredentialBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }






            public AddSSOLoginPlatformCredential Build(
                ModelSSOPlatformCredentialRequest body,
                string namespace_,
                string platformId
            )
            {
                AddSSOLoginPlatformCredential op = new AddSSOLoginPlatformCredential(this,
                    body,
                    namespace_,
                    platformId
                );
                op.PreferredSecurityMethod = PreferredSecurityMethod;
                op.RequestJsonOptions = RequestJsonOptions;
                op.ResponseJsonOptions = ResponseJsonOptions;

                return op;
            }

            public Model.ModelSSOPlatformCredentialResponse? Execute(
                ModelSSOPlatformCredentialRequest body,
                string namespace_,
                string platformId
            )
            {
                AddSSOLoginPlatformCredential op = Build(
                    body,
                    namespace_,
                    platformId
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
        }

        private AddSSOLoginPlatformCredential(AddSSOLoginPlatformCredentialBuilder builder,
            ModelSSOPlatformCredentialRequest body,
            string namespace_,
            string platformId
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["platformId"] = platformId;





            BodyParams = body;


            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public AddSSOLoginPlatformCredential(
            string namespace_,
            string platformId,
            Model.ModelSSOPlatformCredentialRequest body
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["platformId"] = platformId;





            BodyParams = body;


            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/iam/v3/admin/namespaces/{namespace}/platforms/{platformId}/sso";

        public override HttpMethod Method => HttpMethod.Post;

        public override List<string> Consumes => new() { "application/json" };

        public override List<string> Produces => new() { "application/json" };

        public Model.ModelSSOPlatformCredentialResponse? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                return JsonSerializer.Deserialize<Model.ModelSSOPlatformCredentialResponse>(payload, ResponseJsonOptions);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.ModelSSOPlatformCredentialResponse>(payload, ResponseJsonOptions);
            }

            var payloadString = payload.ReadToString();

            throw new HttpResponseException(code, payloadString);
        }
    }

}