// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Iam.Model;

namespace AccelByte.Sdk.Api.Iam.Operation
{
    /// <summary>
    /// SendVerificationCode
    ///
    /// ## The endpoint is going to be deprecated
    /// ### Endpoint migration guide
    /// - **Substitute endpoint: _/iam/v3/public/namespaces/{namespace}/users/me/code/request [POST]_**
    /// 
    /// The verification code is sent to either the phone number or email address. It depends on the LoginID's value.
    /// Available contexts for use :
    /// 1. **UserAccountRegistration**
    /// a context type used for verifying email address in user account registration. It returns 409 if the email address already verified. **_It is the default context if the Context field is empty_**
    /// 2. **UpdateEmailAddress**
    /// a context type used for verify user before updating email address.(Without email address verified checking)
    /// 3. **upgradeHeadlessAccount**
    /// The context is intended to be used whenever the email address wanted to be automatically verified on upgrading a headless account. If this context used, IAM rejects the request if the loginId field's value is already used by others by returning HTTP Status Code 409.
    /// </summary>
    [Obsolete(DiagnosticId = "ab_deprecated_operation")]
    public class SendVerificationCode : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static SendVerificationCodeBuilder Builder { get => new SendVerificationCodeBuilder(); }

        public class SendVerificationCodeBuilder
            : OperationBuilder<SendVerificationCodeBuilder>
        {





            internal SendVerificationCodeBuilder() { }

            internal SendVerificationCodeBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }






            public SendVerificationCode Build(
                ModelSendVerificationCodeRequest body,
                string namespace_,
                string userId
            )
            {
                SendVerificationCode op = new SendVerificationCode(this,
                    body,
                    namespace_,
                    userId
                );

                op.SetBaseFields<SendVerificationCodeBuilder>(this);
                return op;
            }

            [Obsolete(DiagnosticId = "ab_deprecated_operation_wrapper")]
            public SendVerificationCode.Response Execute(
                ModelSendVerificationCodeRequest body,
                string namespace_,
                string userId
            )
            {
                SendVerificationCode op = Build(
                    body,
                    namespace_,
                    userId
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
            public async Task<SendVerificationCode.Response> ExecuteAsync(
                ModelSendVerificationCodeRequest body,
                string namespace_,
                string userId
            )
            {
                SendVerificationCode op = Build(
                    body,
                    namespace_,
                    userId
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
        }

        private SendVerificationCode(SendVerificationCodeBuilder builder,
            ModelSendVerificationCodeRequest body,
            string namespace_,
            string userId
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["userId"] = userId;





            BodyParams = body;


            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        #region Response Part        
        public class Response : ApiResponse
        {

            public string Error400 { get; set; } = "";

            public RestErrorResponse? Error401 { get; set; } = null;

            public string Error403 { get; set; } = "";

            public string Error404 { get; set; } = "";

            public string Error409 { get; set; } = "";

            public string Error429 { get; set; } = "";

            public string Error500 { get; set; } = "";


            protected override string GetFullOperationId() => "Iam::Users::SendVerificationCode";
        }

        #endregion

        public SendVerificationCode(
            string namespace_,
            string userId,
            Model.ModelSendVerificationCodeRequest body
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["userId"] = userId;





            BodyParams = body;


            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/iam/namespaces/{namespace}/users/{userId}/verificationcode";

        public override HttpMethod Method => HttpMethod.Post;

        public override List<string> Consumes => new() { "application/json" };

        public override List<string> Produces => new() { "application/json" };

        public SendVerificationCode.Response ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            var response = new SendVerificationCode.Response()
            {
                StatusCode = code,
                ContentType = contentType,
                IsSuccess = true
            };

            if (code == (HttpStatusCode)400)

            {
                response.Error400 = payload.ReadToString();
                response.Error = new ApiError("-1", response.Error400!);
            }
            else if (code == (HttpStatusCode)401)

            {
                response.Error401 = JsonSerializer.Deserialize<RestErrorResponse>(payload, ResponseJsonOptions);
                response.Error = response.Error401!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)403)

            {
                response.Error403 = payload.ReadToString();
                response.Error = new ApiError("-1", response.Error403!);
            }
            else if (code == (HttpStatusCode)404)

            {
                response.Error404 = payload.ReadToString();
                response.Error = new ApiError("-1", response.Error404!);
            }
            else if (code == (HttpStatusCode)409)

            {
                response.Error409 = payload.ReadToString();
                response.Error = new ApiError("-1", response.Error409!);
            }
            else if (code == (HttpStatusCode)429)

            {
                response.Error429 = payload.ReadToString();
                response.Error = new ApiError("-1", response.Error429!);
            }
            else if (code == (HttpStatusCode)500)

            {
                response.Error500 = payload.ReadToString();
                response.Error = new ApiError("-1", response.Error500!);
            }

            return response;
        }
    }

}