// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Iam.Model;

namespace AccelByte.Sdk.Api.Iam.Operation
{
    /// <summary>
    /// UpgradeHeadlessAccountWithVerificationCode
    ///
    /// ## The endpoint is going to be deprecated
    /// ### Endpoint migration guide
    /// - **Substitute endpoint: _/iam/v3/public/namespaces/{namespace}/users/me/headless/code/verify [POST]_**
    /// 
    /// The endpoint upgrades a headless account by linking the headless account with the email address and the password. By upgrading the headless account into a full account, the user could use the email address and password for using Justice IAM.
    /// The endpoint is a shortcut for upgrading a headless account and verifying the email address in one call. In order to get a verification code for the endpoint, please check the send verification code endpoint.
    /// </summary>
    [Obsolete(DiagnosticId = "ab_deprecated_operation")]
    public class UpgradeHeadlessAccountWithVerificationCode : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static UpgradeHeadlessAccountWithVerificationCodeBuilder Builder { get => new UpgradeHeadlessAccountWithVerificationCodeBuilder(); }

        public class UpgradeHeadlessAccountWithVerificationCodeBuilder
            : OperationBuilder<UpgradeHeadlessAccountWithVerificationCodeBuilder>
        {





            internal UpgradeHeadlessAccountWithVerificationCodeBuilder() { }

            internal UpgradeHeadlessAccountWithVerificationCodeBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }






            public UpgradeHeadlessAccountWithVerificationCode Build(
                ModelUpgradeHeadlessAccountWithVerificationCodeRequest body,
                string namespace_,
                string userId
            )
            {
                UpgradeHeadlessAccountWithVerificationCode op = new UpgradeHeadlessAccountWithVerificationCode(this,
                    body,
                    namespace_,
                    userId
                );

                op.SetBaseFields<UpgradeHeadlessAccountWithVerificationCodeBuilder>(this);
                return op;
            }

            [Obsolete(DiagnosticId = "ab_deprecated_operation_wrapper")]
            public UpgradeHeadlessAccountWithVerificationCode.Response Execute(
                ModelUpgradeHeadlessAccountWithVerificationCodeRequest body,
                string namespace_,
                string userId
            )
            {
                UpgradeHeadlessAccountWithVerificationCode op = Build(
                    body,
                    namespace_,
                    userId
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
            public async Task<UpgradeHeadlessAccountWithVerificationCode.Response> ExecuteAsync(
                ModelUpgradeHeadlessAccountWithVerificationCodeRequest body,
                string namespace_,
                string userId
            )
            {
                UpgradeHeadlessAccountWithVerificationCode op = Build(
                    body,
                    namespace_,
                    userId
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
        }

        private UpgradeHeadlessAccountWithVerificationCode(UpgradeHeadlessAccountWithVerificationCodeBuilder builder,
            ModelUpgradeHeadlessAccountWithVerificationCodeRequest body,
            string namespace_,
            string userId
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["userId"] = userId;





            BodyParams = body;


            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        #region Response Part        
        public class Response : ApiResponse<Model.ModelUserResponse>
        {

            public RestErrorResponse? Error400 { get; set; } = null;

            public RestErrorResponse? Error401 { get; set; } = null;

            public RestErrorResponse? Error403 { get; set; } = null;

            public string Error409 { get; set; } = "";


            protected override string GetFullOperationId() => "Iam::Users::UpgradeHeadlessAccountWithVerificationCode";
        }

        #endregion

        public UpgradeHeadlessAccountWithVerificationCode(
            string namespace_,
            string userId,
            Model.ModelUpgradeHeadlessAccountWithVerificationCodeRequest body
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["userId"] = userId;





            BodyParams = body;


            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/iam/namespaces/{namespace}/users/{userId}/upgradeHeadlessAccountWithVerificationCode";

        public override HttpMethod Method => HttpMethod.Post;

        public override List<string> Consumes => new() { "application/json" };

        public override List<string> Produces => new() { "application/json" };

        public UpgradeHeadlessAccountWithVerificationCode.Response ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            var response = new UpgradeHeadlessAccountWithVerificationCode.Response()
            {
                StatusCode = code,
                ContentType = contentType
            };

            if (code == (HttpStatusCode)204)
            {
                response.IsSuccess = true;
            }
            else if ((code == (HttpStatusCode)201) || (code == (HttpStatusCode)202) || (code == (HttpStatusCode)200))
            {
                response.Data = JsonSerializer.Deserialize<Model.ModelUserResponse>(payload, ResponseJsonOptions);
                response.IsSuccess = true;
            }
            else if (code == (HttpStatusCode)400)
            {
                response.Error400 = JsonSerializer.Deserialize<RestErrorResponse>(payload, ResponseJsonOptions);
                response.Error = response.Error400!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)401)
            {
                response.Error401 = JsonSerializer.Deserialize<RestErrorResponse>(payload, ResponseJsonOptions);
                response.Error = response.Error401!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)403)
            {
                response.Error403 = JsonSerializer.Deserialize<RestErrorResponse>(payload, ResponseJsonOptions);
                response.Error = response.Error403!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)409)
            {
                response.Error409 = payload.ReadToString();
                response.Error = new ApiError("-1", response.Error409!);
            }

            return response;
        }
    }

}