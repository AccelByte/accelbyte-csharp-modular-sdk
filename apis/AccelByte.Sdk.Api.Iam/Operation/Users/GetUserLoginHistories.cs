// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Iam.Model;

namespace AccelByte.Sdk.Api.Iam.Operation
{
    /// <summary>
    /// GetUserLoginHistories
    ///
    /// ## The endpoint is going to be deprecated
    /// ### Endpoint migration guide
    /// - **Substitute endpoint: _/iam/v3/public/namespaces/{namespace}/users/{userId}/logins/histories [GET]_**
    /// - **Substitute endpoint: _/iam/v3/admin/namespaces/{namespace}/users/{userId}/logins/histories [GET]_**
    /// 
    /// Notes for this endpoint:
    /// - This endpoint retrieve the first page of the data if 'after' and 'before' parameters is empty.
    /// - The maximum value of the limit is 100 and the minimum value of the limit is 1.
    /// - This endpoint retrieve the next page of the data if we provide 'after' parameters with valid Unix timestamp.
    /// - This endpoint retrieve the previous page of the data if we provide 'before' parameter with valid data Unix timestamp.
    /// </summary>
    [Obsolete(DiagnosticId ="ab_deprecated_operation")]
    public class GetUserLoginHistories : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static GetUserLoginHistoriesBuilder Builder { get => new GetUserLoginHistoriesBuilder(); }

        public class GetUserLoginHistoriesBuilder
            : OperationBuilder<GetUserLoginHistoriesBuilder>
        {

            public double? After { get; set; }

            public double? Before { get; set; }

            public long? Limit { get; set; }





            internal GetUserLoginHistoriesBuilder() { }

            internal GetUserLoginHistoriesBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }


            public GetUserLoginHistoriesBuilder SetAfter(double _after)
            {
                After = _after;
                return this;
            }

            public GetUserLoginHistoriesBuilder SetBefore(double _before)
            {
                Before = _before;
                return this;
            }

            public GetUserLoginHistoriesBuilder SetLimit(long _limit)
            {
                Limit = _limit;
                return this;
            }





            public GetUserLoginHistories Build(
                string namespace_,
                string userId
            )
            {
                GetUserLoginHistories op = new GetUserLoginHistories(this,
                    namespace_,                    
                    userId                    
                );

                op.SetBaseFields<GetUserLoginHistoriesBuilder>(this);
                return op;
            }

            [Obsolete(DiagnosticId ="ab_deprecated_operation_wrapper")]
            public GetUserLoginHistories.Response Execute(
                string namespace_,
                string userId
            )
            {
                GetUserLoginHistories op = Build(
                    namespace_,
                    userId
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
            public async Task<GetUserLoginHistories.Response> ExecuteAsync(
                string namespace_,
                string userId
            )
            {
                GetUserLoginHistories op = Build(
                    namespace_,
                    userId
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
        }

        private GetUserLoginHistories(GetUserLoginHistoriesBuilder builder,
            string namespace_,
            string userId
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["userId"] = userId;
            
            if (builder.After != null) QueryParams["after"] = Convert.ToString(builder.After)!;
            if (builder.Before != null) QueryParams["before"] = Convert.ToString(builder.Before)!;
            if (builder.Limit != null) QueryParams["limit"] = Convert.ToString(builder.Limit)!;
            

            
            
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        #region Response Part        
        public class Response : ApiResponse<Model.ModelLoginHistoriesResponse>
        {

            public RestErrorResponse? Error401 { get; set; } = null;

            public RestErrorResponse? Error403 { get; set; } = null;

            public string Error404 { get; set; } = "";


            protected override string GetFullOperationId() => "Iam::Users::GetUserLoginHistories";
        }

        #endregion

        public GetUserLoginHistories(
            string namespace_,            
            string userId,            
            double? after,            
            double? before,            
            long? limit            
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["userId"] = userId;
            
            if (after != null) QueryParams["after"] = Convert.ToString(after)!;
            if (before != null) QueryParams["before"] = Convert.ToString(before)!;
            if (limit != null) QueryParams["limit"] = Convert.ToString(limit)!;
            

            
            
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/iam/namespaces/{namespace}/users/{userId}/logins/histories";

        public override HttpMethod Method => HttpMethod.Get;

        public override List<string> Consumes => new() { "application/json" };

        public override List<string> Produces => new() { "application/json" };
        
        public GetUserLoginHistories.Response ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            var response = new GetUserLoginHistories.Response()
            {
                StatusCode = code,
                ContentType = contentType
            };

            if (code == (HttpStatusCode)204)
            {
                response.IsSuccess = true;
            }
            else if ((code == (HttpStatusCode)201) || (code == (HttpStatusCode)202) || (code == (HttpStatusCode)200))
            {
                response.Data = JsonSerializer.Deserialize<Model.ModelLoginHistoriesResponse>(payload, ResponseJsonOptions);
                response.IsSuccess = true;
            }
            else if (code == (HttpStatusCode)401)
            {
                response.Error401 = JsonSerializer.Deserialize<RestErrorResponse>(payload, ResponseJsonOptions);
                response.Error = response.Error401!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)403)
            {
                response.Error403 = JsonSerializer.Deserialize<RestErrorResponse>(payload, ResponseJsonOptions);
                response.Error = response.Error403!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)404)
            {
                response.Error404 = payload.ReadToString();
                response.Error = new ApiError("-1", response.Error404!);
            }

            return response;
        }
    }

}