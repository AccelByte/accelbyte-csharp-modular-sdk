// Copyright (c) 2022-2023 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Iam.Model;

namespace AccelByte.Sdk.Api.Iam.Operation
{
    /// <summary>
    /// PublicProcessWebLinkPlatformV3
    ///
    /// This endpoint is used to process third party account link, this endpoint will return the link status directly instead of redirecting to the original page.
    /// The param **state** comes from the response of `/users/me/platforms/{platformId}/web/link`
    /// </summary>
    public class PublicProcessWebLinkPlatformV3 : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static PublicProcessWebLinkPlatformV3Builder Builder { get => new PublicProcessWebLinkPlatformV3Builder(); }

        public class PublicProcessWebLinkPlatformV3Builder
            : OperationBuilder<PublicProcessWebLinkPlatformV3Builder>
        {



            public string? Code { get; set; }



            internal PublicProcessWebLinkPlatformV3Builder() { }

            internal PublicProcessWebLinkPlatformV3Builder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }




            public PublicProcessWebLinkPlatformV3Builder SetCode(string _code)
            {
                Code = _code;
                return this;
            }



            public PublicProcessWebLinkPlatformV3 Build(
                string state,
                string namespace_,
                string platformId
            )
            {
                PublicProcessWebLinkPlatformV3 op = new PublicProcessWebLinkPlatformV3(this,
                    state,
                    namespace_,
                    platformId
                );
                op.PreferredSecurityMethod = PreferredSecurityMethod;
                op.RequestJsonOptions = RequestJsonOptions;
                op.ResponseJsonOptions = ResponseJsonOptions;

                return op;
            }

            public Model.ModelLinkRequest? Execute(
                string state,
                string namespace_,
                string platformId
            )
            {
                PublicProcessWebLinkPlatformV3 op = Build(
                    state,
                    namespace_,
                    platformId
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }

            public Model.ModelLinkRequest<T1>? Execute<T1>(
                string state,
                string namespace_,
                string platformId
            )
            {
                PublicProcessWebLinkPlatformV3 op = Build(
                    state,
                    namespace_,
                    platformId
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse<T1>(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
        }

        private PublicProcessWebLinkPlatformV3(PublicProcessWebLinkPlatformV3Builder builder,
            string state,
            string namespace_,
            string platformId
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["platformId"] = platformId;


            if (builder.Code is not null) FormParams["code"] = builder.Code;
            if (state is not null) FormParams["state"] = state;





            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public PublicProcessWebLinkPlatformV3(
            string namespace_,
            string platformId,
            string? code,
            string state
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["platformId"] = platformId;


            if (code is not null) FormParams["code"] = code;
            if (state is not null) FormParams["state"] = state;





            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/iam/v3/public/namespaces/{namespace}/users/me/platforms/{platformId}/web/link/process";

        public override HttpMethod Method => HttpMethod.Post;

        public override List<string> Consumes => new() { "application/x-www-form-urlencoded" };

        public override List<string> Produces => new() { "application/json" };

        public Model.ModelLinkRequest? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                return JsonSerializer.Deserialize<Model.ModelLinkRequest>(payload, ResponseJsonOptions);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.ModelLinkRequest>(payload, ResponseJsonOptions);
            }

            var payloadString = payload.ReadToString();

            throw new HttpResponseException(code, payloadString);
        }

        public Model.ModelLinkRequest<T1>? ParseResponse<T1>(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                return JsonSerializer.Deserialize<Model.ModelLinkRequest<T1>>(payload, ResponseJsonOptions);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.ModelLinkRequest<T1>>(payload, ResponseJsonOptions);
            }

            var payloadString = payload.ReadToString();
            throw new HttpResponseException(code, payloadString);
        }
    }

}