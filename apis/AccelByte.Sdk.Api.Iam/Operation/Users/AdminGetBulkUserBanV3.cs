// Copyright (c) 2022-2023 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Iam.Model;

namespace AccelByte.Sdk.Api.Iam.Operation
{
    /// <summary>
    /// AdminGetBulkUserBanV3
    ///
    /// This endpoint returns user bans of userIDs specified in the payload
    /// action code : 10127
    /// </summary>
    public class AdminGetBulkUserBanV3 : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static AdminGetBulkUserBanV3Builder Builder { get => new AdminGetBulkUserBanV3Builder(); }

        public class AdminGetBulkUserBanV3Builder
            : OperationBuilder<AdminGetBulkUserBanV3Builder>
        {

            public bool? ActiveOnly { get; set; }

            public string? BanType { get; set; }





            internal AdminGetBulkUserBanV3Builder() { }

            internal AdminGetBulkUserBanV3Builder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }


            public AdminGetBulkUserBanV3Builder SetActiveOnly(bool _activeOnly)
            {
                ActiveOnly = _activeOnly;
                return this;
            }

            public AdminGetBulkUserBanV3Builder SetBanType(string _banType)
            {
                BanType = _banType;
                return this;
            }





            public AdminGetBulkUserBanV3 Build(
                ModelGetBulkUserBansRequest body,
                string namespace_
            )
            {
                AdminGetBulkUserBanV3 op = new AdminGetBulkUserBanV3(this,
                    body,
                    namespace_
                );

                op.SetBaseFields<AdminGetBulkUserBanV3Builder>(this);
                return op;
            }

            public Model.ModelGetUserBanV3Response? Execute(
                ModelGetBulkUserBansRequest body,
                string namespace_
            )
            {
                AdminGetBulkUserBanV3 op = Build(
                    body,
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
        }

        private AdminGetBulkUserBanV3(AdminGetBulkUserBanV3Builder builder,
            ModelGetBulkUserBansRequest body,
            string namespace_
        )
        {
            PathParams["namespace"] = namespace_;

            if (builder.ActiveOnly != null) QueryParams["activeOnly"] = Convert.ToString(builder.ActiveOnly)!;
            if (builder.BanType is not null) QueryParams["banType"] = builder.BanType;




            BodyParams = body;


            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public AdminGetBulkUserBanV3(
            string namespace_,
            bool? activeOnly,
            string? banType,
            Model.ModelGetBulkUserBansRequest body
        )
        {
            PathParams["namespace"] = namespace_;

            if (activeOnly != null) QueryParams["activeOnly"] = Convert.ToString(activeOnly)!;
            if (banType is not null) QueryParams["banType"] = banType;




            BodyParams = body;


            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/iam/v3/admin/namespaces/{namespace}/users/bans";

        public override HttpMethod Method => HttpMethod.Post;

        public override List<string> Consumes => new() { "application/json" };

        public override List<string> Produces => new() { "application/json" };

        public Model.ModelGetUserBanV3Response? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                return JsonSerializer.Deserialize<Model.ModelGetUserBanV3Response>(payload, ResponseJsonOptions);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.ModelGetUserBanV3Response>(payload, ResponseJsonOptions);
            }

            var payloadString = payload.ReadToString();

            throw new HttpResponseException(code, payloadString);
        }
    }

}