// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Iam.Model;

namespace AccelByte.Sdk.Api.Iam.Operation
{
    /// <summary>
    /// PublicSendCodeForwardV3
    ///
    /// This API need the upgradeToken in request body.
    /// Available contexts for use :
    /// 1. **upgradeHeadlessAccount**
    /// The context is intended to be used whenever the email address wanted to be automatically verified on upgrading a headless account.
    /// If this context used, IAM rejects the request if the email address is already used by others by returning HTTP Status Code 409.
    /// </summary>
    public class PublicSendCodeForwardV3 : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static PublicSendCodeForwardV3Builder Builder { get => new PublicSendCodeForwardV3Builder(); }

        public class PublicSendCodeForwardV3Builder
            : OperationBuilder<PublicSendCodeForwardV3Builder>
        {





            internal PublicSendCodeForwardV3Builder() { }

            internal PublicSendCodeForwardV3Builder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }






            public PublicSendCodeForwardV3 Build(
                ModelSendVerificationCodeRequestV3 body
            )
            {
                PublicSendCodeForwardV3 op = new PublicSendCodeForwardV3(this,
                    body
                );

                op.SetBaseFields<PublicSendCodeForwardV3Builder>(this);
                return op;
            }

            public PublicSendCodeForwardV3.Response Execute(
                ModelSendVerificationCodeRequestV3 body
            )
            {
                PublicSendCodeForwardV3 op = Build(
                    body
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
            public async Task<PublicSendCodeForwardV3.Response> ExecuteAsync(
                ModelSendVerificationCodeRequestV3 body
            )
            {
                PublicSendCodeForwardV3 op = Build(
                    body
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
        }

        private PublicSendCodeForwardV3(PublicSendCodeForwardV3Builder builder,
            ModelSendVerificationCodeRequestV3 body
        )
        {





            BodyParams = body;


            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        #region Response Part        
        public class Response : ApiResponse<string>
        {

            public string Error302 { get; set; } = "";


            protected override string GetFullOperationId() => "Iam::Users::PublicSendCodeForwardV3";
        }

        #endregion

        public PublicSendCodeForwardV3(
            Model.ModelSendVerificationCodeRequestV3 body
        )
        {





            BodyParams = body;


            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/iam/v3/public/users/me/code/request/forward";

        public override HttpMethod Method => HttpMethod.Post;

        public override List<string> Consumes => new() { "application/json" };

        public override List<string> Produces => new() { "application/json" };

        public PublicSendCodeForwardV3.Response ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            var response = new PublicSendCodeForwardV3.Response()
            {
                StatusCode = code,
                ContentType = contentType
            };

            if (code == (HttpStatusCode)302)
            {
                response.Data = payload.ReadToString();
                response.IsSuccess = true;
            }

            return response;
        }
    }

}