// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Iam.Model;

namespace AccelByte.Sdk.Api.Iam.Operation
{
    /// <summary>
    /// AdminSendVerificationCodeV3
    ///
    /// The verification code is sent to email address.
    /// Available contexts for use :
    /// - **UserAccountRegistration**
    /// a context type used for verifying email address in user account registration. It returns 409 if the email address already verified.
    /// **_It is the default context if the Context field is empty_**
    /// 
    /// - **UpdateEmailAddress**
    /// a context type used for verify user before updating email address.(Without email address verified checking)
    /// 
    /// - **upgradeHeadlessAccount**
    /// The context is intended to be used whenever the email address wanted to be automatically verified on upgrading a headless account.
    /// If this context used, IAM rejects the request if the email address is already used by others by returning HTTP Status Code 409.
    /// 
    /// action code: 10116
    /// </summary>
    public class AdminSendVerificationCodeV3 : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static AdminSendVerificationCodeV3Builder Builder { get => new AdminSendVerificationCodeV3Builder(); }

        public class AdminSendVerificationCodeV3Builder
            : OperationBuilder<AdminSendVerificationCodeV3Builder>
        {





            internal AdminSendVerificationCodeV3Builder() { }

            internal AdminSendVerificationCodeV3Builder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }






            public AdminSendVerificationCodeV3 Build(
                ModelSendVerificationCodeRequestV3 body,
                string namespace_,
                string userId
            )
            {
                AdminSendVerificationCodeV3 op = new AdminSendVerificationCodeV3(this,
                    body,                    
                    namespace_,                    
                    userId                    
                );

                op.SetBaseFields<AdminSendVerificationCodeV3Builder>(this);
                return op;
            }

            public AdminSendVerificationCodeV3.Response Execute(
                ModelSendVerificationCodeRequestV3 body,
                string namespace_,
                string userId
            )
            {
                AdminSendVerificationCodeV3 op = Build(
                    body,
                    namespace_,
                    userId
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
            public async Task<AdminSendVerificationCodeV3.Response> ExecuteAsync(
                ModelSendVerificationCodeRequestV3 body,
                string namespace_,
                string userId
            )
            {
                AdminSendVerificationCodeV3 op = Build(
                    body,
                    namespace_,
                    userId
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
        }

        private AdminSendVerificationCodeV3(AdminSendVerificationCodeV3Builder builder,
            ModelSendVerificationCodeRequestV3 body,
            string namespace_,
            string userId
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["userId"] = userId;
            
            

            
            
            BodyParams = body;
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        #region Response Part        
        public class Response : ApiResponse
        {

            public RestErrorResponse? Error400 { get; set; } = null;

            public RestErrorResponse? Error401 { get; set; } = null;

            public RestErrorResponse? Error403 { get; set; } = null;

            public RestErrorResponse? Error404 { get; set; } = null;

            public RestErrorResponse? Error409 { get; set; } = null;

            public RestErrorResponse? Error429 { get; set; } = null;


            protected override string GetFullOperationId() => "Iam::Users::AdminSendVerificationCodeV3";
        }

        #endregion

        public AdminSendVerificationCodeV3(
            string namespace_,            
            string userId,            
            Model.ModelSendVerificationCodeRequestV3 body            
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["userId"] = userId;
            
            

            
            
            BodyParams = body;
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/iam/v3/admin/namespaces/{namespace}/users/{userId}/code/request";

        public override HttpMethod Method => HttpMethod.Post;

        public override List<string> Consumes => new() { "application/json" };

        public override List<string> Produces => new() { "application/json" };
        
        public AdminSendVerificationCodeV3.Response ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            var response = new AdminSendVerificationCodeV3.Response()
            {
                StatusCode = code,
                ContentType = contentType,
                IsSuccess = true
            };

            if (code == (HttpStatusCode)400)
            
            {
                response.Error400 = JsonSerializer.Deserialize<RestErrorResponse>(payload, ResponseJsonOptions);
                response.Error = response.Error400!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)401)
            
            {
                response.Error401 = JsonSerializer.Deserialize<RestErrorResponse>(payload, ResponseJsonOptions);
                response.Error = response.Error401!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)403)
            
            {
                response.Error403 = JsonSerializer.Deserialize<RestErrorResponse>(payload, ResponseJsonOptions);
                response.Error = response.Error403!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)404)
            
            {
                response.Error404 = JsonSerializer.Deserialize<RestErrorResponse>(payload, ResponseJsonOptions);
                response.Error = response.Error404!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)409)
            
            {
                response.Error409 = JsonSerializer.Deserialize<RestErrorResponse>(payload, ResponseJsonOptions);
                response.Error = response.Error409!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)429)
            
            {
                response.Error429 = JsonSerializer.Deserialize<RestErrorResponse>(payload, ResponseJsonOptions);
                response.Error = response.Error429!.TranslateToApiError();
            }

            return response;
        }
    }

}