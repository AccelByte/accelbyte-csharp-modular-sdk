// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Iam.Model;

namespace AccelByte.Sdk.Api.Iam.Operation
{
    /// <summary>
    /// PublicSearchUserV3
    ///
    /// This endpoint search all users on the specified namespace that match the query on these fields: display name, unique display name, username or by 3rd party display name.
    /// The query length should between 3-20, otherwise will not query the database.
    /// The default limit value is 20.
    /// 
    /// ## Searching by 3rd party platform
    /// 
    /// **Note: searching by 3rd party platform display name will use exact query, not fuzzy query.**
    /// 
    /// Step when searching by 3rd party platform display name:
    /// 1. set __by__ to __thirdPartyPlatform__
    /// 2. set __platformId__ to the _supported platform id_
    /// 3. set __platformBy__ to __platformDisplayName__
    /// 
    /// 
    /// **Supported Platforms:**
    /// - Steam group (steamnetwork):
    /// - steam
    /// - steamopenid
    /// - PSN group (psn):
    /// - ps4web
    /// - ps4
    /// - ps5
    /// - XBOX group(xbox):
    /// - live
    /// - xblweb
    /// - Oculus group (oculusgroup):
    /// - oculus
    /// - oculusweb
    /// - Google group (google):
    /// - google
    /// - googleplaygames:
    /// - epicgames
    /// - facebook
    /// - twitch
    /// - discord
    /// - android
    /// - ios
    /// - apple
    /// - device
    /// - nintendo
    /// - awscognito
    /// - amazon
    /// - netflix
    /// - snapchat
    /// - _oidc platform id_
    /// 
    /// Note:
    /// - You can use either platform id or platform group as **platformId** parameter.
    /// - **Nintendo platform user id**: NSA ID need to be appended with Environment ID using colon as separator. e.g kmzwa8awaa:dd1
    /// 
    /// ## IP Rate Limit validation
    /// 
    /// This API have IP Rate Limit validation, which activates when triggered excessively from the same IP address (throw 429 http error).
    /// The default rule: 10 max request per 30 seconds (per unique IP address).
    /// 
    /// To mitigate potential unexpected issues in your implementation, consider adhering to these best practices as illustrated in the following examples:
    /// * Delay invoking the Search API if the player continues typing in the search box, and only utilize the latest input provided.
    /// * Prevent players from double-clicking or making multiple clicks within a short time frame.
    /// </summary>
    public class PublicSearchUserV3 : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static PublicSearchUserV3Builder Builder { get => new PublicSearchUserV3Builder(); }

        public class PublicSearchUserV3Builder
            : OperationBuilder<PublicSearchUserV3Builder>
        {

            public string? By { get; set; }

            public long? Limit { get; set; }

            public long? Offset { get; set; }

            public string? PlatformBy { get; set; }

            public string? PlatformId { get; set; }

            public string? Query { get; set; }





            internal PublicSearchUserV3Builder() { }

            internal PublicSearchUserV3Builder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }


            public PublicSearchUserV3Builder SetBy(string _by)
            {
                By = _by;
                return this;
            }

            public PublicSearchUserV3Builder SetLimit(long _limit)
            {
                Limit = _limit;
                return this;
            }

            public PublicSearchUserV3Builder SetOffset(long _offset)
            {
                Offset = _offset;
                return this;
            }

            public PublicSearchUserV3Builder SetPlatformBy(string _platformBy)
            {
                PlatformBy = _platformBy;
                return this;
            }

            public PublicSearchUserV3Builder SetPlatformId(string _platformId)
            {
                PlatformId = _platformId;
                return this;
            }

            public PublicSearchUserV3Builder SetQuery(string _query)
            {
                Query = _query;
                return this;
            }





            public PublicSearchUserV3 Build(
                string namespace_
            )
            {
                PublicSearchUserV3 op = new PublicSearchUserV3(this,
                    namespace_
                );

                op.SetBaseFields<PublicSearchUserV3Builder>(this);
                return op;
            }

            public PublicSearchUserV3.Response Execute(
                string namespace_
            )
            {
                PublicSearchUserV3 op = Build(
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
            public async Task<PublicSearchUserV3.Response> ExecuteAsync(
                string namespace_
            )
            {
                PublicSearchUserV3 op = Build(
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
        }

        private PublicSearchUserV3(PublicSearchUserV3Builder builder,
            string namespace_
        )
        {
            PathParams["namespace"] = namespace_;

            if (builder.By is not null) QueryParams["by"] = builder.By;
            if (builder.Limit != null) QueryParams["limit"] = Convert.ToString(builder.Limit)!;
            if (builder.Offset != null) QueryParams["offset"] = Convert.ToString(builder.Offset)!;
            if (builder.PlatformBy is not null) QueryParams["platformBy"] = builder.PlatformBy;
            if (builder.PlatformId is not null) QueryParams["platformId"] = builder.PlatformId;
            if (builder.Query is not null) QueryParams["query"] = builder.Query;






            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        #region Response Part        
        public class Response : ApiResponse<Model.ModelPublicUserInformationResponseV3>
        {

            public RestErrorResponse? Error400 { get; set; } = null;

            public RestErrorResponse? Error401 { get; set; } = null;

            public RestErrorResponse? Error404 { get; set; } = null;

            public RestErrorResponse? Error429 { get; set; } = null;

            public RestErrorResponse? Error500 { get; set; } = null;


            protected override string GetFullOperationId() => "Iam::Users::PublicSearchUserV3";
        }

        #endregion

        public PublicSearchUserV3(
            string namespace_,
            string? by,
            long? limit,
            long? offset,
            string? platformBy,
            string? platformId,
            string? query
        )
        {
            PathParams["namespace"] = namespace_;

            if (by is not null) QueryParams["by"] = by;
            if (limit != null) QueryParams["limit"] = Convert.ToString(limit)!;
            if (offset != null) QueryParams["offset"] = Convert.ToString(offset)!;
            if (platformBy is not null) QueryParams["platformBy"] = platformBy;
            if (platformId is not null) QueryParams["platformId"] = platformId;
            if (query is not null) QueryParams["query"] = query;






            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/iam/v3/public/namespaces/{namespace}/users";

        public override HttpMethod Method => HttpMethod.Get;

        public override List<string> Consumes => new() { };

        public override List<string> Produces => new() { "application/json" };

        public PublicSearchUserV3.Response ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            var response = new PublicSearchUserV3.Response()
            {
                StatusCode = code,
                ContentType = contentType
            };

            if (code == (HttpStatusCode)204)
            {
                response.IsSuccess = true;
            }
            else if ((code == (HttpStatusCode)201) || (code == (HttpStatusCode)202) || (code == (HttpStatusCode)200))
            {
                response.Data = JsonSerializer.Deserialize<Model.ModelPublicUserInformationResponseV3>(payload, ResponseJsonOptions);
                response.IsSuccess = true;
            }
            else if (code == (HttpStatusCode)400)
            {
                response.Error400 = JsonSerializer.Deserialize<RestErrorResponse>(payload, ResponseJsonOptions);
                response.Error = response.Error400!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)401)
            {
                response.Error401 = JsonSerializer.Deserialize<RestErrorResponse>(payload, ResponseJsonOptions);
                response.Error = response.Error401!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)404)
            {
                response.Error404 = JsonSerializer.Deserialize<RestErrorResponse>(payload, ResponseJsonOptions);
                response.Error = response.Error404!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)429)
            {
                response.Error429 = JsonSerializer.Deserialize<RestErrorResponse>(payload, ResponseJsonOptions);
                response.Error = response.Error429!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)500)
            {
                response.Error500 = JsonSerializer.Deserialize<RestErrorResponse>(payload, ResponseJsonOptions);
                response.Error = response.Error500!.TranslateToApiError();
            }

            return response;
        }
    }

}