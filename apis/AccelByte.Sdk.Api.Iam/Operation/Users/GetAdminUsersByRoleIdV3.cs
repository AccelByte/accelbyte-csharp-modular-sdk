// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Iam.Model;

namespace AccelByte.Sdk.Api.Iam.Operation
{
    /// <summary>
    /// GetAdminUsersByRoleIdV3
    ///
    /// This endpoint search admin users which have the roleId
    /// 
    /// Notes : this endpoint only accept admin role. Admin Role is role which have admin status and members.
    /// Use endpoint [GET] /roles/{roleId}/admin to check the role status
    /// action code : 10140
    /// </summary>
    public class GetAdminUsersByRoleIdV3 : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static GetAdminUsersByRoleIdV3Builder Builder { get => new GetAdminUsersByRoleIdV3Builder(); }

        public class GetAdminUsersByRoleIdV3Builder
            : OperationBuilder<GetAdminUsersByRoleIdV3Builder>
        {

            public long? After { get; set; }

            public long? Before { get; set; }

            public long? Limit { get; set; }





            internal GetAdminUsersByRoleIdV3Builder() { }

            internal GetAdminUsersByRoleIdV3Builder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }


            public GetAdminUsersByRoleIdV3Builder SetAfter(long _after)
            {
                After = _after;
                return this;
            }

            public GetAdminUsersByRoleIdV3Builder SetBefore(long _before)
            {
                Before = _before;
                return this;
            }

            public GetAdminUsersByRoleIdV3Builder SetLimit(long _limit)
            {
                Limit = _limit;
                return this;
            }





            public GetAdminUsersByRoleIdV3 Build(
                string namespace_,
                string roleId
            )
            {
                GetAdminUsersByRoleIdV3 op = new GetAdminUsersByRoleIdV3(this,
                    namespace_,
                    roleId
                );

                op.SetBaseFields<GetAdminUsersByRoleIdV3Builder>(this);
                return op;
            }

            public GetAdminUsersByRoleIdV3.Response Execute(
                string namespace_,
                string roleId
            )
            {
                GetAdminUsersByRoleIdV3 op = Build(
                    namespace_,
                    roleId
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
            public async Task<GetAdminUsersByRoleIdV3.Response> ExecuteAsync(
                string namespace_,
                string roleId
            )
            {
                GetAdminUsersByRoleIdV3 op = Build(
                    namespace_,
                    roleId
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
        }

        private GetAdminUsersByRoleIdV3(GetAdminUsersByRoleIdV3Builder builder,
            string namespace_,
            string roleId
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["roleId"] = roleId;

            if (builder.After != null) QueryParams["after"] = Convert.ToString(builder.After)!;
            if (builder.Before != null) QueryParams["before"] = Convert.ToString(builder.Before)!;
            if (builder.Limit != null) QueryParams["limit"] = Convert.ToString(builder.Limit)!;






            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        #region Response Part        
        public class Response : ApiResponse<Model.ModelGetUsersResponseWithPaginationV3>
        {

            public RestErrorResponse? Error400 { get; set; } = null;

            public RestErrorResponse? Error401 { get; set; } = null;

            public RestErrorResponse? Error403 { get; set; } = null;

            public RestErrorResponse? Error404 { get; set; } = null;

            public RestErrorResponse? Error500 { get; set; } = null;


            protected override string GetFullOperationId() => "Iam::Users::GetAdminUsersByRoleIdV3";
        }

        #endregion

        public GetAdminUsersByRoleIdV3(
            string namespace_,
            string roleId,
            long? after,
            long? before,
            long? limit
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["roleId"] = roleId;

            if (after != null) QueryParams["after"] = Convert.ToString(after)!;
            if (before != null) QueryParams["before"] = Convert.ToString(before)!;
            if (limit != null) QueryParams["limit"] = Convert.ToString(limit)!;






            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/iam/v3/admin/namespaces/{namespace}/roles/{roleId}/users";

        public override HttpMethod Method => HttpMethod.Get;

        public override List<string> Consumes => new() { };

        public override List<string> Produces => new() { "application/json" };

        public GetAdminUsersByRoleIdV3.Response ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            var response = new GetAdminUsersByRoleIdV3.Response()
            {
                StatusCode = code,
                ContentType = contentType
            };

            if (code == (HttpStatusCode)204)
            {
                response.IsSuccess = true;
            }
            else if ((code == (HttpStatusCode)201) || (code == (HttpStatusCode)202) || (code == (HttpStatusCode)200))
            {
                response.Data = JsonSerializer.Deserialize<Model.ModelGetUsersResponseWithPaginationV3>(payload, ResponseJsonOptions);
                response.IsSuccess = true;
            }
            else if (code == (HttpStatusCode)400)
            {
                response.Error400 = JsonSerializer.Deserialize<RestErrorResponse>(payload, ResponseJsonOptions);
                response.Error = response.Error400!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)401)
            {
                response.Error401 = JsonSerializer.Deserialize<RestErrorResponse>(payload, ResponseJsonOptions);
                response.Error = response.Error401!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)403)
            {
                response.Error403 = JsonSerializer.Deserialize<RestErrorResponse>(payload, ResponseJsonOptions);
                response.Error = response.Error403!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)404)
            {
                response.Error404 = JsonSerializer.Deserialize<RestErrorResponse>(payload, ResponseJsonOptions);
                response.Error = response.Error404!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)500)
            {
                response.Error500 = JsonSerializer.Deserialize<RestErrorResponse>(payload, ResponseJsonOptions);
                response.Error = response.Error500!.TranslateToApiError();
            }

            return response;
        }
    }

}