// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Iam.Model;

namespace AccelByte.Sdk.Api.Iam.Operation
{
    /// <summary>
    /// CheckUserAvailability
    ///
    /// Check user's account availability.
    /// Available field :
    /// - displayName
    /// - uniqueDisplayName
    /// - username
    /// 
    /// If request include access token with user ID data, that user ID will be excluded from availability check.
    /// For example, in case user update his emailAddress, he can use his own emailAddress to update his account.
    /// 
    /// Response Code :
    /// - Account Available : 404 (not found)
    /// - Account Not Available : 204 (no content)
    /// </summary>
    public class CheckUserAvailability : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static CheckUserAvailabilityBuilder Builder { get => new CheckUserAvailabilityBuilder(); }

        public class CheckUserAvailabilityBuilder
            : OperationBuilder<CheckUserAvailabilityBuilder>
        {





            internal CheckUserAvailabilityBuilder() { }

            internal CheckUserAvailabilityBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }






            public CheckUserAvailability Build(
                string namespace_,
                string field,
                string query
            )
            {
                CheckUserAvailability op = new CheckUserAvailability(this,
                    namespace_,                    
                    field,                    
                    query                    
                );

                op.SetBaseFields<CheckUserAvailabilityBuilder>(this);
                return op;
            }

            public CheckUserAvailability.Response Execute(
                string namespace_,
                string field,
                string query
            )
            {
                CheckUserAvailability op = Build(
                    namespace_,
                    field,
                    query
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
            public async Task<CheckUserAvailability.Response> ExecuteAsync(
                string namespace_,
                string field,
                string query
            )
            {
                CheckUserAvailability op = Build(
                    namespace_,
                    field,
                    query
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
        }

        private CheckUserAvailability(CheckUserAvailabilityBuilder builder,
            string namespace_,
            string field,
            string query
        )
        {
            PathParams["namespace"] = namespace_;
            
            if (field is not null) QueryParams["field"] = field;
            if (query is not null) QueryParams["query"] = query;
            

            
            
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        #region Response Part        
        public class Response : ApiResponse
        {

            public RestErrorResponse? Error400 { get; set; } = null;

            public string Error404 { get; set; } = "";

            public RestErrorResponse? Error422 { get; set; } = null;


            protected override string GetFullOperationId() => "Iam::Users::CheckUserAvailability";
        }

        #endregion

        public CheckUserAvailability(
            string namespace_,            
            string field,            
            string query            
        )
        {
            PathParams["namespace"] = namespace_;
            
            if (field is not null) QueryParams["field"] = field;
            if (query is not null) QueryParams["query"] = query;
            

            
            
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/iam/v3/public/namespaces/{namespace}/users/availability";

        public override HttpMethod Method => HttpMethod.Get;

        public override List<string> Consumes => new() {  };

        public override List<string> Produces => new() { "application/json" };
        
        public CheckUserAvailability.Response ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            var response = new CheckUserAvailability.Response()
            {
                StatusCode = code,
                ContentType = contentType
            };

            int statusCode = (int)code;
            if (statusCode >= 200 && statusCode < 300)
            {
                response.IsSuccess = true;
            }
            else if (code == (HttpStatusCode)400)
            {
                response.Error400 = JsonSerializer.Deserialize<RestErrorResponse>(payload, ResponseJsonOptions);
                response.Error = response.Error400!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)404)
            {
                response.Error404 = payload.ReadToString();
                response.Error = new ApiError("-1", response.Error404!);
            }
            else if (code == (HttpStatusCode)422)
            {
                response.Error422 = JsonSerializer.Deserialize<RestErrorResponse>(payload, ResponseJsonOptions);
                response.Error = response.Error422!.TranslateToApiError();
            }

            return response;
        }
    }

}