// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Iam.Model;

namespace AccelByte.Sdk.Api.Iam.Operation
{
    /// <summary>
    /// AdminUpdateInputValidations
    ///
    /// This endpoint is used to update input validation configuration.
    /// Supported `field`:
    /// - displayName
    /// - password
    /// - username
    /// - email
    /// - avatar
    /// 
    /// If `isCustomRegex` is set to true, `regex` parameter will be used as input validation and the other parameters will be ignored. Otherwise, `regex` parameter will be ignored and regex for input validation will be generated based on the combination of the other parameters.
    /// If `allowUnicode` is set to true, unicode regex pattern will be use as the input validation and the other parameters will be ignored.
    /// Supported `letterCase`:
    /// - lowercase
    /// - uppercase
    /// - mixed: uppercase and lowercase
    /// - any: uppercase and/or lowercase
    /// 
    /// flexible special character non words with `allowAllSpecialCharacters`
    /// if `allowAllSpecialCharacters` is set to true `specialCharacters` will forced to empty.
    /// Supported `specialCharacterLocation`:
    /// - anywhere
    /// - middle
    /// 
    /// If `specialCharacters` is empty, `specialCharacterLocation` and `maxRepeatingSpecialCharacter` will be ignored.
    /// `minCharType` is used to identify how many required criteria in the regex. The supported criteria are number, letter, special character, and letter case. If set to 0 or 1 means all criteria are optional. It can be set as much as the number of criteria enabled.
    /// If `blockedWord` is set by admin, any input from user which contain kind of blocked word(s) will be blocked for create/upgrade/update account
    /// If `avatarConfig` is set, will use this config and skip all the other validation conditions
    /// </summary>
    public class AdminUpdateInputValidations : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static AdminUpdateInputValidationsBuilder Builder { get => new AdminUpdateInputValidationsBuilder(); }

        public class AdminUpdateInputValidationsBuilder
            : OperationBuilder<AdminUpdateInputValidationsBuilder>
        {





            internal AdminUpdateInputValidationsBuilder() { }

            internal AdminUpdateInputValidationsBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }






            public AdminUpdateInputValidations Build(
                List<ModelInputValidationUpdatePayload> body
            )
            {
                AdminUpdateInputValidations op = new AdminUpdateInputValidations(this,
                    body                    
                );

                op.SetBaseFields<AdminUpdateInputValidationsBuilder>(this);
                return op;
            }

            public AdminUpdateInputValidations.Response Execute(
                List<ModelInputValidationUpdatePayload> body
            )
            {
                AdminUpdateInputValidations op = Build(
                    body
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
            public async Task<AdminUpdateInputValidations.Response> ExecuteAsync(
                List<ModelInputValidationUpdatePayload> body
            )
            {
                AdminUpdateInputValidations op = Build(
                    body
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
        }

        private AdminUpdateInputValidations(AdminUpdateInputValidationsBuilder builder,
            List<ModelInputValidationUpdatePayload> body
        )
        {
            
            

            
            
            BodyParams = body;
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        #region Response Part        
        public class Response : ApiResponse
        {

            public RestErrorResponse? Error401 { get; set; } = null;

            public RestErrorResponse? Error403 { get; set; } = null;

            public RestErrorResponse? Error404 { get; set; } = null;


            protected override string GetFullOperationId() => "Iam::InputValidations::AdminUpdateInputValidations";
        }

        #endregion

        public AdminUpdateInputValidations(
            List<Model.ModelInputValidationUpdatePayload> body            
        )
        {
            
            

            
            
            BodyParams = body;
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/iam/v3/admin/inputValidations";

        public override HttpMethod Method => HttpMethod.Put;

        public override List<string> Consumes => new() { "application/json" };

        public override List<string> Produces => new() { "application/json" };
        
        public AdminUpdateInputValidations.Response ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            var response = new AdminUpdateInputValidations.Response()
            {
                StatusCode = code,
                ContentType = contentType
            };

            int statusCode = (int)code;
            if (statusCode >= 200 && statusCode < 300)
            {
                response.IsSuccess = true;
            }
            else if (code == (HttpStatusCode)401)
            {
                response.Error401 = JsonSerializer.Deserialize<RestErrorResponse>(payload, ResponseJsonOptions);
                response.Error = response.Error401!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)403)
            {
                response.Error403 = JsonSerializer.Deserialize<RestErrorResponse>(payload, ResponseJsonOptions);
                response.Error = response.Error403!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)404)
            {
                response.Error404 = JsonSerializer.Deserialize<RestErrorResponse>(payload, ResponseJsonOptions);
                response.Error = response.Error404!.TranslateToApiError();
            }

            return response;
        }
    }

}