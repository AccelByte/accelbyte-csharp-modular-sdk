// Copyright (c) 2022-2023 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Iam.Model;

namespace AccelByte.Sdk.Api.Iam.Operation
{
    /// <summary>
    /// PublicGetRolesV3
    ///
    /// 
    /// This endpoint is used to get all non-admin role.
    /// 
    /// 
    /// action code: 10418
    /// </summary>
    public class PublicGetRolesV3 : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static PublicGetRolesV3Builder Builder { get => new PublicGetRolesV3Builder(); }

        public class PublicGetRolesV3Builder
            : OperationBuilder<PublicGetRolesV3Builder>
        {

            public string? After { get; set; }

            public string? Before { get; set; }

            public bool? IsWildcard { get; set; }

            public long? Limit { get; set; }





            internal PublicGetRolesV3Builder() { }

            internal PublicGetRolesV3Builder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }


            public PublicGetRolesV3Builder SetAfter(string _after)
            {
                After = _after;
                return this;
            }

            public PublicGetRolesV3Builder SetBefore(string _before)
            {
                Before = _before;
                return this;
            }

            public PublicGetRolesV3Builder SetIsWildcard(bool _isWildcard)
            {
                IsWildcard = _isWildcard;
                return this;
            }

            public PublicGetRolesV3Builder SetLimit(long _limit)
            {
                Limit = _limit;
                return this;
            }





            public PublicGetRolesV3 Build(
            )
            {
                PublicGetRolesV3 op = new PublicGetRolesV3(this
                );
                op.PreferredSecurityMethod = PreferredSecurityMethod;
                op.RequestJsonOptions = RequestJsonOptions;
                op.ResponseJsonOptions = ResponseJsonOptions;

                return op;
            }

            public Model.ModelRoleNamesResponseV3? Execute(
            )
            {
                PublicGetRolesV3 op = Build(
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
        }

        private PublicGetRolesV3(PublicGetRolesV3Builder builder
        )
        {
            
            if (builder.After is not null) QueryParams["after"] = builder.After;
            if (builder.Before is not null) QueryParams["before"] = builder.Before;
            if (builder.IsWildcard != null) QueryParams["isWildcard"] = Convert.ToString(builder.IsWildcard)!;
            if (builder.Limit != null) QueryParams["limit"] = Convert.ToString(builder.Limit)!;
            

            
            
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public PublicGetRolesV3(
            string? after,            
            string? before,            
            bool? isWildcard,            
            long? limit            
        )
        {
            
            if (after is not null) QueryParams["after"] = after;
            if (before is not null) QueryParams["before"] = before;
            if (isWildcard != null) QueryParams["isWildcard"] = Convert.ToString(isWildcard)!;
            if (limit != null) QueryParams["limit"] = Convert.ToString(limit)!;
            

            
            
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/iam/v3/public/roles";

        public override HttpMethod Method => HttpMethod.Get;

        public override List<string> Consumes => new() { "application/json" };

        public override List<string> Produces => new() { "application/json" };        
        
        public Model.ModelRoleNamesResponseV3? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {            
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                return JsonSerializer.Deserialize<Model.ModelRoleNamesResponseV3>(payload, ResponseJsonOptions);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.ModelRoleNamesResponseV3>(payload, ResponseJsonOptions);
            }
            
            var payloadString = payload.ReadToString();
            
            throw new HttpResponseException(code, payloadString);
        }
    }

}