// Copyright (c) 2022-2023 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Iam.Model;

namespace AccelByte.Sdk.Api.Iam.Operation
{
    /// <summary>
    /// AdminRevokeUserFromRoleV4
    ///
    /// Required permission ADMIN:ROLE [UPDATE]
    /// 
    /// Current implementation will revoke user from role in all assigned namespaces.
    /// 
    /// Parameters:
    /// - userId: string (required)
    /// - namespace: string (userâs namespace) (required)
    /// 
    /// action code: 10411
    /// </summary>
    public class AdminRevokeUserFromRoleV4 : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static AdminRevokeUserFromRoleV4Builder Builder { get => new AdminRevokeUserFromRoleV4Builder(); }

        public class AdminRevokeUserFromRoleV4Builder
            : OperationBuilder<AdminRevokeUserFromRoleV4Builder>
        {





            internal AdminRevokeUserFromRoleV4Builder() { }

            internal AdminRevokeUserFromRoleV4Builder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }






            public AdminRevokeUserFromRoleV4 Build(
                ModelRevokeUserV4Request body,
                string roleId
            )
            {
                AdminRevokeUserFromRoleV4 op = new AdminRevokeUserFromRoleV4(this,
                    body,
                    roleId
                );
                op.PreferredSecurityMethod = PreferredSecurityMethod;

                return op;
            }

            public void Execute(
                ModelRevokeUserV4Request body,
                string roleId
            )
            {
                AdminRevokeUserFromRoleV4 op = Build(
                    body,
                    roleId
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
        }

        private AdminRevokeUserFromRoleV4(AdminRevokeUserFromRoleV4Builder builder,
            ModelRevokeUserV4Request body,
            string roleId
        )
        {
            PathParams["roleId"] = roleId;





            BodyParams = body;


            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public AdminRevokeUserFromRoleV4(
            string roleId,
            Model.ModelRevokeUserV4Request body
        )
        {
            PathParams["roleId"] = roleId;





            BodyParams = body;


            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/iam/v4/admin/roles/{roleId}/users";

        public override HttpMethod Method => HttpMethod.Delete;

        public override List<string> Consumes => new() { "application/json" };

        public override List<string> Produces => new() { "application/json" };

        public void ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return;
            }

            var payloadString = payload.ReadToString();

            throw new HttpResponseException(code, payloadString);
        }
    }

}