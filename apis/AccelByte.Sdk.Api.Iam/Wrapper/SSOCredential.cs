// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;

using AccelByte.Sdk.Api.Iam.Model;
using AccelByte.Sdk.Api.Iam.Operation;

namespace AccelByte.Sdk.Api.Iam.Wrapper
{
    public class SSOCredential
    {
        private readonly IAccelByteSdk _sdk;

        private string _CustomBasePath = String.Empty;

        public SSOCredential(IAccelByteSdk sdk)
        {
            _sdk = sdk;
        }

        public SSOCredential(IAccelByteSdk sdk, string customBasePath)
        {
            _sdk = sdk;
            _CustomBasePath = customBasePath;
        }

        #region Operation Builders
        public RetrieveAllSSOLoginPlatformCredentialV3.RetrieveAllSSOLoginPlatformCredentialV3Builder RetrieveAllSSOLoginPlatformCredentialV3Op
        {
            get
            {
                var opBuilder = new Operation.RetrieveAllSSOLoginPlatformCredentialV3.RetrieveAllSSOLoginPlatformCredentialV3Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public RetrieveSSOLoginPlatformCredential.RetrieveSSOLoginPlatformCredentialBuilder RetrieveSSOLoginPlatformCredentialOp
        {
            get
            {
                var opBuilder = new Operation.RetrieveSSOLoginPlatformCredential.RetrieveSSOLoginPlatformCredentialBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AddSSOLoginPlatformCredential.AddSSOLoginPlatformCredentialBuilder AddSSOLoginPlatformCredentialOp
        {
            get
            {
                var opBuilder = new Operation.AddSSOLoginPlatformCredential.AddSSOLoginPlatformCredentialBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public DeleteSSOLoginPlatformCredentialV3.DeleteSSOLoginPlatformCredentialV3Builder DeleteSSOLoginPlatformCredentialV3Op
        {
            get
            {
                var opBuilder = new Operation.DeleteSSOLoginPlatformCredentialV3.DeleteSSOLoginPlatformCredentialV3Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public UpdateSSOPlatformCredential.UpdateSSOPlatformCredentialBuilder UpdateSSOPlatformCredentialOp
        {
            get
            {
                var opBuilder = new Operation.UpdateSSOPlatformCredential.UpdateSSOPlatformCredentialBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        #endregion

        public RetrieveAllSSOLoginPlatformCredentialV3.Response RetrieveAllSSOLoginPlatformCredentialV3(RetrieveAllSSOLoginPlatformCredentialV3 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<RetrieveAllSSOLoginPlatformCredentialV3.Response> RetrieveAllSSOLoginPlatformCredentialV3Async(RetrieveAllSSOLoginPlatformCredentialV3 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public RetrieveSSOLoginPlatformCredential.Response RetrieveSSOLoginPlatformCredential(RetrieveSSOLoginPlatformCredential input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<RetrieveSSOLoginPlatformCredential.Response> RetrieveSSOLoginPlatformCredentialAsync(RetrieveSSOLoginPlatformCredential input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AddSSOLoginPlatformCredential.Response AddSSOLoginPlatformCredential(AddSSOLoginPlatformCredential input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AddSSOLoginPlatformCredential.Response> AddSSOLoginPlatformCredentialAsync(AddSSOLoginPlatformCredential input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public DeleteSSOLoginPlatformCredentialV3.Response DeleteSSOLoginPlatformCredentialV3(DeleteSSOLoginPlatformCredentialV3 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<DeleteSSOLoginPlatformCredentialV3.Response> DeleteSSOLoginPlatformCredentialV3Async(DeleteSSOLoginPlatformCredentialV3 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public UpdateSSOPlatformCredential.Response UpdateSSOPlatformCredential(UpdateSSOPlatformCredential input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<UpdateSSOPlatformCredential.Response> UpdateSSOPlatformCredentialAsync(UpdateSSOPlatformCredential input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
    }
}