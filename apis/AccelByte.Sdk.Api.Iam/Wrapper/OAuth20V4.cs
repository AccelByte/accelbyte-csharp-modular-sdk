// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;

using AccelByte.Sdk.Api.Iam.Model;
using AccelByte.Sdk.Api.Iam.Operation;

namespace AccelByte.Sdk.Api.Iam.Wrapper
{
    public class OAuth20V4
    {
        private readonly IAccelByteSdk _sdk;

        private string _CustomBasePath = String.Empty;

        public OAuth20V4(IAccelByteSdk sdk)
        {
            _sdk = sdk;
        }

        public OAuth20V4(IAccelByteSdk sdk, string customBasePath)
        {
            _sdk = sdk;
            _CustomBasePath = customBasePath;
        }

        #region Operation Builders
        public AuthenticationWithPlatformLinkV4.AuthenticationWithPlatformLinkV4Builder AuthenticationWithPlatformLinkV4Op
        {
            get
            {
                var opBuilder = new Operation.AuthenticationWithPlatformLinkV4.AuthenticationWithPlatformLinkV4Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public GenerateTokenByNewHeadlessAccountV4.GenerateTokenByNewHeadlessAccountV4Builder GenerateTokenByNewHeadlessAccountV4Op
        {
            get
            {
                var opBuilder = new Operation.GenerateTokenByNewHeadlessAccountV4.GenerateTokenByNewHeadlessAccountV4Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public Verify2faCodeV4.Verify2faCodeV4Builder Verify2faCodeV4Op
        {
            get
            {
                var opBuilder = new Operation.Verify2faCodeV4.Verify2faCodeV4Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public PlatformTokenGrantV4.PlatformTokenGrantV4Builder PlatformTokenGrantV4Op
        {
            get
            {
                var opBuilder = new Operation.PlatformTokenGrantV4.PlatformTokenGrantV4Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public SimultaneousLoginV4.SimultaneousLoginV4Builder SimultaneousLoginV4Op
        {
            get
            {
                var opBuilder = new Operation.SimultaneousLoginV4.SimultaneousLoginV4Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public TokenGrantV4.TokenGrantV4Builder TokenGrantV4Op
        {
            get
            {
                var opBuilder = new Operation.TokenGrantV4.TokenGrantV4Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public RequestTargetTokenResponseV4.RequestTargetTokenResponseV4Builder RequestTargetTokenResponseV4Op
        {
            get
            {
                var opBuilder = new Operation.RequestTargetTokenResponseV4.RequestTargetTokenResponseV4Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        #endregion

        public AuthenticationWithPlatformLinkV4.Response AuthenticationWithPlatformLinkV4(AuthenticationWithPlatformLinkV4 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AuthenticationWithPlatformLinkV4.Response> AuthenticationWithPlatformLinkV4Async(AuthenticationWithPlatformLinkV4 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public GenerateTokenByNewHeadlessAccountV4.Response GenerateTokenByNewHeadlessAccountV4(GenerateTokenByNewHeadlessAccountV4 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<GenerateTokenByNewHeadlessAccountV4.Response> GenerateTokenByNewHeadlessAccountV4Async(GenerateTokenByNewHeadlessAccountV4 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Verify2faCodeV4.Response Verify2faCodeV4(Verify2faCodeV4 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Verify2faCodeV4.Response> Verify2faCodeV4Async(Verify2faCodeV4 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public PlatformTokenGrantV4.Response PlatformTokenGrantV4(PlatformTokenGrantV4 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<PlatformTokenGrantV4.Response> PlatformTokenGrantV4Async(PlatformTokenGrantV4 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public SimultaneousLoginV4.Response SimultaneousLoginV4(SimultaneousLoginV4 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<SimultaneousLoginV4.Response> SimultaneousLoginV4Async(SimultaneousLoginV4 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public TokenGrantV4.Response TokenGrantV4(TokenGrantV4 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<TokenGrantV4.Response> TokenGrantV4Async(TokenGrantV4 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public RequestTargetTokenResponseV4.Response RequestTargetTokenResponseV4(RequestTargetTokenResponseV4 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<RequestTargetTokenResponseV4.Response> RequestTargetTokenResponseV4Async(RequestTargetTokenResponseV4 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
    }
}