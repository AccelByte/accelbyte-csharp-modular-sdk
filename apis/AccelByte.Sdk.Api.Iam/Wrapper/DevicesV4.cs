// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;

using AccelByte.Sdk.Api.Iam.Model;
using AccelByte.Sdk.Api.Iam.Operation;

namespace AccelByte.Sdk.Api.Iam.Wrapper
{
    public class DevicesV4
    {
        private readonly IAccelByteSdk _sdk;

        private string _CustomBasePath = String.Empty;

        public DevicesV4(IAccelByteSdk sdk)
        {
            _sdk = sdk;
        }

        public DevicesV4(IAccelByteSdk sdk, string customBasePath)
        {
            _sdk = sdk;
            _CustomBasePath = customBasePath;
        }

        #region Operation Builders
        public AdminGetDevicesByUserV4.AdminGetDevicesByUserV4Builder AdminGetDevicesByUserV4Op
        {
            get
            {
                var opBuilder = new Operation.AdminGetDevicesByUserV4.AdminGetDevicesByUserV4Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminGetBannedDevicesV4.AdminGetBannedDevicesV4Builder AdminGetBannedDevicesV4Op
        {
            get
            {
                var opBuilder = new Operation.AdminGetBannedDevicesV4.AdminGetBannedDevicesV4Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminGetUserDeviceBansV4.AdminGetUserDeviceBansV4Builder AdminGetUserDeviceBansV4Op
        {
            get
            {
                var opBuilder = new Operation.AdminGetUserDeviceBansV4.AdminGetUserDeviceBansV4Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminBanDeviceV4.AdminBanDeviceV4Builder AdminBanDeviceV4Op
        {
            get
            {
                var opBuilder = new Operation.AdminBanDeviceV4.AdminBanDeviceV4Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminGetDeviceBanV4.AdminGetDeviceBanV4Builder AdminGetDeviceBanV4Op
        {
            get
            {
                var opBuilder = new Operation.AdminGetDeviceBanV4.AdminGetDeviceBanV4Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminUpdateDeviceBanV4.AdminUpdateDeviceBanV4Builder AdminUpdateDeviceBanV4Op
        {
            get
            {
                var opBuilder = new Operation.AdminUpdateDeviceBanV4.AdminUpdateDeviceBanV4Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminGenerateReportV4.AdminGenerateReportV4Builder AdminGenerateReportV4Op
        {
            get
            {
                var opBuilder = new Operation.AdminGenerateReportV4.AdminGenerateReportV4Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminGetDeviceTypesV4.AdminGetDeviceTypesV4Builder AdminGetDeviceTypesV4Op
        {
            get
            {
                var opBuilder = new Operation.AdminGetDeviceTypesV4.AdminGetDeviceTypesV4Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminGetDeviceBansV4.AdminGetDeviceBansV4Builder AdminGetDeviceBansV4Op
        {
            get
            {
                var opBuilder = new Operation.AdminGetDeviceBansV4.AdminGetDeviceBansV4Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        [Obsolete(DiagnosticId ="ab_deprecated_operation_wrapper")]
        public AdminDecryptDeviceV4.AdminDecryptDeviceV4Builder AdminDecryptDeviceV4Op
        {
            get
            {
                var opBuilder = new Operation.AdminDecryptDeviceV4.AdminDecryptDeviceV4Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminUnbanDeviceV4.AdminUnbanDeviceV4Builder AdminUnbanDeviceV4Op
        {
            get
            {
                var opBuilder = new Operation.AdminUnbanDeviceV4.AdminUnbanDeviceV4Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminGetUsersByDeviceV4.AdminGetUsersByDeviceV4Builder AdminGetUsersByDeviceV4Op
        {
            get
            {
                var opBuilder = new Operation.AdminGetUsersByDeviceV4.AdminGetUsersByDeviceV4Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        #endregion

        public AdminGetDevicesByUserV4.Response AdminGetDevicesByUserV4(AdminGetDevicesByUserV4 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminGetDevicesByUserV4.Response> AdminGetDevicesByUserV4Async(AdminGetDevicesByUserV4 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminGetBannedDevicesV4.Response AdminGetBannedDevicesV4(AdminGetBannedDevicesV4 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminGetBannedDevicesV4.Response> AdminGetBannedDevicesV4Async(AdminGetBannedDevicesV4 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminGetUserDeviceBansV4.Response AdminGetUserDeviceBansV4(AdminGetUserDeviceBansV4 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminGetUserDeviceBansV4.Response> AdminGetUserDeviceBansV4Async(AdminGetUserDeviceBansV4 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminBanDeviceV4.Response AdminBanDeviceV4(AdminBanDeviceV4 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminBanDeviceV4.Response> AdminBanDeviceV4Async(AdminBanDeviceV4 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminGetDeviceBanV4.Response AdminGetDeviceBanV4(AdminGetDeviceBanV4 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminGetDeviceBanV4.Response> AdminGetDeviceBanV4Async(AdminGetDeviceBanV4 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminUpdateDeviceBanV4.Response AdminUpdateDeviceBanV4(AdminUpdateDeviceBanV4 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminUpdateDeviceBanV4.Response> AdminUpdateDeviceBanV4Async(AdminUpdateDeviceBanV4 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminGenerateReportV4.Response AdminGenerateReportV4(AdminGenerateReportV4 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminGenerateReportV4.Response> AdminGenerateReportV4Async(AdminGenerateReportV4 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminGetDeviceTypesV4.Response AdminGetDeviceTypesV4(AdminGetDeviceTypesV4 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminGetDeviceTypesV4.Response> AdminGetDeviceTypesV4Async(AdminGetDeviceTypesV4 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminGetDeviceBansV4.Response AdminGetDeviceBansV4(AdminGetDeviceBansV4 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminGetDeviceBansV4.Response> AdminGetDeviceBansV4Async(AdminGetDeviceBansV4 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        #pragma warning disable ab_deprecated_operation
        [Obsolete(DiagnosticId ="ab_deprecated_operation_wrapper")]
        public AdminDecryptDeviceV4.Response AdminDecryptDeviceV4(AdminDecryptDeviceV4 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminDecryptDeviceV4.Response> AdminDecryptDeviceV4Async(AdminDecryptDeviceV4 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        #pragma warning restore ab_deprecated_operation
        public AdminUnbanDeviceV4.Response AdminUnbanDeviceV4(AdminUnbanDeviceV4 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminUnbanDeviceV4.Response> AdminUnbanDeviceV4Async(AdminUnbanDeviceV4 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminGetUsersByDeviceV4.Response AdminGetUsersByDeviceV4(AdminGetUsersByDeviceV4 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminGetUsersByDeviceV4.Response> AdminGetUsersByDeviceV4Async(AdminGetUsersByDeviceV4 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
    }
}