// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;

using AccelByte.Sdk.Api.Iam.Model;
using AccelByte.Sdk.Api.Iam.Operation;

namespace AccelByte.Sdk.Api.Iam.Wrapper
{
    public class Roles
    {
        private readonly IAccelByteSdk _sdk;

        private string _CustomBasePath = String.Empty;

        public Roles(IAccelByteSdk sdk)
        {
            _sdk = sdk;
        }

        public Roles(IAccelByteSdk sdk, string customBasePath)
        {
            _sdk = sdk;
            _CustomBasePath = customBasePath;
        }

        #region Operation Builders
        [Obsolete(DiagnosticId = "ab_deprecated_operation_wrapper")]
        public GetRoles.GetRolesBuilder GetRolesOp
        {
            get
            {
                var opBuilder = new Operation.GetRoles.GetRolesBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        [Obsolete(DiagnosticId = "ab_deprecated_operation_wrapper")]
        public CreateRole.CreateRoleBuilder CreateRoleOp
        {
            get
            {
                var opBuilder = new Operation.CreateRole.CreateRoleBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        [Obsolete(DiagnosticId = "ab_deprecated_operation_wrapper")]
        public GetRole.GetRoleBuilder GetRoleOp
        {
            get
            {
                var opBuilder = new Operation.GetRole.GetRoleBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        [Obsolete(DiagnosticId = "ab_deprecated_operation_wrapper")]
        public UpdateRole.UpdateRoleBuilder UpdateRoleOp
        {
            get
            {
                var opBuilder = new Operation.UpdateRole.UpdateRoleBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        [Obsolete(DiagnosticId = "ab_deprecated_operation_wrapper")]
        public DeleteRole.DeleteRoleBuilder DeleteRoleOp
        {
            get
            {
                var opBuilder = new Operation.DeleteRole.DeleteRoleBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        [Obsolete(DiagnosticId = "ab_deprecated_operation_wrapper")]
        public GetRoleAdminStatus.GetRoleAdminStatusBuilder GetRoleAdminStatusOp
        {
            get
            {
                var opBuilder = new Operation.GetRoleAdminStatus.GetRoleAdminStatusBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        [Obsolete(DiagnosticId = "ab_deprecated_operation_wrapper")]
        public SetRoleAsAdmin.SetRoleAsAdminBuilder SetRoleAsAdminOp
        {
            get
            {
                var opBuilder = new Operation.SetRoleAsAdmin.SetRoleAsAdminBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        [Obsolete(DiagnosticId = "ab_deprecated_operation_wrapper")]
        public RemoveRoleAdmin.RemoveRoleAdminBuilder RemoveRoleAdminOp
        {
            get
            {
                var opBuilder = new Operation.RemoveRoleAdmin.RemoveRoleAdminBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        [Obsolete(DiagnosticId = "ab_deprecated_operation_wrapper")]
        public GetRoleManagers.GetRoleManagersBuilder GetRoleManagersOp
        {
            get
            {
                var opBuilder = new Operation.GetRoleManagers.GetRoleManagersBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        [Obsolete(DiagnosticId = "ab_deprecated_operation_wrapper")]
        public AddRoleManagers.AddRoleManagersBuilder AddRoleManagersOp
        {
            get
            {
                var opBuilder = new Operation.AddRoleManagers.AddRoleManagersBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        [Obsolete(DiagnosticId = "ab_deprecated_operation_wrapper")]
        public RemoveRoleManagers.RemoveRoleManagersBuilder RemoveRoleManagersOp
        {
            get
            {
                var opBuilder = new Operation.RemoveRoleManagers.RemoveRoleManagersBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        [Obsolete(DiagnosticId = "ab_deprecated_operation_wrapper")]
        public GetRoleMembers.GetRoleMembersBuilder GetRoleMembersOp
        {
            get
            {
                var opBuilder = new Operation.GetRoleMembers.GetRoleMembersBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        [Obsolete(DiagnosticId = "ab_deprecated_operation_wrapper")]
        public AddRoleMembers.AddRoleMembersBuilder AddRoleMembersOp
        {
            get
            {
                var opBuilder = new Operation.AddRoleMembers.AddRoleMembersBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        [Obsolete(DiagnosticId = "ab_deprecated_operation_wrapper")]
        public RemoveRoleMembers.RemoveRoleMembersBuilder RemoveRoleMembersOp
        {
            get
            {
                var opBuilder = new Operation.RemoveRoleMembers.RemoveRoleMembersBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        [Obsolete(DiagnosticId = "ab_deprecated_operation_wrapper")]
        public UpdateRolePermissions.UpdateRolePermissionsBuilder UpdateRolePermissionsOp
        {
            get
            {
                var opBuilder = new Operation.UpdateRolePermissions.UpdateRolePermissionsBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        [Obsolete(DiagnosticId = "ab_deprecated_operation_wrapper")]
        public AddRolePermission.AddRolePermissionBuilder AddRolePermissionOp
        {
            get
            {
                var opBuilder = new Operation.AddRolePermission.AddRolePermissionBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        [Obsolete(DiagnosticId = "ab_deprecated_operation_wrapper")]
        public DeleteRolePermission.DeleteRolePermissionBuilder DeleteRolePermissionOp
        {
            get
            {
                var opBuilder = new Operation.DeleteRolePermission.DeleteRolePermissionBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminGetRolesV3.AdminGetRolesV3Builder AdminGetRolesV3Op
        {
            get
            {
                var opBuilder = new Operation.AdminGetRolesV3.AdminGetRolesV3Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminCreateRoleV3.AdminCreateRoleV3Builder AdminCreateRoleV3Op
        {
            get
            {
                var opBuilder = new Operation.AdminCreateRoleV3.AdminCreateRoleV3Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminGetRoleV3.AdminGetRoleV3Builder AdminGetRoleV3Op
        {
            get
            {
                var opBuilder = new Operation.AdminGetRoleV3.AdminGetRoleV3Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminDeleteRoleV3.AdminDeleteRoleV3Builder AdminDeleteRoleV3Op
        {
            get
            {
                var opBuilder = new Operation.AdminDeleteRoleV3.AdminDeleteRoleV3Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminUpdateRoleV3.AdminUpdateRoleV3Builder AdminUpdateRoleV3Op
        {
            get
            {
                var opBuilder = new Operation.AdminUpdateRoleV3.AdminUpdateRoleV3Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminGetRoleAdminStatusV3.AdminGetRoleAdminStatusV3Builder AdminGetRoleAdminStatusV3Op
        {
            get
            {
                var opBuilder = new Operation.AdminGetRoleAdminStatusV3.AdminGetRoleAdminStatusV3Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminUpdateAdminRoleStatusV3.AdminUpdateAdminRoleStatusV3Builder AdminUpdateAdminRoleStatusV3Op
        {
            get
            {
                var opBuilder = new Operation.AdminUpdateAdminRoleStatusV3.AdminUpdateAdminRoleStatusV3Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminRemoveRoleAdminV3.AdminRemoveRoleAdminV3Builder AdminRemoveRoleAdminV3Op
        {
            get
            {
                var opBuilder = new Operation.AdminRemoveRoleAdminV3.AdminRemoveRoleAdminV3Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminGetRoleManagersV3.AdminGetRoleManagersV3Builder AdminGetRoleManagersV3Op
        {
            get
            {
                var opBuilder = new Operation.AdminGetRoleManagersV3.AdminGetRoleManagersV3Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminAddRoleManagersV3.AdminAddRoleManagersV3Builder AdminAddRoleManagersV3Op
        {
            get
            {
                var opBuilder = new Operation.AdminAddRoleManagersV3.AdminAddRoleManagersV3Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminRemoveRoleManagersV3.AdminRemoveRoleManagersV3Builder AdminRemoveRoleManagersV3Op
        {
            get
            {
                var opBuilder = new Operation.AdminRemoveRoleManagersV3.AdminRemoveRoleManagersV3Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminGetRoleMembersV3.AdminGetRoleMembersV3Builder AdminGetRoleMembersV3Op
        {
            get
            {
                var opBuilder = new Operation.AdminGetRoleMembersV3.AdminGetRoleMembersV3Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminAddRoleMembersV3.AdminAddRoleMembersV3Builder AdminAddRoleMembersV3Op
        {
            get
            {
                var opBuilder = new Operation.AdminAddRoleMembersV3.AdminAddRoleMembersV3Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        [Obsolete(DiagnosticId = "ab_deprecated_operation_wrapper")]
        public AdminRemoveRoleMembersV3.AdminRemoveRoleMembersV3Builder AdminRemoveRoleMembersV3Op
        {
            get
            {
                var opBuilder = new Operation.AdminRemoveRoleMembersV3.AdminRemoveRoleMembersV3Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminUpdateRolePermissionsV3.AdminUpdateRolePermissionsV3Builder AdminUpdateRolePermissionsV3Op
        {
            get
            {
                var opBuilder = new Operation.AdminUpdateRolePermissionsV3.AdminUpdateRolePermissionsV3Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminAddRolePermissionsV3.AdminAddRolePermissionsV3Builder AdminAddRolePermissionsV3Op
        {
            get
            {
                var opBuilder = new Operation.AdminAddRolePermissionsV3.AdminAddRolePermissionsV3Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminDeleteRolePermissionsV3.AdminDeleteRolePermissionsV3Builder AdminDeleteRolePermissionsV3Op
        {
            get
            {
                var opBuilder = new Operation.AdminDeleteRolePermissionsV3.AdminDeleteRolePermissionsV3Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminDeleteRolePermissionV3.AdminDeleteRolePermissionV3Builder AdminDeleteRolePermissionV3Op
        {
            get
            {
                var opBuilder = new Operation.AdminDeleteRolePermissionV3.AdminDeleteRolePermissionV3Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public PublicGetRolesV3.PublicGetRolesV3Builder PublicGetRolesV3Op
        {
            get
            {
                var opBuilder = new Operation.PublicGetRolesV3.PublicGetRolesV3Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public PublicGetRoleV3.PublicGetRoleV3Builder PublicGetRoleV3Op
        {
            get
            {
                var opBuilder = new Operation.PublicGetRoleV3.PublicGetRoleV3Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminGetRolesV4.AdminGetRolesV4Builder AdminGetRolesV4Op
        {
            get
            {
                var opBuilder = new Operation.AdminGetRolesV4.AdminGetRolesV4Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminCreateRoleV4.AdminCreateRoleV4Builder AdminCreateRoleV4Op
        {
            get
            {
                var opBuilder = new Operation.AdminCreateRoleV4.AdminCreateRoleV4Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminGetRoleV4.AdminGetRoleV4Builder AdminGetRoleV4Op
        {
            get
            {
                var opBuilder = new Operation.AdminGetRoleV4.AdminGetRoleV4Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminDeleteRoleV4.AdminDeleteRoleV4Builder AdminDeleteRoleV4Op
        {
            get
            {
                var opBuilder = new Operation.AdminDeleteRoleV4.AdminDeleteRoleV4Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminUpdateRoleV4.AdminUpdateRoleV4Builder AdminUpdateRoleV4Op
        {
            get
            {
                var opBuilder = new Operation.AdminUpdateRoleV4.AdminUpdateRoleV4Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminUpdateRolePermissionsV4.AdminUpdateRolePermissionsV4Builder AdminUpdateRolePermissionsV4Op
        {
            get
            {
                var opBuilder = new Operation.AdminUpdateRolePermissionsV4.AdminUpdateRolePermissionsV4Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminAddRolePermissionsV4.AdminAddRolePermissionsV4Builder AdminAddRolePermissionsV4Op
        {
            get
            {
                var opBuilder = new Operation.AdminAddRolePermissionsV4.AdminAddRolePermissionsV4Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminDeleteRolePermissionsV4.AdminDeleteRolePermissionsV4Builder AdminDeleteRolePermissionsV4Op
        {
            get
            {
                var opBuilder = new Operation.AdminDeleteRolePermissionsV4.AdminDeleteRolePermissionsV4Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminListAssignedUsersV4.AdminListAssignedUsersV4Builder AdminListAssignedUsersV4Op
        {
            get
            {
                var opBuilder = new Operation.AdminListAssignedUsersV4.AdminListAssignedUsersV4Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminAssignUserToRoleV4.AdminAssignUserToRoleV4Builder AdminAssignUserToRoleV4Op
        {
            get
            {
                var opBuilder = new Operation.AdminAssignUserToRoleV4.AdminAssignUserToRoleV4Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminRevokeUserFromRoleV4.AdminRevokeUserFromRoleV4Builder AdminRevokeUserFromRoleV4Op
        {
            get
            {
                var opBuilder = new Operation.AdminRevokeUserFromRoleV4.AdminRevokeUserFromRoleV4Builder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        #endregion

#pragma warning disable ab_deprecated_operation
        [Obsolete(DiagnosticId = "ab_deprecated_operation_wrapper")]
        public GetRoles.Response GetRoles(GetRoles input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<GetRoles.Response> GetRolesAsync(GetRoles input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
#pragma warning restore ab_deprecated_operation
#pragma warning disable ab_deprecated_operation
        [Obsolete(DiagnosticId = "ab_deprecated_operation_wrapper")]
        public CreateRole.Response CreateRole(CreateRole input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<CreateRole.Response> CreateRoleAsync(CreateRole input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
#pragma warning restore ab_deprecated_operation
#pragma warning disable ab_deprecated_operation
        [Obsolete(DiagnosticId = "ab_deprecated_operation_wrapper")]
        public GetRole.Response GetRole(GetRole input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<GetRole.Response> GetRoleAsync(GetRole input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
#pragma warning restore ab_deprecated_operation
#pragma warning disable ab_deprecated_operation
        [Obsolete(DiagnosticId = "ab_deprecated_operation_wrapper")]
        public UpdateRole.Response UpdateRole(UpdateRole input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<UpdateRole.Response> UpdateRoleAsync(UpdateRole input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
#pragma warning restore ab_deprecated_operation
#pragma warning disable ab_deprecated_operation
        [Obsolete(DiagnosticId = "ab_deprecated_operation_wrapper")]
        public DeleteRole.Response DeleteRole(DeleteRole input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<DeleteRole.Response> DeleteRoleAsync(DeleteRole input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
#pragma warning restore ab_deprecated_operation
#pragma warning disable ab_deprecated_operation
        [Obsolete(DiagnosticId = "ab_deprecated_operation_wrapper")]
        public GetRoleAdminStatus.Response GetRoleAdminStatus(GetRoleAdminStatus input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<GetRoleAdminStatus.Response> GetRoleAdminStatusAsync(GetRoleAdminStatus input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
#pragma warning restore ab_deprecated_operation
#pragma warning disable ab_deprecated_operation
        [Obsolete(DiagnosticId = "ab_deprecated_operation_wrapper")]
        public SetRoleAsAdmin.Response SetRoleAsAdmin(SetRoleAsAdmin input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<SetRoleAsAdmin.Response> SetRoleAsAdminAsync(SetRoleAsAdmin input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
#pragma warning restore ab_deprecated_operation
#pragma warning disable ab_deprecated_operation
        [Obsolete(DiagnosticId = "ab_deprecated_operation_wrapper")]
        public RemoveRoleAdmin.Response RemoveRoleAdmin(RemoveRoleAdmin input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<RemoveRoleAdmin.Response> RemoveRoleAdminAsync(RemoveRoleAdmin input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
#pragma warning restore ab_deprecated_operation
#pragma warning disable ab_deprecated_operation
        [Obsolete(DiagnosticId = "ab_deprecated_operation_wrapper")]
        public GetRoleManagers.Response GetRoleManagers(GetRoleManagers input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<GetRoleManagers.Response> GetRoleManagersAsync(GetRoleManagers input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
#pragma warning restore ab_deprecated_operation
#pragma warning disable ab_deprecated_operation
        [Obsolete(DiagnosticId = "ab_deprecated_operation_wrapper")]
        public AddRoleManagers.Response AddRoleManagers(AddRoleManagers input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AddRoleManagers.Response> AddRoleManagersAsync(AddRoleManagers input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
#pragma warning restore ab_deprecated_operation
#pragma warning disable ab_deprecated_operation
        [Obsolete(DiagnosticId = "ab_deprecated_operation_wrapper")]
        public RemoveRoleManagers.Response RemoveRoleManagers(RemoveRoleManagers input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<RemoveRoleManagers.Response> RemoveRoleManagersAsync(RemoveRoleManagers input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
#pragma warning restore ab_deprecated_operation
#pragma warning disable ab_deprecated_operation
        [Obsolete(DiagnosticId = "ab_deprecated_operation_wrapper")]
        public GetRoleMembers.Response GetRoleMembers(GetRoleMembers input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<GetRoleMembers.Response> GetRoleMembersAsync(GetRoleMembers input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
#pragma warning restore ab_deprecated_operation
#pragma warning disable ab_deprecated_operation
        [Obsolete(DiagnosticId = "ab_deprecated_operation_wrapper")]
        public AddRoleMembers.Response AddRoleMembers(AddRoleMembers input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AddRoleMembers.Response> AddRoleMembersAsync(AddRoleMembers input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
#pragma warning restore ab_deprecated_operation
#pragma warning disable ab_deprecated_operation
        [Obsolete(DiagnosticId = "ab_deprecated_operation_wrapper")]
        public RemoveRoleMembers.Response RemoveRoleMembers(RemoveRoleMembers input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<RemoveRoleMembers.Response> RemoveRoleMembersAsync(RemoveRoleMembers input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
#pragma warning restore ab_deprecated_operation
#pragma warning disable ab_deprecated_operation
        [Obsolete(DiagnosticId = "ab_deprecated_operation_wrapper")]
        public UpdateRolePermissions.Response UpdateRolePermissions(UpdateRolePermissions input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<UpdateRolePermissions.Response> UpdateRolePermissionsAsync(UpdateRolePermissions input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
#pragma warning restore ab_deprecated_operation
#pragma warning disable ab_deprecated_operation
        [Obsolete(DiagnosticId = "ab_deprecated_operation_wrapper")]
        public AddRolePermission.Response AddRolePermission(AddRolePermission input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AddRolePermission.Response> AddRolePermissionAsync(AddRolePermission input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
#pragma warning restore ab_deprecated_operation
#pragma warning disable ab_deprecated_operation
        [Obsolete(DiagnosticId = "ab_deprecated_operation_wrapper")]
        public DeleteRolePermission.Response DeleteRolePermission(DeleteRolePermission input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<DeleteRolePermission.Response> DeleteRolePermissionAsync(DeleteRolePermission input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
#pragma warning restore ab_deprecated_operation
        public AdminGetRolesV3.Response AdminGetRolesV3(AdminGetRolesV3 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminGetRolesV3.Response> AdminGetRolesV3Async(AdminGetRolesV3 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminCreateRoleV3.Response AdminCreateRoleV3(AdminCreateRoleV3 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminCreateRoleV3.Response> AdminCreateRoleV3Async(AdminCreateRoleV3 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminGetRoleV3.Response AdminGetRoleV3(AdminGetRoleV3 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminGetRoleV3.Response> AdminGetRoleV3Async(AdminGetRoleV3 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminDeleteRoleV3.Response AdminDeleteRoleV3(AdminDeleteRoleV3 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminDeleteRoleV3.Response> AdminDeleteRoleV3Async(AdminDeleteRoleV3 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminUpdateRoleV3.Response AdminUpdateRoleV3(AdminUpdateRoleV3 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminUpdateRoleV3.Response> AdminUpdateRoleV3Async(AdminUpdateRoleV3 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminGetRoleAdminStatusV3.Response AdminGetRoleAdminStatusV3(AdminGetRoleAdminStatusV3 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminGetRoleAdminStatusV3.Response> AdminGetRoleAdminStatusV3Async(AdminGetRoleAdminStatusV3 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminUpdateAdminRoleStatusV3.Response AdminUpdateAdminRoleStatusV3(AdminUpdateAdminRoleStatusV3 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminUpdateAdminRoleStatusV3.Response> AdminUpdateAdminRoleStatusV3Async(AdminUpdateAdminRoleStatusV3 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminRemoveRoleAdminV3.Response AdminRemoveRoleAdminV3(AdminRemoveRoleAdminV3 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminRemoveRoleAdminV3.Response> AdminRemoveRoleAdminV3Async(AdminRemoveRoleAdminV3 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminGetRoleManagersV3.Response AdminGetRoleManagersV3(AdminGetRoleManagersV3 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminGetRoleManagersV3.Response> AdminGetRoleManagersV3Async(AdminGetRoleManagersV3 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminAddRoleManagersV3.Response AdminAddRoleManagersV3(AdminAddRoleManagersV3 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminAddRoleManagersV3.Response> AdminAddRoleManagersV3Async(AdminAddRoleManagersV3 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminRemoveRoleManagersV3.Response AdminRemoveRoleManagersV3(AdminRemoveRoleManagersV3 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminRemoveRoleManagersV3.Response> AdminRemoveRoleManagersV3Async(AdminRemoveRoleManagersV3 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminGetRoleMembersV3.Response AdminGetRoleMembersV3(AdminGetRoleMembersV3 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminGetRoleMembersV3.Response> AdminGetRoleMembersV3Async(AdminGetRoleMembersV3 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminAddRoleMembersV3.Response AdminAddRoleMembersV3(AdminAddRoleMembersV3 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminAddRoleMembersV3.Response> AdminAddRoleMembersV3Async(AdminAddRoleMembersV3 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
#pragma warning disable ab_deprecated_operation
        [Obsolete(DiagnosticId = "ab_deprecated_operation_wrapper")]
        public AdminRemoveRoleMembersV3.Response AdminRemoveRoleMembersV3(AdminRemoveRoleMembersV3 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminRemoveRoleMembersV3.Response> AdminRemoveRoleMembersV3Async(AdminRemoveRoleMembersV3 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
#pragma warning restore ab_deprecated_operation
        public AdminUpdateRolePermissionsV3.Response AdminUpdateRolePermissionsV3(AdminUpdateRolePermissionsV3 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminUpdateRolePermissionsV3.Response> AdminUpdateRolePermissionsV3Async(AdminUpdateRolePermissionsV3 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminAddRolePermissionsV3.Response AdminAddRolePermissionsV3(AdminAddRolePermissionsV3 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminAddRolePermissionsV3.Response> AdminAddRolePermissionsV3Async(AdminAddRolePermissionsV3 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminDeleteRolePermissionsV3.Response AdminDeleteRolePermissionsV3(AdminDeleteRolePermissionsV3 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminDeleteRolePermissionsV3.Response> AdminDeleteRolePermissionsV3Async(AdminDeleteRolePermissionsV3 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminDeleteRolePermissionV3.Response AdminDeleteRolePermissionV3(AdminDeleteRolePermissionV3 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminDeleteRolePermissionV3.Response> AdminDeleteRolePermissionV3Async(AdminDeleteRolePermissionV3 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public PublicGetRolesV3.Response PublicGetRolesV3(PublicGetRolesV3 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<PublicGetRolesV3.Response> PublicGetRolesV3Async(PublicGetRolesV3 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public PublicGetRoleV3.Response PublicGetRoleV3(PublicGetRoleV3 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<PublicGetRoleV3.Response> PublicGetRoleV3Async(PublicGetRoleV3 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminGetRolesV4.Response AdminGetRolesV4(AdminGetRolesV4 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminGetRolesV4.Response> AdminGetRolesV4Async(AdminGetRolesV4 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminCreateRoleV4.Response AdminCreateRoleV4(AdminCreateRoleV4 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminCreateRoleV4.Response> AdminCreateRoleV4Async(AdminCreateRoleV4 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminGetRoleV4.Response AdminGetRoleV4(AdminGetRoleV4 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminGetRoleV4.Response> AdminGetRoleV4Async(AdminGetRoleV4 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminDeleteRoleV4.Response AdminDeleteRoleV4(AdminDeleteRoleV4 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminDeleteRoleV4.Response> AdminDeleteRoleV4Async(AdminDeleteRoleV4 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminUpdateRoleV4.Response AdminUpdateRoleV4(AdminUpdateRoleV4 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminUpdateRoleV4.Response> AdminUpdateRoleV4Async(AdminUpdateRoleV4 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminUpdateRolePermissionsV4.Response AdminUpdateRolePermissionsV4(AdminUpdateRolePermissionsV4 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminUpdateRolePermissionsV4.Response> AdminUpdateRolePermissionsV4Async(AdminUpdateRolePermissionsV4 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminAddRolePermissionsV4.Response AdminAddRolePermissionsV4(AdminAddRolePermissionsV4 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminAddRolePermissionsV4.Response> AdminAddRolePermissionsV4Async(AdminAddRolePermissionsV4 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminDeleteRolePermissionsV4.Response AdminDeleteRolePermissionsV4(AdminDeleteRolePermissionsV4 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminDeleteRolePermissionsV4.Response> AdminDeleteRolePermissionsV4Async(AdminDeleteRolePermissionsV4 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminListAssignedUsersV4.Response AdminListAssignedUsersV4(AdminListAssignedUsersV4 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminListAssignedUsersV4.Response> AdminListAssignedUsersV4Async(AdminListAssignedUsersV4 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminAssignUserToRoleV4.Response AdminAssignUserToRoleV4(AdminAssignUserToRoleV4 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminAssignUserToRoleV4.Response> AdminAssignUserToRoleV4Async(AdminAssignUserToRoleV4 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminRevokeUserFromRoleV4.Response AdminRevokeUserFromRoleV4(AdminRevokeUserFromRoleV4 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminRevokeUserFromRoleV4.Response> AdminRevokeUserFromRoleV4Async(AdminRevokeUserFromRoleV4 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
    }
}