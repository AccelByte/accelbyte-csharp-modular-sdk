// Copyright (c) 2022-2023 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Group.Model;

namespace AccelByte.Sdk.Api.Group.Operation
{
    /// <summary>
    /// deleteMemberRoleAdminV1
    ///
    /// 
    /// 
    /// Required permission ADMIN:NAMESPACE:{namespace}:GROUP:ROLE [DELETE]
    /// 
    /// 
    /// 
    /// 
    /// This endpoint is used to delete member role. Any member role can't be deleted if the specific role is applied to the configuration (admin and member role)
    /// 
    /// 
    /// 
    /// 
    /// Action Code: 73207
    /// </summary>
    public class DeleteMemberRoleAdminV1 : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static DeleteMemberRoleAdminV1Builder Builder { get => new DeleteMemberRoleAdminV1Builder(); }

        public class DeleteMemberRoleAdminV1Builder
            : OperationBuilder<DeleteMemberRoleAdminV1Builder>
        {





            internal DeleteMemberRoleAdminV1Builder() { }

            internal DeleteMemberRoleAdminV1Builder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }






            public DeleteMemberRoleAdminV1 Build(
                string memberRoleId,
                string namespace_
            )
            {
                DeleteMemberRoleAdminV1 op = new DeleteMemberRoleAdminV1(this,
                    memberRoleId,
                    namespace_
                );
                op.PreferredSecurityMethod = PreferredSecurityMethod;
                op.RequestJsonOptions = RequestJsonOptions;
                op.ResponseJsonOptions = ResponseJsonOptions;

                return op;
            }

            public void Execute(
                string memberRoleId,
                string namespace_
            )
            {
                DeleteMemberRoleAdminV1 op = Build(
                    memberRoleId,
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                op.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
            }
        }

        private DeleteMemberRoleAdminV1(DeleteMemberRoleAdminV1Builder builder,
            string memberRoleId,
            string namespace_
        )
        {
            PathParams["memberRoleId"] = memberRoleId;
            PathParams["namespace"] = namespace_;







            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public DeleteMemberRoleAdminV1(
            string memberRoleId,
            string namespace_
        )
        {
            PathParams["memberRoleId"] = memberRoleId;
            PathParams["namespace"] = namespace_;







            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/group/v1/admin/namespaces/{namespace}/roles/{memberRoleId}";

        public override HttpMethod Method => HttpMethod.Delete;

        public override List<string> Consumes => new() { };

        public override List<string> Produces => new() { "application/json" };

        public void ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return;
            }

            var payloadString = payload.ReadToString();

            throw new HttpResponseException(code, payloadString);
        }
    }

}