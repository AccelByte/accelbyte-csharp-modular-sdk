// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Group.Model;

namespace AccelByte.Sdk.Api.Group.Operation
{
    /// <summary>
    /// deleteGroupPredefinedRulePublicV2
    ///
    /// Required valid user authentication
    /// 
    /// Required Member Role Permission: "GROUP [UPDATE]"
    /// 
    /// Delete group predefined rule based on the allowed action. This endpoint will check the group ID of the user based on the access token and compare it with the group ID in path parameter. It will also check the member role of the user based on the access token
    /// 
    /// Action Code: 73309
    /// </summary>
    public class DeleteGroupPredefinedRulePublicV2 : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static DeleteGroupPredefinedRulePublicV2Builder Builder { get => new DeleteGroupPredefinedRulePublicV2Builder(); }

        public class DeleteGroupPredefinedRulePublicV2Builder
            : OperationBuilder<DeleteGroupPredefinedRulePublicV2Builder>
        {





            internal DeleteGroupPredefinedRulePublicV2Builder() { }

            internal DeleteGroupPredefinedRulePublicV2Builder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }






            public DeleteGroupPredefinedRulePublicV2 Build(
                string allowedAction,
                string groupId,
                string namespace_
            )
            {
                DeleteGroupPredefinedRulePublicV2 op = new DeleteGroupPredefinedRulePublicV2(this,
                    allowedAction,                    
                    groupId,                    
                    namespace_                    
                );

                op.SetBaseFields<DeleteGroupPredefinedRulePublicV2Builder>(this);
                return op;
            }

            public DeleteGroupPredefinedRulePublicV2.Response Execute(
                string allowedAction,
                string groupId,
                string namespace_
            )
            {
                DeleteGroupPredefinedRulePublicV2 op = Build(
                    allowedAction,
                    groupId,
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
            public async Task<DeleteGroupPredefinedRulePublicV2.Response> ExecuteAsync(
                string allowedAction,
                string groupId,
                string namespace_
            )
            {
                DeleteGroupPredefinedRulePublicV2 op = Build(
                    allowedAction,
                    groupId,
                    namespace_
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = await _Sdk.RunRequestAsync(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
        }

        private DeleteGroupPredefinedRulePublicV2(DeleteGroupPredefinedRulePublicV2Builder builder,
            string allowedAction,
            string groupId,
            string namespace_
        )
        {
            PathParams["allowedAction"] = allowedAction;
            PathParams["groupId"] = groupId;
            PathParams["namespace"] = namespace_;
            
            

            
            
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        #region Response Part        
        public class Response : ApiResponse
        {

            public ResponseErrorResponse? Error400 { get; set; } = null;

            public ResponseErrorResponse? Error401 { get; set; } = null;

            public ResponseErrorResponse? Error403 { get; set; } = null;

            public ResponseErrorResponse? Error404 { get; set; } = null;

            public ResponseErrorResponse? Error500 { get; set; } = null;


            protected override string GetFullOperationId() => "Group::Group::DeleteGroupPredefinedRulePublicV2";
        }

        #endregion

        public DeleteGroupPredefinedRulePublicV2(
            string allowedAction,            
            string groupId,            
            string namespace_            
        )
        {
            PathParams["allowedAction"] = allowedAction;
            PathParams["groupId"] = groupId;
            PathParams["namespace"] = namespace_;
            
            

            
            
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/group/v2/public/namespaces/{namespace}/groups/{groupId}/rules/defined/{allowedAction}";

        public override HttpMethod Method => HttpMethod.Delete;

        public override List<string> Consumes => new() {  };

        public override List<string> Produces => new() { "application/json" };
        
        public DeleteGroupPredefinedRulePublicV2.Response ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            var response = new DeleteGroupPredefinedRulePublicV2.Response()
            {
                StatusCode = code,
                ContentType = contentType
            };

            int statusCode = (int)code;
            if (statusCode >= 200 && statusCode < 300)
            {
                response.IsSuccess = true;
            }
            else if (code == (HttpStatusCode)400)
            {
                response.Error400 = JsonSerializer.Deserialize<ResponseErrorResponse>(payload, ResponseJsonOptions);
                response.Error = response.Error400!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)401)
            {
                response.Error401 = JsonSerializer.Deserialize<ResponseErrorResponse>(payload, ResponseJsonOptions);
                response.Error = response.Error401!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)403)
            {
                response.Error403 = JsonSerializer.Deserialize<ResponseErrorResponse>(payload, ResponseJsonOptions);
                response.Error = response.Error403!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)404)
            {
                response.Error404 = JsonSerializer.Deserialize<ResponseErrorResponse>(payload, ResponseJsonOptions);
                response.Error = response.Error404!.TranslateToApiError();
            }
            else if (code == (HttpStatusCode)500)
            {
                response.Error500 = JsonSerializer.Deserialize<ResponseErrorResponse>(payload, ResponseJsonOptions);
                response.Error = response.Error500!.TranslateToApiError();
            }

            return response;
        }
    }

}