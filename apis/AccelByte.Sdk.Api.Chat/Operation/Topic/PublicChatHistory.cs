// Copyright (c) 2022-2023 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Net;
using System.Net.Http;
using System.IO;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Net.Http;

using AccelByte.Sdk.Api.Chat.Model;

namespace AccelByte.Sdk.Api.Chat.Operation
{
    /// <summary>
    /// publicChatHistory
    ///
    /// get chat history in a namespace.
    /// </summary>
    public class PublicChatHistory : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static PublicChatHistoryBuilder Builder { get => new PublicChatHistoryBuilder(); }

        public class PublicChatHistoryBuilder
            : OperationBuilder<PublicChatHistoryBuilder>
        {

            public long? Limit { get; set; }

            public string? Order { get; set; }

            public long? StartCreatedAt { get; set; }





            internal PublicChatHistoryBuilder() { }

            internal PublicChatHistoryBuilder(IAccelByteSdk sdk)
            {
                _Sdk = sdk;
            }


            public PublicChatHistoryBuilder SetLimit(long _limit)
            {
                Limit = _limit;
                return this;
            }

            public PublicChatHistoryBuilder SetOrder(string _order)
            {
                Order = _order;
                return this;
            }

            public PublicChatHistoryBuilder SetStartCreatedAt(long _startCreatedAt)
            {
                StartCreatedAt = _startCreatedAt;
                return this;
            }





            public PublicChatHistory Build(
                string namespace_,
                string topic
            )
            {
                PublicChatHistory op = new PublicChatHistory(this,
                    namespace_,                    
                    topic                    
                );
                op.PreferredSecurityMethod = PreferredSecurityMethod;
                op.RequestJsonOptions = RequestJsonOptions;
                op.ResponseJsonOptions = ResponseJsonOptions;

                return op;
            }

            public List<Model.ModelsChatMessageResponse>? Execute(
                string namespace_,
                string topic
            )
            {
                PublicChatHistory op = Build(
                    namespace_,
                    topic
                );

                if (_Sdk == null)
                    throw IncompleteComponentException.NoSdkObject;

                var response = _Sdk.RunRequest(op);
                return op.ParseResponse(
                    response.Code, 
                    response.ContentType,
                    response.Payload);
            }
        }

        private PublicChatHistory(PublicChatHistoryBuilder builder,
            string namespace_,
            string topic
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["topic"] = topic;
            
            if (builder.Limit != null) QueryParams["limit"] = Convert.ToString(builder.Limit)!;
            if (builder.Order is not null) QueryParams["order"] = builder.Order;
            if (builder.StartCreatedAt != null) QueryParams["startCreatedAt"] = Convert.ToString(builder.StartCreatedAt)!;
            

            
            
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public PublicChatHistory(
            string namespace_,            
            string topic,            
            long? limit,            
            string? order,            
            long? startCreatedAt            
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["topic"] = topic;
            
            if (limit != null) QueryParams["limit"] = Convert.ToString(limit)!;
            if (order is not null) QueryParams["order"] = order;
            if (startCreatedAt != null) QueryParams["startCreatedAt"] = Convert.ToString(startCreatedAt)!;
            

            
            
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/chat/public/namespaces/{namespace}/topic/{topic}/chats";

        public override HttpMethod Method => HttpMethod.Get;

        public override List<string> Consumes => new() { "application/json" };

        public override List<string> Produces => new() { "application/json" };        
        
        public List<Model.ModelsChatMessageResponse>? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {            
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                return JsonSerializer.Deserialize<List<Model.ModelsChatMessageResponse>>(payload, ResponseJsonOptions);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<List<Model.ModelsChatMessageResponse>>(payload, ResponseJsonOptions);
            }
            
            var payloadString = payload.ReadToString();
            
            throw new HttpResponseException(code, payloadString);
        }
    }

}