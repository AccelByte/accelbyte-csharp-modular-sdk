// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading.Tasks;

using AccelByte.Sdk.Core;

using AccelByte.Sdk.Api.Chat.Model;
using AccelByte.Sdk.Api.Chat.Operation;

namespace AccelByte.Sdk.Api.Chat.Wrapper
{
    public class Profanity
    {
        private readonly IAccelByteSdk _sdk;

        private string _CustomBasePath = String.Empty;

        public Profanity(IAccelByteSdk sdk)
        {
            _sdk = sdk;
        }

        public Profanity(IAccelByteSdk sdk, string customBasePath)
        {
            _sdk = sdk;
            _CustomBasePath = customBasePath;
        }

        #region Operation Builders
        public AdminProfanityQuery.AdminProfanityQueryBuilder AdminProfanityQueryOp
        {
            get
            {
                var opBuilder = new Operation.AdminProfanityQuery.AdminProfanityQueryBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminProfanityCreate.AdminProfanityCreateBuilder AdminProfanityCreateOp
        {
            get
            {
                var opBuilder = new Operation.AdminProfanityCreate.AdminProfanityCreateBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminProfanityCreateBulk.AdminProfanityCreateBulkBuilder AdminProfanityCreateBulkOp
        {
            get
            {
                var opBuilder = new Operation.AdminProfanityCreateBulk.AdminProfanityCreateBulkBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminProfanityExport.AdminProfanityExportBuilder AdminProfanityExportOp
        {
            get
            {
                var opBuilder = new Operation.AdminProfanityExport.AdminProfanityExportBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminProfanityGroup.AdminProfanityGroupBuilder AdminProfanityGroupOp
        {
            get
            {
                var opBuilder = new Operation.AdminProfanityGroup.AdminProfanityGroupBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminProfanityImport.AdminProfanityImportBuilder AdminProfanityImportOp
        {
            get
            {
                var opBuilder = new Operation.AdminProfanityImport.AdminProfanityImportBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminProfanityUpdate.AdminProfanityUpdateBuilder AdminProfanityUpdateOp
        {
            get
            {
                var opBuilder = new Operation.AdminProfanityUpdate.AdminProfanityUpdateBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        public AdminProfanityDelete.AdminProfanityDeleteBuilder AdminProfanityDeleteOp
        {
            get
            {
                var opBuilder = new Operation.AdminProfanityDelete.AdminProfanityDeleteBuilder(_sdk);
                if (_CustomBasePath != "")
                    return opBuilder.UseCustomBasePath(_CustomBasePath);
                else
                    return opBuilder;
            }
        }
        #endregion

        public AdminProfanityQuery.Response AdminProfanityQuery(AdminProfanityQuery input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminProfanityQuery.Response> AdminProfanityQueryAsync(AdminProfanityQuery input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminProfanityCreate.Response AdminProfanityCreate(AdminProfanityCreate input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminProfanityCreate.Response> AdminProfanityCreateAsync(AdminProfanityCreate input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminProfanityCreateBulk.Response AdminProfanityCreateBulk(AdminProfanityCreateBulk input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminProfanityCreateBulk.Response> AdminProfanityCreateBulkAsync(AdminProfanityCreateBulk input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminProfanityExport.Response AdminProfanityExport(AdminProfanityExport input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminProfanityExport.Response> AdminProfanityExportAsync(AdminProfanityExport input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminProfanityGroup.Response AdminProfanityGroup(AdminProfanityGroup input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminProfanityGroup.Response> AdminProfanityGroupAsync(AdminProfanityGroup input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminProfanityImport.Response AdminProfanityImport(AdminProfanityImport input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminProfanityImport.Response> AdminProfanityImportAsync(AdminProfanityImport input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminProfanityUpdate.Response AdminProfanityUpdate(AdminProfanityUpdate input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminProfanityUpdate.Response> AdminProfanityUpdateAsync(AdminProfanityUpdate input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public AdminProfanityDelete.Response AdminProfanityDelete(AdminProfanityDelete input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<AdminProfanityDelete.Response> AdminProfanityDeleteAsync(AdminProfanityDelete input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
    }
}