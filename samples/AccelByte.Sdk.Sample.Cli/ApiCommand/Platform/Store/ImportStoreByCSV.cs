// Copyright (c) 2022-2023 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.


using System;
using System.IO;
using System.Collections.Generic;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Sample.Cli.Command;

using AccelByte.Sdk.Api.Platform.Wrapper;
using AccelByte.Sdk.Api.Platform.Model;
using AccelByte.Sdk.Api.Platform.Operation;

namespace AccelByte.Sdk.Sample.Cli.ApiCommand.Platform
{
    [SdkConsoleCommand("platform","importstorebycsv")]
    public class ImportStoreByCSVCommand: ISdkConsoleCommand
    {
        private IAccelByteSdk _SDK;

        public string ServiceName{ get { return "Platform"; } }

        public string OperationName{ get { return "ImportStoreByCSV"; } }

        [SdkCommandArgument("namespace")]
        public string Namespace { get; set; } = String.Empty;

        [SdkCommandArgument("storeId")]
        public string StoreId { get; set; } = String.Empty;

        [SdkCommandFile("category")]
        public Stream Category { get; set; } = new MemoryStream();

        [SdkCommandFile("display")]
        public Stream Display { get; set; } = new MemoryStream();

        [SdkCommandFile("item")]
        public Stream Item { get; set; } = new MemoryStream();

        [SdkCommandArgument("notes")]
        public string Notes { get; set; } = String.Empty;

        [SdkCommandFile("section")]
        public Stream Section { get; set; } = new MemoryStream();

        public ImportStoreByCSVCommand(IAccelByteSdk sdk)
        {
            _SDK = sdk;
        }

        public CommandResult Run()
        {
            AccelByte.Sdk.Api.Platform.Wrapper.Store wrapper = new AccelByte.Sdk.Api.Platform.Wrapper.Store(_SDK);

            var opBuilder = AccelByte.Sdk.Api.Platform.Operation.ImportStoreByCSV.Builder;





            ImportStoreByCSV operation = opBuilder.Build(
                Category,
                Display,
                Item,
                Notes,
                Section,
                Namespace,
                StoreId
            );


            var response = wrapper.ImportStoreByCSV(operation);
            if (response.IsSuccess)
            {
                if (response.Data != null)
                    return CommandResult.Success(SdkHelper.SerializeToJson(response.Data));
                else
                    return CommandResult.Fail("-","response data is null.");
            }   
            else if (response.Error != null)
                return CommandResult.Fail(response.Error.Code, response.Error.Message);
            else
                return CommandResult.Fail("-", "Valid error message unavailable");
        }
    }
}