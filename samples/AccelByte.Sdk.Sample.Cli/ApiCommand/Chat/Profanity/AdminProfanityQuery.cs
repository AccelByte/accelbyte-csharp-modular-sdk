// Copyright (c) 2022-2023 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.


using System;
using System.IO;
using System.Collections.Generic;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Sample.Cli.Command;

using AccelByte.Sdk.Api.Chat.Wrapper;
using AccelByte.Sdk.Api.Chat.Model;
using AccelByte.Sdk.Api.Chat.Operation;

namespace AccelByte.Sdk.Sample.Cli.ApiCommand.Chat
{
    [SdkConsoleCommand("chat","adminprofanityquery")]
    public class AdminProfanityQueryCommand: ISdkConsoleCommand
    {
        private IAccelByteSdk _SDK;

        public string ServiceName{ get { return "Chat"; } }

        public string OperationName{ get { return "AdminProfanityQuery"; } }

        [SdkCommandArgument("namespace")]
        public string Namespace { get; set; } = String.Empty;

        [SdkCommandArgument("filterMask")]
        public string? FilterMask { get; set; }

        [SdkCommandArgument("includeChildren")]
        public bool? IncludeChildren { get; set; }

        [SdkCommandArgument("limit")]
        public long? Limit { get; set; }

        [SdkCommandArgument("offset")]
        public long? Offset { get; set; }

        [SdkCommandArgument("parentId")]
        public string? ParentId { get; set; }

        [SdkCommandArgument("startWith")]
        public string? StartWith { get; set; }

        [SdkCommandArgument("wordType")]
        public string? WordType { get; set; }

        public AdminProfanityQueryCommand(IAccelByteSdk sdk)
        {
            _SDK = sdk;
        }

        public CommandResult Run()
        {
            AccelByte.Sdk.Api.Chat.Wrapper.Profanity wrapper = new AccelByte.Sdk.Api.Chat.Wrapper.Profanity(_SDK);

            var opBuilder = AccelByte.Sdk.Api.Chat.Operation.AdminProfanityQuery.Builder;

            if (FilterMask != null)
                opBuilder.SetFilterMask((string)FilterMask);
            if (IncludeChildren != null)
                opBuilder.SetIncludeChildren((bool)IncludeChildren);
            if (Limit != null)
                opBuilder.SetLimit((long)Limit);
            if (Offset != null)
                opBuilder.SetOffset((long)Offset);
            if (ParentId != null)
                opBuilder.SetParentId((string)ParentId);
            if (StartWith != null)
                opBuilder.SetStartWith((string)StartWith);
            if (WordType != null)
                opBuilder.SetWordType((string)WordType);




            AdminProfanityQuery operation = opBuilder.Build(
                Namespace
            );


            var response = wrapper.AdminProfanityQuery(operation);
            if (response.IsSuccess)
            {
                if (response.Data != null)
                    return CommandResult.Success(SdkHelper.SerializeToJson(response.Data));
                else
                    return CommandResult.Fail("-","response data is null.");
            }   
            else if (!response.Error.IsAvailable)
                return CommandResult.Fail(response.Error.Code, response.Error.Message);
            else
                return CommandResult.Fail("-", "Valid error message unavailable");
        }
    }
}