// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.


using System;
using System.IO;
using System.Collections.Generic;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Sample.Cli.Command;

using AccelByte.Sdk.Api.Match2.Wrapper;
using AccelByte.Sdk.Api.Match2.Model;
using AccelByte.Sdk.Api.Match2.Operation;

namespace AccelByte.Sdk.Sample.Cli.ApiCommand.Match2
{
    [SdkConsoleCommand("match2", "adminquerybackfill")]
    public class AdminQueryBackfillCommand : ISdkConsoleCommand
    {
        private IAccelByteSdk _SDK;

        public string ServiceName { get { return "Match2"; } }

        public string OperationName { get { return "AdminQueryBackfill"; } }

        [SdkCommandArgument("namespace")]
        public string Namespace { get; set; } = String.Empty;

        [SdkCommandArgument("fromTime")]
        public DateTime? FromTime { get; set; }

        [SdkCommandArgument("isActive")]
        public bool? IsActive { get; set; }

        [SdkCommandArgument("limit")]
        public long? Limit { get; set; }

        [SdkCommandArgument("matchPool")]
        public string? MatchPool { get; set; }

        [SdkCommandArgument("offset")]
        public long? Offset { get; set; }

        [SdkCommandArgument("playerID")]
        public string? PlayerID { get; set; }

        [SdkCommandArgument("region")]
        public string? Region { get; set; }

        [SdkCommandArgument("sessionID")]
        public string? SessionID { get; set; }

        [SdkCommandArgument("toTime")]
        public DateTime? ToTime { get; set; }

        public AdminQueryBackfillCommand(IAccelByteSdk sdk)
        {
            _SDK = sdk;
        }

        public CommandResult Run()
        {
            AccelByte.Sdk.Api.Match2.Wrapper.Backfill wrapper = new AccelByte.Sdk.Api.Match2.Wrapper.Backfill(_SDK);

            var opBuilder = AccelByte.Sdk.Api.Match2.Operation.AdminQueryBackfill.Builder;

            if (FromTime != null)
                opBuilder.SetFromTime((DateTime)FromTime);
            if (IsActive != null)
                opBuilder.SetIsActive((bool)IsActive);
            if (Limit != null)
                opBuilder.SetLimit((long)Limit);
            if (MatchPool != null)
                opBuilder.SetMatchPool((string)MatchPool);
            if (Offset != null)
                opBuilder.SetOffset((long)Offset);
            if (PlayerID != null)
                opBuilder.SetPlayerID((string)PlayerID);
            if (Region != null)
                opBuilder.SetRegion((string)Region);
            if (SessionID != null)
                opBuilder.SetSessionID((string)SessionID);
            if (ToTime != null)
                opBuilder.SetToTime((DateTime)ToTime);




            AdminQueryBackfill operation = opBuilder.Build(
                Namespace
            );


            var response = wrapper.AdminQueryBackfill(operation);
            if (response.IsSuccess)
            {
                if (response.Data != null)
                    return CommandResult.Success(SdkHelper.SerializeToJson(response.Data));
                else
                    return CommandResult.Fail("-", "response data is null.");
            }
            else if (!response.Error.IsAvailable)
                return CommandResult.Fail(response.Error.Code, response.Error.Message);
            else
                return CommandResult.Fail("-", "Valid error message unavailable");
        }
    }
}