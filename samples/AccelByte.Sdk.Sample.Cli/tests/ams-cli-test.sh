#!/usr/bin/env bash

# Copyright (c) 2021 AccelByte Inc. All Rights Reserved.
# This is licensed software from AccelByte Inc, for limitations
# and restrictions contact your company contract manager.

# This code is generated by tool. DO NOT EDIT.

# Meta:
# - random seed: 
# - template file: 

# Instructions:
# - Run the Justice SDK Mock Server first before running this script.

export AB_BASE_URL="http://127.0.0.1:8080"
export AB_CLIENT_ID="admin"
export AB_CLIENT_SECRET="admin"
export AB_NAMESPACE="test"
export AB_APP_NAME="UnitTest"

EXIT_CODE=0

eval_tap() {
  if [ $1 -eq 0 ]; then
    echo "ok $2 - $3"
  else
    EXIT_CODE=1
    echo "not ok $2 - $3"
    sed 's/^/# /g' $4
  fi
  rm -f $4
}

CLI_EXE="AccelByte.Sdk.Sample.Cli"
CLI_TOKEN_FILE="$(dirname "$(which $CLI_EXE)")/token.json"
TEMP_JSON_INPUT="input_json.json"
TEMP_FILE_UPLOAD="file_upload.bin"

echo "TAP version 13"
echo "1..27"

#- 1 Login
$CLI_EXE --op login --lt user --user user --pass user > test.out 2>&1
eval_tap $? 1 'Login' test.out

if [ $EXIT_CODE -ne 0 ]; then
  echo "Bail out! Login failed."
  exit $EXIT_CODE
fi

# echo "foo" > "$CLI_TOKEN_FILE"

#- 2 AuthCheck
$CLI_EXE \
    --sn ams \
    --op AuthCheck \
    > test.out 2>&1
eval_tap $? 2 'AuthCheck' test.out

#- 3 PortalHealthCheck
$CLI_EXE \
    --sn ams \
    --op PortalHealthCheck \
    > test.out 2>&1
eval_tap $? 3 'PortalHealthCheck' test.out

#- 4 AccountGet
$CLI_EXE \
    --sn ams \
    --op AccountGet \
    --namespace $AB_NAMESPACE \
    > test.out 2>&1
eval_tap $? 4 'AccountGet' test.out

#- 5 AccountCreate
# body param: body
echo '{"name": "fg5KjGBw"}' > $TEMP_JSON_INPUT
$CLI_EXE \
    --sn ams \
    --op AccountCreate \
    --namespace $AB_NAMESPACE \
    --reqfile $TEMP_JSON_INPUT \
    > test.out 2>&1
eval_tap $? 5 'AccountCreate' test.out

#- 6 AccountLinkTokenGet
$CLI_EXE \
    --sn ams \
    --op AccountLinkTokenGet \
    --namespace $AB_NAMESPACE \
    > test.out 2>&1
eval_tap $? 6 'AccountLinkTokenGet' test.out

#- 7 AccountLink
# body param: body
echo '{"token": "Nprb0zFB"}' > $TEMP_JSON_INPUT
$CLI_EXE \
    --sn ams \
    --op AccountLink \
    --namespace $AB_NAMESPACE \
    --reqfile $TEMP_JSON_INPUT \
    > test.out 2>&1
eval_tap $? 7 'AccountLink' test.out

#- 8 FleetList
$CLI_EXE \
    --sn ams \
    --op FleetList \
    --namespace $AB_NAMESPACE \
    > test.out 2>&1
eval_tap $? 8 'FleetList' test.out

#- 9 FleetCreate
# body param: body
echo '{"active": true, "claimKeys": ["u3YPjk5X", "SgYu1fjO", "dQflkYCm"], "dsHostConfiguration": {"instanceId": "oLpdo0pj", "instanceType": "JZC6Q85K", "serversPerVm": 78}, "imageDeploymentProfile": {"commandLine": "FU5ux5O4", "imageId": "mOKnCYMq", "portConfigurations": [{"name": "pDPtB1RU", "protocol": "qqgzI0GM"}, {"name": "2tk3fQik", "protocol": "cBV2DI2C"}, {"name": "013f7jtK", "protocol": "ARGDpB2e"}], "timeout": {"creation": 78, "drain": 81, "session": 27, "unresponsive": 31}}, "name": "nPemLbw0", "regions": [{"bufferSize": 10, "maxServerCount": 59, "minServerCount": 56, "region": "nI55erZ1"}, {"bufferSize": 68, "maxServerCount": 64, "minServerCount": 84, "region": "aRjBAVHD"}, {"bufferSize": 96, "maxServerCount": 38, "minServerCount": 78, "region": "d3JrZ4KC"}]}' > $TEMP_JSON_INPUT
$CLI_EXE \
    --sn ams \
    --op FleetCreate \
    --namespace $AB_NAMESPACE \
    --reqfile $TEMP_JSON_INPUT \
    > test.out 2>&1
eval_tap $? 9 'FleetCreate' test.out

#- 10 FleetGet
$CLI_EXE \
    --sn ams \
    --op FleetGet \
    --fleetID 'TwX93m4i' \
    --namespace $AB_NAMESPACE \
    > test.out 2>&1
eval_tap $? 10 'FleetGet' test.out

#- 11 FleetUpdate
# body param: body
echo '{"active": true, "claimKeys": ["rpaqjl1S", "LkewEkV1", "OL3NxunZ"], "dsHostConfiguration": {"instanceId": "3IpB85Yw", "instanceType": "PfAO4cEW", "serversPerVm": 5}, "imageDeploymentProfile": {"commandLine": "7MhMNsir", "imageId": "WiSXgCg5", "portConfigurations": [{"name": "jGpHqFB8", "protocol": "V7YIgR1r"}, {"name": "pKwQzSph", "protocol": "ztdse7Bw"}, {"name": "ZvaBXIYK", "protocol": "mfm3CL2K"}], "timeout": {"creation": 81, "drain": 19, "session": 44, "unresponsive": 6}}, "name": "b2HyIH3s", "regions": [{"bufferSize": 4, "maxServerCount": 46, "minServerCount": 39, "region": "5qidBwTL"}, {"bufferSize": 62, "maxServerCount": 43, "minServerCount": 88, "region": "4xROVPHk"}, {"bufferSize": 32, "maxServerCount": 58, "minServerCount": 61, "region": "FZpz8OY6"}]}' > $TEMP_JSON_INPUT
$CLI_EXE \
    --sn ams \
    --op FleetUpdate \
    --fleetID 'xUHLM1ju' \
    --namespace $AB_NAMESPACE \
    --reqfile $TEMP_JSON_INPUT \
    > test.out 2>&1
eval_tap $? 11 'FleetUpdate' test.out

#- 12 FleetDelete
$CLI_EXE \
    --sn ams \
    --op FleetDelete \
    --fleetID '5oE7hwFG' \
    --namespace $AB_NAMESPACE \
    > test.out 2>&1
eval_tap $? 12 'FleetDelete' test.out

#- 13 FleetServers
$CLI_EXE \
    --sn ams \
    --op FleetServers \
    --fleetID '427UKCDp' \
    --namespace $AB_NAMESPACE \
    > test.out 2>&1
eval_tap $? 13 'FleetServers' test.out

#- 14 FleetServerHistory
$CLI_EXE \
    --sn ams \
    --op FleetServerHistory \
    --fleetID 'eMmfMYfH' \
    --namespace $AB_NAMESPACE \
    --count '35' \
    --offset '35' \
    --reason 'HU1dtDRs' \
    --region 'uMeWxFKI' \
    --serverId 'CyJTexBQ' \
    --sortDirection 'edlNjqtk' \
    --status 'jTy7RYZ7' \
    > test.out 2>&1
eval_tap $? 14 'FleetServerHistory' test.out

#- 15 ImageList
$CLI_EXE \
    --sn ams \
    --op ImageList \
    --namespace $AB_NAMESPACE \
    > test.out 2>&1
eval_tap $? 15 'ImageList' test.out

#- 16 ImageGet
$CLI_EXE \
    --sn ams \
    --op ImageGet \
    --imageID 'WoKeyhN8' \
    --namespace $AB_NAMESPACE \
    > test.out 2>&1
eval_tap $? 16 'ImageGet' test.out

#- 17 ImagePatch
# body param: body
echo '{"addedTags": ["s1CqxSng", "HoNO2snL", "uLqcOP6M"], "isProtected": true, "name": "l0kTQzwn", "removedTags": ["TeRHS9FV", "TskuEdbV", "dexYZN99"]}' > $TEMP_JSON_INPUT
$CLI_EXE \
    --sn ams \
    --op ImagePatch \
    --imageID 'rdV9cWxq' \
    --namespace $AB_NAMESPACE \
    --reqfile $TEMP_JSON_INPUT \
    > test.out 2>&1
eval_tap $? 17 'ImagePatch' test.out

#- 18 InfoRegions
$CLI_EXE \
    --sn ams \
    --op InfoRegions \
    --namespace $AB_NAMESPACE \
    > test.out 2>&1
eval_tap $? 18 'InfoRegions' test.out

#- 19 FleetServerInfo
$CLI_EXE \
    --sn ams \
    --op FleetServerInfo \
    --namespace $AB_NAMESPACE \
    --serverID 'c1iGeKIN' \
    > test.out 2>&1
eval_tap $? 19 'FleetServerInfo' test.out

#- 20 ServerHistory
$CLI_EXE \
    --sn ams \
    --op ServerHistory \
    --namespace $AB_NAMESPACE \
    --serverID 'GlBk2k8h' \
    > test.out 2>&1
eval_tap $? 20 'ServerHistory' test.out

#- 21 InfoSupportedInstances
$CLI_EXE \
    --sn ams \
    --op InfoSupportedInstances \
    --namespace $AB_NAMESPACE \
    > test.out 2>&1
eval_tap $? 21 'InfoSupportedInstances' test.out

#- 22 FleetClaimByID
# body param: body
echo '{"region": "nmyURlE4"}' > $TEMP_JSON_INPUT
$CLI_EXE \
    --sn ams \
    --op FleetClaimByID \
    --fleetID 'vVMJMtqR' \
    --namespace $AB_NAMESPACE \
    --reqfile $TEMP_JSON_INPUT \
    > test.out 2>&1
eval_tap $? 22 'FleetClaimByID' test.out

#- 23 LocalWatchdogConnect
$CLI_EXE \
    --sn ams \
    --op LocalWatchdogConnect \
    --namespace $AB_NAMESPACE \
    --watchdogID 'uzfY418R' \
    > test.out 2>&1
eval_tap $? 23 'LocalWatchdogConnect' test.out

#- 24 FleetClaimByKeys
# body param: body
echo '{"claimKeys": ["cBKcDX2I", "S4b15M6s", "DxPKYZbC"], "regions": ["1tFal4CJ", "WvnhS8XT", "cEjLr0L2"]}' > $TEMP_JSON_INPUT
$CLI_EXE \
    --sn ams \
    --op FleetClaimByKeys \
    --namespace $AB_NAMESPACE \
    --reqfile $TEMP_JSON_INPUT \
    > test.out 2>&1
eval_tap $? 24 'FleetClaimByKeys' test.out

#- 25 WatchdogConnect
$CLI_EXE \
    --sn ams \
    --op WatchdogConnect \
    --namespace $AB_NAMESPACE \
    --watchdogID 'ik1Yw1Oy' \
    > test.out 2>&1
eval_tap $? 25 'WatchdogConnect' test.out

#- 26 Func1
$CLI_EXE \
    --sn ams \
    --op Func1 \
    > test.out 2>&1
eval_tap $? 26 'Func1' test.out

#- 27 BasicHealthCheck
$CLI_EXE \
    --sn ams \
    --op BasicHealthCheck \
    > test.out 2>&1
eval_tap $? 27 'BasicHealthCheck' test.out


# remove artifacts
rm -f "$CLI_TOKEN_FILE"
rm -f "$TEMP_JSON_INPUT"
rm -f "$TEMP_FILE_UPLOAD"

exit $EXIT_CODE